
CAN_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003258  08003258  00004258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d4  080032d4  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080032d4  080032d4  000042d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032dc  080032dc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032dc  080032dc  000042dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032e0  080032e0  000042e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080032e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000198  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000058a5  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001483  00000000  00000000  0000a93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000640  00000000  00000000  0000bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000488  00000000  00000000  0000c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e8e  00000000  00000000  0000c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000071aa  00000000  00000000  0002d716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4806  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f90c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fc4  00000000  00000000  000f910c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  000fb0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003240 	.word	0x08003240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003240 	.word	0x08003240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fb0e 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f816 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8b4 	bl	8000714 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005ac:	f000 f87c 	bl	80006a8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Config();
 80005b0:	f000 f932 	bl	8000818 <CAN_Filter_Config>

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005b4:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <main+0x34>)
 80005b6:	f000 fd4f 	bl	8001058 <HAL_CAN_Start>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <main+0x28>
  {
	  Error_Handler();
 80005c0:	f000 f950 	bl	8000864 <Error_Handler>
  }

  CAN1_Tx();
 80005c4:	f000 f8ce 	bl	8000764 <CAN1_Tx>

  CAN1_Rx();
 80005c8:	f000 f902 	bl	80007d0 <CAN1_Rx>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <main+0x30>
 80005d0:	20000084 	.word	0x20000084

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 f8aa 	bl	800273c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000648:	2332      	movs	r3, #50	@ 0x32
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fa01 	bl	8001a60 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 f8fe 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2101      	movs	r1, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fc62 	bl	8001f50 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000692:	f000 f8e7 	bl	8000864 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	@ 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_CAN1_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	@ (8000710 <MX_CAN1_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80006b2:	4b16      	ldr	r3, [pc, #88]	@ (800070c <MX_CAN1_Init+0x64>)
 80006b4:	2205      	movs	r2, #5
 80006b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_CAN1_Init+0x64>)
 80006ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006be:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_CAN1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_CAN1_Init+0x64>)
 80006c8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80006cc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_CAN1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <MX_CAN1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_CAN1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <MX_CAN1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_CAN1_Init+0x64>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_CAN1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_CAN1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_CAN1_Init+0x64>)
 80006fa:	f000 fad3 	bl	8000ca4 <HAL_CAN_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f8ae 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000084 	.word	0x20000084
 8000710:	40006400 	.word	0x40006400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_GPIO_Init+0x4c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <MX_GPIO_Init+0x4c>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <MX_GPIO_Init+0x4c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_GPIO_Init+0x4c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <MX_GPIO_Init+0x4c>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_GPIO_Init+0x4c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <CAN1_Tx>:

/* USER CODE BEGIN 4 */
void CAN1_Tx (void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader ;

	uint32_t TxMailbox;

	uint8_t our_message[5] = {'H', 'E', 'L', 'L', 'O'};
 800076a:	4a16      	ldr	r2, [pc, #88]	@ (80007c4 <CAN1_Tx+0x60>)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000772:	6018      	str	r0, [r3, #0]
 8000774:	3304      	adds	r3, #4
 8000776:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;
 8000778:	2305      	movs	r3, #5
 800077a:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;
 800077c:	f240 635d 	movw	r3, #1629	@ 0x65d
 8000780:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, our_message, &TxMailbox) != HAL_OK)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	1d3a      	adds	r2, r7, #4
 8000790:	f107 0110 	add.w	r1, r7, #16
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <CAN1_Tx+0x64>)
 8000796:	f000 fca3 	bl	80010e0 <HAL_CAN_AddTxMessage>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <CAN1_Tx+0x40>
	{
		Error_Handler();
 80007a0:	f000 f860 	bl	8000864 <Error_Handler>
	}

	while( HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 80007a4:	bf00      	nop
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <CAN1_Tx+0x64>)
 80007ac:	f000 fd68 	bl	8001280 <HAL_CAN_IsTxMessagePending>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f7      	bne.n	80007a6 <CAN1_Tx+0x42>

	printf("message transmitted \n");
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <CAN1_Tx+0x68>)
 80007b8:	f001 fee0 	bl	800257c <puts>

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	@ 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	08003270 	.word	0x08003270
 80007c8:	20000084 	.word	0x20000084
 80007cc:	08003258 	.word	0x08003258

080007d0 <CAN1_Rx>:

void CAN1_Rx(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;

	uint8_t rcvd_msg[5];

	// we waiting for at least one message in to the RX FIFO0
	while ( ! HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 80007d6:	bf00      	nop
 80007d8:	2100      	movs	r1, #0
 80007da:	480d      	ldr	r0, [pc, #52]	@ (8000810 <CAN1_Rx+0x40>)
 80007dc:	f000 fe96 	bl	800150c <HAL_CAN_GetRxFifoFillLevel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f8      	beq.n	80007d8 <CAN1_Rx+0x8>

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg ) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	f107 020c 	add.w	r2, r7, #12
 80007ec:	2100      	movs	r1, #0
 80007ee:	4808      	ldr	r0, [pc, #32]	@ (8000810 <CAN1_Rx+0x40>)
 80007f0:	f000 fd6a 	bl	80012c8 <HAL_CAN_GetRxMessage>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <CAN1_Rx+0x2e>
	{
		Error_Handler();
 80007fa:	f000 f833 	bl	8000864 <Error_Handler>
	}

	printf("message received : %s\n", rcvd_msg);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4804      	ldr	r0, [pc, #16]	@ (8000814 <CAN1_Rx+0x44>)
 8000804:	f001 fe52 	bl	80024ac <iprintf>
}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	@ 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000084 	.word	0x20000084
 8000814:	08003278 	.word	0x08003278

08000818 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_Filter_init;

	can1_Filter_init.FilterActivation = ENABLE ;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
	can1_Filter_init.FilterBank = 0 ;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
	can1_Filter_init.FilterFIFOAssignment = CAN_RX_FIFO0 ;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
	can1_Filter_init.FilterIdHigh = 0x0000 ;
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
	can1_Filter_init.FilterIdLow = 0x0000 ;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
	can1_Filter_init.FilterMaskIdHigh = 0x0000 ;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
	can1_Filter_init.FilterMaskIdLow = 0x0000 ;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
	can1_Filter_init.FilterMode = CAN_FILTERMODE_IDMASK ;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
	can1_Filter_init.FilterScale = CAN_FILTERSCALE_32BIT ;
 800083e:	2301      	movs	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan1, &can1_Filter_init) != HAL_OK )
 8000842:	463b      	mov	r3, r7
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <CAN_Filter_Config+0x48>)
 8000848:	f000 fb28 	bl	8000e9c <HAL_CAN_ConfigFilter>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 8000852:	f000 f807 	bl	8000864 <Error_Handler>
	}

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000084 	.word	0x20000084

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <HAL_MspInit+0x4c>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000884:	6453      	str	r3, [r2, #68]	@ 0x44
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <HAL_MspInit+0x4c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ae:	2007      	movs	r0, #7
 80008b0:	f000 ff06 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a19      	ldr	r2, [pc, #100]	@ (8000944 <HAL_CAN_MspInit+0x84>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12c      	bne.n	800093c <HAL_CAN_MspInit+0x7c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <HAL_CAN_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a17      	ldr	r2, [pc, #92]	@ (8000948 <HAL_CAN_MspInit+0x88>)
 80008ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <HAL_CAN_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <HAL_CAN_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <HAL_CAN_MspInit+0x88>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <HAL_CAN_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800091a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800092c:	2309      	movs	r3, #9
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <HAL_CAN_MspInit+0x8c>)
 8000938:	f000 fef6 	bl	8001728 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40006400 	.word	0x40006400
 8000948:	40023800 	.word	0x40023800
 800094c:	40020400 	.word	0x40020400

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a6:	f000 f95d 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <ITM_SendChar+0x48>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a0e      	ldr	r2, [pc, #56]	@ (80009f8 <ITM_SendChar+0x48>)
 80009c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009c4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <ITM_SendChar+0x4c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0c      	ldr	r2, [pc, #48]	@ (80009fc <ITM_SendChar+0x4c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80009d2:	bf00      	nop
 80009d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0f8      	beq.n	80009d4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80009e2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	6013      	str	r3, [r2, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000edfc 	.word	0xe000edfc
 80009fc:	e0000e00 	.word	0xe0000e00

08000a00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e00a      	b.n	8000a28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a12:	f3af 8000 	nop.w
 8000a16:	4601      	mov	r1, r0
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	b2ca      	uxtb	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbf0      	blt.n	8000a12 <_read+0x12>
	}

return len;
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e009      	b.n	8000a60 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ffab 	bl	80009b0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbf1      	blt.n	8000a4c <_write+0x12>
	}
	return len;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_close>:

int _close(int file)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_isatty>:

int _isatty(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
	return 0;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f001 fe64 	bl	80027d8 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20020000 	.word	0x20020000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	200000ac 	.word	0x200000ac
 8000b44:	20000200 	.word	0x20000200

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b70:	f7ff ffea 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	@ (8000bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f001 fe23 	bl	80027e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fcfd 	bl	800059c <main>
  bx  lr    
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bb0:	080032e4 	.word	0x080032e4
  ldr r2, =_sbss
 8000bb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bb8:	20000200 	.word	0x20000200

08000bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 fd69 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fe3c 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fd73 	bl	800170e <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 fd49 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	@ (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	200000b0 	.word	0x200000b0

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200000b0 	.word	0x200000b0

08000ca4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0ed      	b.n	8000e92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fdfc 	bl	80008c0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd8:	f7ff ffd8 	bl	8000c8c <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cde:	e012      	b.n	8000d06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce0:	f7ff ffd4 	bl	8000c8c <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d90b      	bls.n	8000d06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e0c5      	b.n	8000e92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0e5      	beq.n	8000ce0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0202 	bic.w	r2, r2, #2
 8000d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d24:	f7ff ffb2 	bl	8000c8c <HAL_GetTick>
 8000d28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d2a:	e012      	b.n	8000d52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d2c:	f7ff ffae 	bl	8000c8c <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b0a      	cmp	r3, #10
 8000d38:	d90b      	bls.n	8000d52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2205      	movs	r2, #5
 8000d4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e09f      	b.n	8000e92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e5      	bne.n	8000d2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7e1b      	ldrb	r3, [r3, #24]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d108      	bne.n	8000d7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	e007      	b.n	8000d8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7e5b      	ldrb	r3, [r3, #25]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d108      	bne.n	8000da4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7e9b      	ldrb	r3, [r3, #26]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d108      	bne.n	8000dce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0220 	orr.w	r2, r2, #32
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e007      	b.n	8000dde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0220 	bic.w	r2, r2, #32
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7edb      	ldrb	r3, [r3, #27]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d108      	bne.n	8000df8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0210 	bic.w	r2, r2, #16
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e007      	b.n	8000e08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0210 	orr.w	r2, r2, #16
 8000e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7f1b      	ldrb	r3, [r3, #28]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d108      	bne.n	8000e22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0208 	orr.w	r2, r2, #8
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e007      	b.n	8000e32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0208 	bic.w	r2, r2, #8
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7f5b      	ldrb	r3, [r3, #29]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d108      	bne.n	8000e4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0204 	orr.w	r2, r2, #4
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e007      	b.n	8000e5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0204 	bic.w	r2, r2, #4
 8000e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	ea42 0103 	orr.w	r1, r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	1e5a      	subs	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eac:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d003      	beq.n	8000ebc <HAL_CAN_ConfigFilter+0x20>
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	f040 80be 	bne.w	8001038 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ebc:	4b65      	ldr	r3, [pc, #404]	@ (8001054 <HAL_CAN_ConfigFilter+0x1b8>)
 8000ebe:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ec6:	f043 0201 	orr.w	r2, r3, #1
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ed6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	431a      	orrs	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	2201      	movs	r2, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d123      	bne.n	8000f66 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	401a      	ands	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	3248      	adds	r2, #72	@ 0x48
 8000f46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f5c:	6939      	ldr	r1, [r7, #16]
 8000f5e:	3348      	adds	r3, #72	@ 0x48
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d122      	bne.n	8000fb4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	3248      	adds	r2, #72	@ 0x48
 8000f94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000faa:	6939      	ldr	r1, [r7, #16]
 8000fac:	3348      	adds	r3, #72	@ 0x48
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	440b      	add	r3, r1
 8000fb2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d109      	bne.n	8000fd0 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000fce:	e007      	b.n	8000fe0 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d109      	bne.n	8000ffc <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000ffa:	e007      	b.n	800100c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	431a      	orrs	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d107      	bne.n	8001024 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	431a      	orrs	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800102a:	f023 0201 	bic.w	r2, r3, #1
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	e006      	b.n	8001046 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
  }
}
 8001046:	4618      	mov	r0, r3
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40006400 	.word	0x40006400

08001058 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d12e      	bne.n	80010ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2202      	movs	r2, #2
 8001070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0201 	bic.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001084:	f7ff fe02 	bl	8000c8c <HAL_GetTick>
 8001088:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800108a:	e012      	b.n	80010b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800108c:	f7ff fdfe 	bl	8000c8c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b0a      	cmp	r3, #10
 8001098:	d90b      	bls.n	80010b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2205      	movs	r2, #5
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e012      	b.n	80010d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e5      	bne.n	800108c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e006      	b.n	80010d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ce:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
  }
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	@ 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d003      	beq.n	800110c <HAL_CAN_AddTxMessage+0x2c>
 8001104:	7ffb      	ldrb	r3, [r7, #31]
 8001106:	2b02      	cmp	r3, #2
 8001108:	f040 80ad 	bne.w	8001266 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10a      	bne.n	800112c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800111c:	2b00      	cmp	r3, #0
 800111e:	d105      	bne.n	800112c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8095 	beq.w	8001256 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	0e1b      	lsrs	r3, r3, #24
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10d      	bne.n	8001164 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001152:	68f9      	ldr	r1, [r7, #12]
 8001154:	6809      	ldr	r1, [r1, #0]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3318      	adds	r3, #24
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	440b      	add	r3, r1
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e00f      	b.n	8001184 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800116e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001178:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3318      	adds	r3, #24
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	440b      	add	r3, r1
 8001182:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3318      	adds	r3, #24
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	440b      	add	r3, r1
 8001194:	3304      	adds	r3, #4
 8001196:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	7d1b      	ldrb	r3, [r3, #20]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d111      	bne.n	80011c4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3318      	adds	r3, #24
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4413      	add	r3, r2
 80011ac:	3304      	adds	r3, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	6811      	ldr	r1, [r2, #0]
 80011b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3318      	adds	r3, #24
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	440b      	add	r3, r1
 80011c0:	3304      	adds	r3, #4
 80011c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3307      	adds	r3, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	061a      	lsls	r2, r3, #24
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3306      	adds	r3, #6
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	041b      	lsls	r3, r3, #16
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3305      	adds	r3, #5
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	4313      	orrs	r3, r2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	3204      	adds	r2, #4
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	4610      	mov	r0, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	6811      	ldr	r1, [r2, #0]
 80011ec:	ea43 0200 	orr.w	r2, r3, r0
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80011fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3303      	adds	r3, #3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	061a      	lsls	r2, r3, #24
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3302      	adds	r3, #2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3301      	adds	r3, #1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	4313      	orrs	r3, r2
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	4610      	mov	r0, r2
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	6811      	ldr	r1, [r2, #0]
 8001222:	ea43 0200 	orr.w	r2, r3, r0
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	440b      	add	r3, r1
 800122c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001230:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3318      	adds	r3, #24
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4413      	add	r3, r2
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	6811      	ldr	r1, [r2, #0]
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3318      	adds	r3, #24
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	440b      	add	r3, r1
 8001250:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e00e      	b.n	8001274 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e006      	b.n	8001274 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
  }
}
 8001274:	4618      	mov	r0, r3
 8001276:	3724      	adds	r7, #36	@ 0x24
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001296:	7afb      	ldrb	r3, [r7, #11]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d002      	beq.n	80012a2 <HAL_CAN_IsTxMessagePending+0x22>
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d10b      	bne.n	80012ba <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	069b      	lsls	r3, r3, #26
 80012ac:	401a      	ands	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	069b      	lsls	r3, r3, #26
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d001      	beq.n	80012ba <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80012b6:	2301      	movs	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <HAL_CAN_GetRxMessage+0x24>
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	f040 8103 	bne.w	80014f2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10e      	bne.n	8001310 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d116      	bne.n	800132e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001304:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0f7      	b.n	8001500 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d107      	bne.n	800132e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0e8      	b.n	8001500 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	331b      	adds	r3, #27
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0204 	and.w	r2, r3, #4
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10c      	bne.n	8001366 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	331b      	adds	r3, #27
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	0d5b      	lsrs	r3, r3, #21
 800135c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e00b      	b.n	800137e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	331b      	adds	r3, #27
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	331b      	adds	r3, #27
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0202 	and.w	r2, r3, #2
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	331b      	adds	r3, #27
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	3304      	adds	r3, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2208      	movs	r2, #8
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	e00b      	b.n	80013cc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	331b      	adds	r3, #27
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 020f 	and.w	r2, r3, #15
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	331b      	adds	r3, #27
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	3304      	adds	r3, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	331b      	adds	r3, #27
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	4413      	add	r3, r2
 80013f0:	3304      	adds	r3, #4
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0a1a      	lsrs	r2, r3, #8
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0c1a      	lsrs	r2, r3, #16
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	3302      	adds	r3, #2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	0e1a      	lsrs	r2, r3, #24
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3303      	adds	r3, #3
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4413      	add	r3, r2
 800146a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	3304      	adds	r3, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4413      	add	r3, r2
 8001482:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	0a1a      	lsrs	r2, r3, #8
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3305      	adds	r3, #5
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0c1a      	lsrs	r2, r3, #16
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	3306      	adds	r3, #6
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0e1a      	lsrs	r2, r3, #24
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	3307      	adds	r3, #7
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d108      	bne.n	80014de <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0220 	orr.w	r2, r2, #32
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	e007      	b.n	80014ee <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0220 	orr.w	r2, r2, #32
 80014ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e006      	b.n	8001500 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
  }
}
 8001500:	4618      	mov	r0, r3
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001520:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001522:	7afb      	ldrb	r3, [r7, #11]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d002      	beq.n	800152e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d10f      	bne.n	800154e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d106      	bne.n	8001542 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e005      	b.n	800154e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	@ (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff47 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff5c 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff8e 	bl	8001614 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffb0 	bl	800167c <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	e16b      	b.n	8001a1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 815a 	bne.w	8001a16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d005      	beq.n	800177a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001776:	2b02      	cmp	r3, #2
 8001778:	d130      	bne.n	80017dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 0201 	and.w	r2, r3, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d017      	beq.n	8001818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d123      	bne.n	800186c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80b4 	beq.w	8001a16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b60      	ldr	r3, [pc, #384]	@ (8001a34 <HAL_GPIO_Init+0x30c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001a34 <HAL_GPIO_Init+0x30c>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018be:	4b5d      	ldr	r3, [pc, #372]	@ (8001a34 <HAL_GPIO_Init+0x30c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001a38 <HAL_GPIO_Init+0x310>)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a52      	ldr	r2, [pc, #328]	@ (8001a3c <HAL_GPIO_Init+0x314>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d02b      	beq.n	800194e <HAL_GPIO_Init+0x226>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a51      	ldr	r2, [pc, #324]	@ (8001a40 <HAL_GPIO_Init+0x318>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d025      	beq.n	800194a <HAL_GPIO_Init+0x222>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a50      	ldr	r2, [pc, #320]	@ (8001a44 <HAL_GPIO_Init+0x31c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01f      	beq.n	8001946 <HAL_GPIO_Init+0x21e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4f      	ldr	r2, [pc, #316]	@ (8001a48 <HAL_GPIO_Init+0x320>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d019      	beq.n	8001942 <HAL_GPIO_Init+0x21a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4e      	ldr	r2, [pc, #312]	@ (8001a4c <HAL_GPIO_Init+0x324>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0x216>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4d      	ldr	r2, [pc, #308]	@ (8001a50 <HAL_GPIO_Init+0x328>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00d      	beq.n	800193a <HAL_GPIO_Init+0x212>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4c      	ldr	r2, [pc, #304]	@ (8001a54 <HAL_GPIO_Init+0x32c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x20e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4b      	ldr	r2, [pc, #300]	@ (8001a58 <HAL_GPIO_Init+0x330>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_GPIO_Init+0x20a>
 800192e:	2307      	movs	r3, #7
 8001930:	e00e      	b.n	8001950 <HAL_GPIO_Init+0x228>
 8001932:	2308      	movs	r3, #8
 8001934:	e00c      	b.n	8001950 <HAL_GPIO_Init+0x228>
 8001936:	2306      	movs	r3, #6
 8001938:	e00a      	b.n	8001950 <HAL_GPIO_Init+0x228>
 800193a:	2305      	movs	r3, #5
 800193c:	e008      	b.n	8001950 <HAL_GPIO_Init+0x228>
 800193e:	2304      	movs	r3, #4
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x228>
 8001942:	2303      	movs	r3, #3
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x228>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x228>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x228>
 800194e:	2300      	movs	r3, #0
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f002 0203 	and.w	r2, r2, #3
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001960:	4935      	ldr	r1, [pc, #212]	@ (8001a38 <HAL_GPIO_Init+0x310>)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <HAL_GPIO_Init+0x334>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001992:	4a32      	ldr	r2, [pc, #200]	@ (8001a5c <HAL_GPIO_Init+0x334>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001998:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <HAL_GPIO_Init+0x334>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019bc:	4a27      	ldr	r2, [pc, #156]	@ (8001a5c <HAL_GPIO_Init+0x334>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c2:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <HAL_GPIO_Init+0x334>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a5c <HAL_GPIO_Init+0x334>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_GPIO_Init+0x334>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a10:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <HAL_GPIO_Init+0x334>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b0f      	cmp	r3, #15
 8001a20:	f67f ae90 	bls.w	8001744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3724      	adds	r7, #36	@ 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40021400 	.word	0x40021400
 8001a54:	40021800 	.word	0x40021800
 8001a58:	40021c00 	.word	0x40021c00
 8001a5c:	40013c00 	.word	0x40013c00

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e267      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d075      	beq.n	8001b6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a7e:	4b88      	ldr	r3, [pc, #544]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d00c      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8a:	4b85      	ldr	r3, [pc, #532]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d112      	bne.n	8001abc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a96:	4b82      	ldr	r3, [pc, #520]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aa2:	d10b      	bne.n	8001abc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d05b      	beq.n	8001b68 <HAL_RCC_OscConfig+0x108>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d157      	bne.n	8001b68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e242      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x74>
 8001ac6:	4b76      	ldr	r3, [pc, #472]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a75      	ldr	r2, [pc, #468]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0xb0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x98>
 8001ade:	4b70      	ldr	r3, [pc, #448]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6f      	ldr	r2, [pc, #444]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6c      	ldr	r2, [pc, #432]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0xb0>
 8001af8:	4b69      	ldr	r3, [pc, #420]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a68      	ldr	r2, [pc, #416]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b66      	ldr	r3, [pc, #408]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a65      	ldr	r2, [pc, #404]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff f8b8 	bl	8000c8c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff f8b4 	bl	8000c8c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	@ 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e207      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0xc0>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff f8a4 	bl	8000c8c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f8a0 	bl	8000c8c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	@ 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1f3      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	4b51      	ldr	r3, [pc, #324]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0xe8>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d063      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b82:	4b47      	ldr	r3, [pc, #284]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d11c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8e:	4b44      	ldr	r3, [pc, #272]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x152>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e1c7      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4937      	ldr	r1, [pc, #220]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	e03a      	b.n	8001c3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <HAL_RCC_OscConfig+0x244>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff f859 	bl	8000c8c <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff f855 	bl	8000c8c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e1a8      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b28      	ldr	r3, [pc, #160]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4925      	ldr	r1, [pc, #148]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
 8001c10:	e015      	b.n	8001c3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c12:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_RCC_OscConfig+0x244>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff f838 	bl	8000c8c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff f834 	bl	8000c8c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e187      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d036      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_RCC_OscConfig+0x248>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7ff f818 	bl	8000c8c <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c60:	f7ff f814 	bl	8000c8c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e167      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x200>
 8001c7e:	e01b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_RCC_OscConfig+0x248>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7ff f801 	bl	8000c8c <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8c:	e00e      	b.n	8001cac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8e:	f7fe fffd 	bl	8000c8c <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d907      	bls.n	8001cac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e150      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	42470000 	.word	0x42470000
 8001ca8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	4b88      	ldr	r3, [pc, #544]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ea      	bne.n	8001c8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 8097 	beq.w	8001df4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cca:	4b81      	ldr	r3, [pc, #516]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10f      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b7d      	ldr	r3, [pc, #500]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	4a7c      	ldr	r2, [pc, #496]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf6:	4b77      	ldr	r3, [pc, #476]	@ (8001ed4 <HAL_RCC_OscConfig+0x474>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d118      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d02:	4b74      	ldr	r3, [pc, #464]	@ (8001ed4 <HAL_RCC_OscConfig+0x474>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a73      	ldr	r2, [pc, #460]	@ (8001ed4 <HAL_RCC_OscConfig+0x474>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0e:	f7fe ffbd 	bl	8000c8c <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d16:	f7fe ffb9 	bl	8000c8c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e10c      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed4 <HAL_RCC_OscConfig+0x474>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2ea>
 8001d3c:	4b64      	ldr	r3, [pc, #400]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d40:	4a63      	ldr	r2, [pc, #396]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d48:	e01c      	b.n	8001d84 <HAL_RCC_OscConfig+0x324>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x30c>
 8001d52:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d56:	4a5e      	ldr	r2, [pc, #376]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d62:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0x324>
 8001d6c:	4b58      	ldr	r3, [pc, #352]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d70:	4a57      	ldr	r2, [pc, #348]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d78:	4b55      	ldr	r3, [pc, #340]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7c:	4a54      	ldr	r2, [pc, #336]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	f023 0304 	bic.w	r3, r3, #4
 8001d82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d015      	beq.n	8001db8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8c:	f7fe ff7e 	bl	8000c8c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7fe ff7a 	bl	8000c8c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0cb      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	4b49      	ldr	r3, [pc, #292]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0ee      	beq.n	8001d94 <HAL_RCC_OscConfig+0x334>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7fe ff68 	bl	8000c8c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7fe ff64 	bl	8000c8c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0b5      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ee      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de8:	4b39      	ldr	r3, [pc, #228]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	4a38      	ldr	r2, [pc, #224]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80a1 	beq.w	8001f40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfe:	4b34      	ldr	r3, [pc, #208]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d05c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d141      	bne.n	8001e96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <HAL_RCC_OscConfig+0x478>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7fe ff38 	bl	8000c8c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe ff34 	bl	8000c8c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e087      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	4b27      	ldr	r3, [pc, #156]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4c:	019b      	lsls	r3, r3, #6
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	085b      	lsrs	r3, r3, #1
 8001e56:	3b01      	subs	r3, #1
 8001e58:	041b      	lsls	r3, r3, #16
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	061b      	lsls	r3, r3, #24
 8001e62:	491b      	ldr	r1, [pc, #108]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <HAL_RCC_OscConfig+0x478>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe ff0d 	bl	8000c8c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7fe ff09 	bl	8000c8c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e05c      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x416>
 8001e94:	e054      	b.n	8001f40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_RCC_OscConfig+0x478>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fef6 	bl	8000c8c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe fef2 	bl	8000c8c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e045      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x444>
 8001ec2:	e03d      	b.n	8001f40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e038      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <HAL_RCC_OscConfig+0x4ec>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d028      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d121      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d11a      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d111      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	3b01      	subs	r3, #1
 8001f26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0cc      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b68      	ldr	r3, [pc, #416]	@ (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d90c      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b65      	ldr	r3, [pc, #404]	@ (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b63      	ldr	r3, [pc, #396]	@ (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b8      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa4:	4b59      	ldr	r3, [pc, #356]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fbc:	4b53      	ldr	r3, [pc, #332]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b50      	ldr	r3, [pc, #320]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	494d      	ldr	r1, [pc, #308]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d044      	beq.n	8002070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b47      	ldr	r3, [pc, #284]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d119      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d003      	beq.n	800200e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800200a:	2b03      	cmp	r3, #3
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b3f      	ldr	r3, [pc, #252]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e06f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	4b3b      	ldr	r3, [pc, #236]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e067      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b37      	ldr	r3, [pc, #220]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4934      	ldr	r1, [pc, #208]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7fe fe24 	bl	8000c8c <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7fe fe20 	bl	8000c8c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e04f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b2b      	ldr	r3, [pc, #172]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d20c      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b22      	ldr	r3, [pc, #136]	@ (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e032      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b19      	ldr	r3, [pc, #100]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4916      	ldr	r1, [pc, #88]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c2:	4b12      	ldr	r3, [pc, #72]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	490e      	ldr	r1, [pc, #56]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d6:	f000 f821 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	490a      	ldr	r1, [pc, #40]	@ (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fd84 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023c00 	.word	0x40023c00
 800210c:	40023800 	.word	0x40023800
 8002110:	08003290 	.word	0x08003290
 8002114:	20000000 	.word	0x20000000
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002120:	b094      	sub	sp, #80	@ 0x50
 8002122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002134:	4b79      	ldr	r3, [pc, #484]	@ (800231c <HAL_RCC_GetSysClockFreq+0x200>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b08      	cmp	r3, #8
 800213e:	d00d      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x40>
 8002140:	2b08      	cmp	r3, #8
 8002142:	f200 80e1 	bhi.w	8002308 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x34>
 800214a:	2b04      	cmp	r3, #4
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x3a>
 800214e:	e0db      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002150:	4b73      	ldr	r3, [pc, #460]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x204>)
 8002152:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002154:	e0db      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002156:	4b73      	ldr	r3, [pc, #460]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x208>)
 8002158:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800215a:	e0d8      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800215c:	4b6f      	ldr	r3, [pc, #444]	@ (800231c <HAL_RCC_GetSysClockFreq+0x200>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002164:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002166:	4b6d      	ldr	r3, [pc, #436]	@ (800231c <HAL_RCC_GetSysClockFreq+0x200>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d063      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002172:	4b6a      	ldr	r3, [pc, #424]	@ (800231c <HAL_RCC_GetSysClockFreq+0x200>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	099b      	lsrs	r3, r3, #6
 8002178:	2200      	movs	r2, #0
 800217a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800217c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800217e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002184:	633b      	str	r3, [r7, #48]	@ 0x30
 8002186:	2300      	movs	r3, #0
 8002188:	637b      	str	r3, [r7, #52]	@ 0x34
 800218a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800218e:	4622      	mov	r2, r4
 8002190:	462b      	mov	r3, r5
 8002192:	f04f 0000 	mov.w	r0, #0
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	0159      	lsls	r1, r3, #5
 800219c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a0:	0150      	lsls	r0, r2, #5
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4621      	mov	r1, r4
 80021a8:	1a51      	subs	r1, r2, r1
 80021aa:	6139      	str	r1, [r7, #16]
 80021ac:	4629      	mov	r1, r5
 80021ae:	eb63 0301 	sbc.w	r3, r3, r1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021c0:	4659      	mov	r1, fp
 80021c2:	018b      	lsls	r3, r1, #6
 80021c4:	4651      	mov	r1, sl
 80021c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ca:	4651      	mov	r1, sl
 80021cc:	018a      	lsls	r2, r1, #6
 80021ce:	4651      	mov	r1, sl
 80021d0:	ebb2 0801 	subs.w	r8, r2, r1
 80021d4:	4659      	mov	r1, fp
 80021d6:	eb63 0901 	sbc.w	r9, r3, r1
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ee:	4690      	mov	r8, r2
 80021f0:	4699      	mov	r9, r3
 80021f2:	4623      	mov	r3, r4
 80021f4:	eb18 0303 	adds.w	r3, r8, r3
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	462b      	mov	r3, r5
 80021fc:	eb49 0303 	adc.w	r3, r9, r3
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800220e:	4629      	mov	r1, r5
 8002210:	024b      	lsls	r3, r1, #9
 8002212:	4621      	mov	r1, r4
 8002214:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002218:	4621      	mov	r1, r4
 800221a:	024a      	lsls	r2, r1, #9
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002222:	2200      	movs	r2, #0
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002226:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800222c:	f7fe f820 	bl	8000270 <__aeabi_uldivmod>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4613      	mov	r3, r2
 8002236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002238:	e058      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223a:	4b38      	ldr	r3, [pc, #224]	@ (800231c <HAL_RCC_GetSysClockFreq+0x200>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	2200      	movs	r2, #0
 8002242:	4618      	mov	r0, r3
 8002244:	4611      	mov	r1, r2
 8002246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800224a:	623b      	str	r3, [r7, #32]
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002254:	4642      	mov	r2, r8
 8002256:	464b      	mov	r3, r9
 8002258:	f04f 0000 	mov.w	r0, #0
 800225c:	f04f 0100 	mov.w	r1, #0
 8002260:	0159      	lsls	r1, r3, #5
 8002262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002266:	0150      	lsls	r0, r2, #5
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4641      	mov	r1, r8
 800226e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002272:	4649      	mov	r1, r9
 8002274:	eb63 0b01 	sbc.w	fp, r3, r1
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800228c:	ebb2 040a 	subs.w	r4, r2, sl
 8002290:	eb63 050b 	sbc.w	r5, r3, fp
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	00eb      	lsls	r3, r5, #3
 800229e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a2:	00e2      	lsls	r2, r4, #3
 80022a4:	4614      	mov	r4, r2
 80022a6:	461d      	mov	r5, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	18e3      	adds	r3, r4, r3
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	464b      	mov	r3, r9
 80022b0:	eb45 0303 	adc.w	r3, r5, r3
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022c2:	4629      	mov	r1, r5
 80022c4:	028b      	lsls	r3, r1, #10
 80022c6:	4621      	mov	r1, r4
 80022c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022cc:	4621      	mov	r1, r4
 80022ce:	028a      	lsls	r2, r1, #10
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d6:	2200      	movs	r2, #0
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	61fa      	str	r2, [r7, #28]
 80022dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e0:	f7fd ffc6 	bl	8000270 <__aeabi_uldivmod>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4613      	mov	r3, r2
 80022ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_RCC_GetSysClockFreq+0x200>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	3301      	adds	r3, #1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80022fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002306:	e002      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x204>)
 800230a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800230c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002310:	4618      	mov	r0, r3
 8002312:	3750      	adds	r7, #80	@ 0x50
 8002314:	46bd      	mov	sp, r7
 8002316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	00f42400 	.word	0x00f42400
 8002324:	007a1200 	.word	0x007a1200

08002328 <std>:
 8002328:	2300      	movs	r3, #0
 800232a:	b510      	push	{r4, lr}
 800232c:	4604      	mov	r4, r0
 800232e:	e9c0 3300 	strd	r3, r3, [r0]
 8002332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002336:	6083      	str	r3, [r0, #8]
 8002338:	8181      	strh	r1, [r0, #12]
 800233a:	6643      	str	r3, [r0, #100]	@ 0x64
 800233c:	81c2      	strh	r2, [r0, #14]
 800233e:	6183      	str	r3, [r0, #24]
 8002340:	4619      	mov	r1, r3
 8002342:	2208      	movs	r2, #8
 8002344:	305c      	adds	r0, #92	@ 0x5c
 8002346:	f000 f9f9 	bl	800273c <memset>
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <std+0x58>)
 800234c:	6263      	str	r3, [r4, #36]	@ 0x24
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <std+0x5c>)
 8002350:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <std+0x60>)
 8002354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002356:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <std+0x64>)
 8002358:	6323      	str	r3, [r4, #48]	@ 0x30
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <std+0x68>)
 800235c:	6224      	str	r4, [r4, #32]
 800235e:	429c      	cmp	r4, r3
 8002360:	d006      	beq.n	8002370 <std+0x48>
 8002362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002366:	4294      	cmp	r4, r2
 8002368:	d002      	beq.n	8002370 <std+0x48>
 800236a:	33d0      	adds	r3, #208	@ 0xd0
 800236c:	429c      	cmp	r4, r3
 800236e:	d105      	bne.n	800237c <std+0x54>
 8002370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002378:	f000 ba58 	b.w	800282c <__retarget_lock_init_recursive>
 800237c:	bd10      	pop	{r4, pc}
 800237e:	bf00      	nop
 8002380:	0800258d 	.word	0x0800258d
 8002384:	080025af 	.word	0x080025af
 8002388:	080025e7 	.word	0x080025e7
 800238c:	0800260b 	.word	0x0800260b
 8002390:	200000b4 	.word	0x200000b4

08002394 <stdio_exit_handler>:
 8002394:	4a02      	ldr	r2, [pc, #8]	@ (80023a0 <stdio_exit_handler+0xc>)
 8002396:	4903      	ldr	r1, [pc, #12]	@ (80023a4 <stdio_exit_handler+0x10>)
 8002398:	4803      	ldr	r0, [pc, #12]	@ (80023a8 <stdio_exit_handler+0x14>)
 800239a:	f000 b869 	b.w	8002470 <_fwalk_sglue>
 800239e:	bf00      	nop
 80023a0:	2000000c 	.word	0x2000000c
 80023a4:	080030c9 	.word	0x080030c9
 80023a8:	2000001c 	.word	0x2000001c

080023ac <cleanup_stdio>:
 80023ac:	6841      	ldr	r1, [r0, #4]
 80023ae:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <cleanup_stdio+0x34>)
 80023b0:	4299      	cmp	r1, r3
 80023b2:	b510      	push	{r4, lr}
 80023b4:	4604      	mov	r4, r0
 80023b6:	d001      	beq.n	80023bc <cleanup_stdio+0x10>
 80023b8:	f000 fe86 	bl	80030c8 <_fflush_r>
 80023bc:	68a1      	ldr	r1, [r4, #8]
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <cleanup_stdio+0x38>)
 80023c0:	4299      	cmp	r1, r3
 80023c2:	d002      	beq.n	80023ca <cleanup_stdio+0x1e>
 80023c4:	4620      	mov	r0, r4
 80023c6:	f000 fe7f 	bl	80030c8 <_fflush_r>
 80023ca:	68e1      	ldr	r1, [r4, #12]
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <cleanup_stdio+0x3c>)
 80023ce:	4299      	cmp	r1, r3
 80023d0:	d004      	beq.n	80023dc <cleanup_stdio+0x30>
 80023d2:	4620      	mov	r0, r4
 80023d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023d8:	f000 be76 	b.w	80030c8 <_fflush_r>
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	bf00      	nop
 80023e0:	200000b4 	.word	0x200000b4
 80023e4:	2000011c 	.word	0x2000011c
 80023e8:	20000184 	.word	0x20000184

080023ec <global_stdio_init.part.0>:
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <global_stdio_init.part.0+0x30>)
 80023f0:	4c0b      	ldr	r4, [pc, #44]	@ (8002420 <global_stdio_init.part.0+0x34>)
 80023f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <global_stdio_init.part.0+0x38>)
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	4620      	mov	r0, r4
 80023f8:	2200      	movs	r2, #0
 80023fa:	2104      	movs	r1, #4
 80023fc:	f7ff ff94 	bl	8002328 <std>
 8002400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002404:	2201      	movs	r2, #1
 8002406:	2109      	movs	r1, #9
 8002408:	f7ff ff8e 	bl	8002328 <std>
 800240c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002410:	2202      	movs	r2, #2
 8002412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002416:	2112      	movs	r1, #18
 8002418:	f7ff bf86 	b.w	8002328 <std>
 800241c:	200001ec 	.word	0x200001ec
 8002420:	200000b4 	.word	0x200000b4
 8002424:	08002395 	.word	0x08002395

08002428 <__sfp_lock_acquire>:
 8002428:	4801      	ldr	r0, [pc, #4]	@ (8002430 <__sfp_lock_acquire+0x8>)
 800242a:	f000 ba00 	b.w	800282e <__retarget_lock_acquire_recursive>
 800242e:	bf00      	nop
 8002430:	200001f5 	.word	0x200001f5

08002434 <__sfp_lock_release>:
 8002434:	4801      	ldr	r0, [pc, #4]	@ (800243c <__sfp_lock_release+0x8>)
 8002436:	f000 b9fb 	b.w	8002830 <__retarget_lock_release_recursive>
 800243a:	bf00      	nop
 800243c:	200001f5 	.word	0x200001f5

08002440 <__sinit>:
 8002440:	b510      	push	{r4, lr}
 8002442:	4604      	mov	r4, r0
 8002444:	f7ff fff0 	bl	8002428 <__sfp_lock_acquire>
 8002448:	6a23      	ldr	r3, [r4, #32]
 800244a:	b11b      	cbz	r3, 8002454 <__sinit+0x14>
 800244c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002450:	f7ff bff0 	b.w	8002434 <__sfp_lock_release>
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <__sinit+0x28>)
 8002456:	6223      	str	r3, [r4, #32]
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__sinit+0x2c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f5      	bne.n	800244c <__sinit+0xc>
 8002460:	f7ff ffc4 	bl	80023ec <global_stdio_init.part.0>
 8002464:	e7f2      	b.n	800244c <__sinit+0xc>
 8002466:	bf00      	nop
 8002468:	080023ad 	.word	0x080023ad
 800246c:	200001ec 	.word	0x200001ec

08002470 <_fwalk_sglue>:
 8002470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002474:	4607      	mov	r7, r0
 8002476:	4688      	mov	r8, r1
 8002478:	4614      	mov	r4, r2
 800247a:	2600      	movs	r6, #0
 800247c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002480:	f1b9 0901 	subs.w	r9, r9, #1
 8002484:	d505      	bpl.n	8002492 <_fwalk_sglue+0x22>
 8002486:	6824      	ldr	r4, [r4, #0]
 8002488:	2c00      	cmp	r4, #0
 800248a:	d1f7      	bne.n	800247c <_fwalk_sglue+0xc>
 800248c:	4630      	mov	r0, r6
 800248e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002492:	89ab      	ldrh	r3, [r5, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d907      	bls.n	80024a8 <_fwalk_sglue+0x38>
 8002498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800249c:	3301      	adds	r3, #1
 800249e:	d003      	beq.n	80024a8 <_fwalk_sglue+0x38>
 80024a0:	4629      	mov	r1, r5
 80024a2:	4638      	mov	r0, r7
 80024a4:	47c0      	blx	r8
 80024a6:	4306      	orrs	r6, r0
 80024a8:	3568      	adds	r5, #104	@ 0x68
 80024aa:	e7e9      	b.n	8002480 <_fwalk_sglue+0x10>

080024ac <iprintf>:
 80024ac:	b40f      	push	{r0, r1, r2, r3}
 80024ae:	b507      	push	{r0, r1, r2, lr}
 80024b0:	4906      	ldr	r1, [pc, #24]	@ (80024cc <iprintf+0x20>)
 80024b2:	ab04      	add	r3, sp, #16
 80024b4:	6808      	ldr	r0, [r1, #0]
 80024b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80024ba:	6881      	ldr	r1, [r0, #8]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	f000 fadb 	bl	8002a78 <_vfiprintf_r>
 80024c2:	b003      	add	sp, #12
 80024c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80024c8:	b004      	add	sp, #16
 80024ca:	4770      	bx	lr
 80024cc:	20000018 	.word	0x20000018

080024d0 <_puts_r>:
 80024d0:	6a03      	ldr	r3, [r0, #32]
 80024d2:	b570      	push	{r4, r5, r6, lr}
 80024d4:	6884      	ldr	r4, [r0, #8]
 80024d6:	4605      	mov	r5, r0
 80024d8:	460e      	mov	r6, r1
 80024da:	b90b      	cbnz	r3, 80024e0 <_puts_r+0x10>
 80024dc:	f7ff ffb0 	bl	8002440 <__sinit>
 80024e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024e2:	07db      	lsls	r3, r3, #31
 80024e4:	d405      	bmi.n	80024f2 <_puts_r+0x22>
 80024e6:	89a3      	ldrh	r3, [r4, #12]
 80024e8:	0598      	lsls	r0, r3, #22
 80024ea:	d402      	bmi.n	80024f2 <_puts_r+0x22>
 80024ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024ee:	f000 f99e 	bl	800282e <__retarget_lock_acquire_recursive>
 80024f2:	89a3      	ldrh	r3, [r4, #12]
 80024f4:	0719      	lsls	r1, r3, #28
 80024f6:	d502      	bpl.n	80024fe <_puts_r+0x2e>
 80024f8:	6923      	ldr	r3, [r4, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d135      	bne.n	800256a <_puts_r+0x9a>
 80024fe:	4621      	mov	r1, r4
 8002500:	4628      	mov	r0, r5
 8002502:	f000 f8c5 	bl	8002690 <__swsetup_r>
 8002506:	b380      	cbz	r0, 800256a <_puts_r+0x9a>
 8002508:	f04f 35ff 	mov.w	r5, #4294967295
 800250c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800250e:	07da      	lsls	r2, r3, #31
 8002510:	d405      	bmi.n	800251e <_puts_r+0x4e>
 8002512:	89a3      	ldrh	r3, [r4, #12]
 8002514:	059b      	lsls	r3, r3, #22
 8002516:	d402      	bmi.n	800251e <_puts_r+0x4e>
 8002518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800251a:	f000 f989 	bl	8002830 <__retarget_lock_release_recursive>
 800251e:	4628      	mov	r0, r5
 8002520:	bd70      	pop	{r4, r5, r6, pc}
 8002522:	2b00      	cmp	r3, #0
 8002524:	da04      	bge.n	8002530 <_puts_r+0x60>
 8002526:	69a2      	ldr	r2, [r4, #24]
 8002528:	429a      	cmp	r2, r3
 800252a:	dc17      	bgt.n	800255c <_puts_r+0x8c>
 800252c:	290a      	cmp	r1, #10
 800252e:	d015      	beq.n	800255c <_puts_r+0x8c>
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	6022      	str	r2, [r4, #0]
 8002536:	7019      	strb	r1, [r3, #0]
 8002538:	68a3      	ldr	r3, [r4, #8]
 800253a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800253e:	3b01      	subs	r3, #1
 8002540:	60a3      	str	r3, [r4, #8]
 8002542:	2900      	cmp	r1, #0
 8002544:	d1ed      	bne.n	8002522 <_puts_r+0x52>
 8002546:	2b00      	cmp	r3, #0
 8002548:	da11      	bge.n	800256e <_puts_r+0x9e>
 800254a:	4622      	mov	r2, r4
 800254c:	210a      	movs	r1, #10
 800254e:	4628      	mov	r0, r5
 8002550:	f000 f85f 	bl	8002612 <__swbuf_r>
 8002554:	3001      	adds	r0, #1
 8002556:	d0d7      	beq.n	8002508 <_puts_r+0x38>
 8002558:	250a      	movs	r5, #10
 800255a:	e7d7      	b.n	800250c <_puts_r+0x3c>
 800255c:	4622      	mov	r2, r4
 800255e:	4628      	mov	r0, r5
 8002560:	f000 f857 	bl	8002612 <__swbuf_r>
 8002564:	3001      	adds	r0, #1
 8002566:	d1e7      	bne.n	8002538 <_puts_r+0x68>
 8002568:	e7ce      	b.n	8002508 <_puts_r+0x38>
 800256a:	3e01      	subs	r6, #1
 800256c:	e7e4      	b.n	8002538 <_puts_r+0x68>
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	6022      	str	r2, [r4, #0]
 8002574:	220a      	movs	r2, #10
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e7ee      	b.n	8002558 <_puts_r+0x88>
	...

0800257c <puts>:
 800257c:	4b02      	ldr	r3, [pc, #8]	@ (8002588 <puts+0xc>)
 800257e:	4601      	mov	r1, r0
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	f7ff bfa5 	b.w	80024d0 <_puts_r>
 8002586:	bf00      	nop
 8002588:	20000018 	.word	0x20000018

0800258c <__sread>:
 800258c:	b510      	push	{r4, lr}
 800258e:	460c      	mov	r4, r1
 8002590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002594:	f000 f8fc 	bl	8002790 <_read_r>
 8002598:	2800      	cmp	r0, #0
 800259a:	bfab      	itete	ge
 800259c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800259e:	89a3      	ldrhlt	r3, [r4, #12]
 80025a0:	181b      	addge	r3, r3, r0
 80025a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80025a6:	bfac      	ite	ge
 80025a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80025aa:	81a3      	strhlt	r3, [r4, #12]
 80025ac:	bd10      	pop	{r4, pc}

080025ae <__swrite>:
 80025ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025b2:	461f      	mov	r7, r3
 80025b4:	898b      	ldrh	r3, [r1, #12]
 80025b6:	05db      	lsls	r3, r3, #23
 80025b8:	4605      	mov	r5, r0
 80025ba:	460c      	mov	r4, r1
 80025bc:	4616      	mov	r6, r2
 80025be:	d505      	bpl.n	80025cc <__swrite+0x1e>
 80025c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c4:	2302      	movs	r3, #2
 80025c6:	2200      	movs	r2, #0
 80025c8:	f000 f8d0 	bl	800276c <_lseek_r>
 80025cc:	89a3      	ldrh	r3, [r4, #12]
 80025ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025d6:	81a3      	strh	r3, [r4, #12]
 80025d8:	4632      	mov	r2, r6
 80025da:	463b      	mov	r3, r7
 80025dc:	4628      	mov	r0, r5
 80025de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025e2:	f000 b8e7 	b.w	80027b4 <_write_r>

080025e6 <__sseek>:
 80025e6:	b510      	push	{r4, lr}
 80025e8:	460c      	mov	r4, r1
 80025ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ee:	f000 f8bd 	bl	800276c <_lseek_r>
 80025f2:	1c43      	adds	r3, r0, #1
 80025f4:	89a3      	ldrh	r3, [r4, #12]
 80025f6:	bf15      	itete	ne
 80025f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80025fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80025fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002602:	81a3      	strheq	r3, [r4, #12]
 8002604:	bf18      	it	ne
 8002606:	81a3      	strhne	r3, [r4, #12]
 8002608:	bd10      	pop	{r4, pc}

0800260a <__sclose>:
 800260a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260e:	f000 b89d 	b.w	800274c <_close_r>

08002612 <__swbuf_r>:
 8002612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002614:	460e      	mov	r6, r1
 8002616:	4614      	mov	r4, r2
 8002618:	4605      	mov	r5, r0
 800261a:	b118      	cbz	r0, 8002624 <__swbuf_r+0x12>
 800261c:	6a03      	ldr	r3, [r0, #32]
 800261e:	b90b      	cbnz	r3, 8002624 <__swbuf_r+0x12>
 8002620:	f7ff ff0e 	bl	8002440 <__sinit>
 8002624:	69a3      	ldr	r3, [r4, #24]
 8002626:	60a3      	str	r3, [r4, #8]
 8002628:	89a3      	ldrh	r3, [r4, #12]
 800262a:	071a      	lsls	r2, r3, #28
 800262c:	d501      	bpl.n	8002632 <__swbuf_r+0x20>
 800262e:	6923      	ldr	r3, [r4, #16]
 8002630:	b943      	cbnz	r3, 8002644 <__swbuf_r+0x32>
 8002632:	4621      	mov	r1, r4
 8002634:	4628      	mov	r0, r5
 8002636:	f000 f82b 	bl	8002690 <__swsetup_r>
 800263a:	b118      	cbz	r0, 8002644 <__swbuf_r+0x32>
 800263c:	f04f 37ff 	mov.w	r7, #4294967295
 8002640:	4638      	mov	r0, r7
 8002642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	6922      	ldr	r2, [r4, #16]
 8002648:	1a98      	subs	r0, r3, r2
 800264a:	6963      	ldr	r3, [r4, #20]
 800264c:	b2f6      	uxtb	r6, r6
 800264e:	4283      	cmp	r3, r0
 8002650:	4637      	mov	r7, r6
 8002652:	dc05      	bgt.n	8002660 <__swbuf_r+0x4e>
 8002654:	4621      	mov	r1, r4
 8002656:	4628      	mov	r0, r5
 8002658:	f000 fd36 	bl	80030c8 <_fflush_r>
 800265c:	2800      	cmp	r0, #0
 800265e:	d1ed      	bne.n	800263c <__swbuf_r+0x2a>
 8002660:	68a3      	ldr	r3, [r4, #8]
 8002662:	3b01      	subs	r3, #1
 8002664:	60a3      	str	r3, [r4, #8]
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	6022      	str	r2, [r4, #0]
 800266c:	701e      	strb	r6, [r3, #0]
 800266e:	6962      	ldr	r2, [r4, #20]
 8002670:	1c43      	adds	r3, r0, #1
 8002672:	429a      	cmp	r2, r3
 8002674:	d004      	beq.n	8002680 <__swbuf_r+0x6e>
 8002676:	89a3      	ldrh	r3, [r4, #12]
 8002678:	07db      	lsls	r3, r3, #31
 800267a:	d5e1      	bpl.n	8002640 <__swbuf_r+0x2e>
 800267c:	2e0a      	cmp	r6, #10
 800267e:	d1df      	bne.n	8002640 <__swbuf_r+0x2e>
 8002680:	4621      	mov	r1, r4
 8002682:	4628      	mov	r0, r5
 8002684:	f000 fd20 	bl	80030c8 <_fflush_r>
 8002688:	2800      	cmp	r0, #0
 800268a:	d0d9      	beq.n	8002640 <__swbuf_r+0x2e>
 800268c:	e7d6      	b.n	800263c <__swbuf_r+0x2a>
	...

08002690 <__swsetup_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4b29      	ldr	r3, [pc, #164]	@ (8002738 <__swsetup_r+0xa8>)
 8002694:	4605      	mov	r5, r0
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	460c      	mov	r4, r1
 800269a:	b118      	cbz	r0, 80026a4 <__swsetup_r+0x14>
 800269c:	6a03      	ldr	r3, [r0, #32]
 800269e:	b90b      	cbnz	r3, 80026a4 <__swsetup_r+0x14>
 80026a0:	f7ff fece 	bl	8002440 <__sinit>
 80026a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026a8:	0719      	lsls	r1, r3, #28
 80026aa:	d422      	bmi.n	80026f2 <__swsetup_r+0x62>
 80026ac:	06da      	lsls	r2, r3, #27
 80026ae:	d407      	bmi.n	80026c0 <__swsetup_r+0x30>
 80026b0:	2209      	movs	r2, #9
 80026b2:	602a      	str	r2, [r5, #0]
 80026b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026b8:	81a3      	strh	r3, [r4, #12]
 80026ba:	f04f 30ff 	mov.w	r0, #4294967295
 80026be:	e033      	b.n	8002728 <__swsetup_r+0x98>
 80026c0:	0758      	lsls	r0, r3, #29
 80026c2:	d512      	bpl.n	80026ea <__swsetup_r+0x5a>
 80026c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026c6:	b141      	cbz	r1, 80026da <__swsetup_r+0x4a>
 80026c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026cc:	4299      	cmp	r1, r3
 80026ce:	d002      	beq.n	80026d6 <__swsetup_r+0x46>
 80026d0:	4628      	mov	r0, r5
 80026d2:	f000 f8af 	bl	8002834 <_free_r>
 80026d6:	2300      	movs	r3, #0
 80026d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80026da:	89a3      	ldrh	r3, [r4, #12]
 80026dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80026e0:	81a3      	strh	r3, [r4, #12]
 80026e2:	2300      	movs	r3, #0
 80026e4:	6063      	str	r3, [r4, #4]
 80026e6:	6923      	ldr	r3, [r4, #16]
 80026e8:	6023      	str	r3, [r4, #0]
 80026ea:	89a3      	ldrh	r3, [r4, #12]
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	81a3      	strh	r3, [r4, #12]
 80026f2:	6923      	ldr	r3, [r4, #16]
 80026f4:	b94b      	cbnz	r3, 800270a <__swsetup_r+0x7a>
 80026f6:	89a3      	ldrh	r3, [r4, #12]
 80026f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80026fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002700:	d003      	beq.n	800270a <__swsetup_r+0x7a>
 8002702:	4621      	mov	r1, r4
 8002704:	4628      	mov	r0, r5
 8002706:	f000 fd2d 	bl	8003164 <__smakebuf_r>
 800270a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800270e:	f013 0201 	ands.w	r2, r3, #1
 8002712:	d00a      	beq.n	800272a <__swsetup_r+0x9a>
 8002714:	2200      	movs	r2, #0
 8002716:	60a2      	str	r2, [r4, #8]
 8002718:	6962      	ldr	r2, [r4, #20]
 800271a:	4252      	negs	r2, r2
 800271c:	61a2      	str	r2, [r4, #24]
 800271e:	6922      	ldr	r2, [r4, #16]
 8002720:	b942      	cbnz	r2, 8002734 <__swsetup_r+0xa4>
 8002722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002726:	d1c5      	bne.n	80026b4 <__swsetup_r+0x24>
 8002728:	bd38      	pop	{r3, r4, r5, pc}
 800272a:	0799      	lsls	r1, r3, #30
 800272c:	bf58      	it	pl
 800272e:	6962      	ldrpl	r2, [r4, #20]
 8002730:	60a2      	str	r2, [r4, #8]
 8002732:	e7f4      	b.n	800271e <__swsetup_r+0x8e>
 8002734:	2000      	movs	r0, #0
 8002736:	e7f7      	b.n	8002728 <__swsetup_r+0x98>
 8002738:	20000018 	.word	0x20000018

0800273c <memset>:
 800273c:	4402      	add	r2, r0
 800273e:	4603      	mov	r3, r0
 8002740:	4293      	cmp	r3, r2
 8002742:	d100      	bne.n	8002746 <memset+0xa>
 8002744:	4770      	bx	lr
 8002746:	f803 1b01 	strb.w	r1, [r3], #1
 800274a:	e7f9      	b.n	8002740 <memset+0x4>

0800274c <_close_r>:
 800274c:	b538      	push	{r3, r4, r5, lr}
 800274e:	4d06      	ldr	r5, [pc, #24]	@ (8002768 <_close_r+0x1c>)
 8002750:	2300      	movs	r3, #0
 8002752:	4604      	mov	r4, r0
 8002754:	4608      	mov	r0, r1
 8002756:	602b      	str	r3, [r5, #0]
 8002758:	f7fe f98b 	bl	8000a72 <_close>
 800275c:	1c43      	adds	r3, r0, #1
 800275e:	d102      	bne.n	8002766 <_close_r+0x1a>
 8002760:	682b      	ldr	r3, [r5, #0]
 8002762:	b103      	cbz	r3, 8002766 <_close_r+0x1a>
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	bd38      	pop	{r3, r4, r5, pc}
 8002768:	200001f0 	.word	0x200001f0

0800276c <_lseek_r>:
 800276c:	b538      	push	{r3, r4, r5, lr}
 800276e:	4d07      	ldr	r5, [pc, #28]	@ (800278c <_lseek_r+0x20>)
 8002770:	4604      	mov	r4, r0
 8002772:	4608      	mov	r0, r1
 8002774:	4611      	mov	r1, r2
 8002776:	2200      	movs	r2, #0
 8002778:	602a      	str	r2, [r5, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	f7fe f9a0 	bl	8000ac0 <_lseek>
 8002780:	1c43      	adds	r3, r0, #1
 8002782:	d102      	bne.n	800278a <_lseek_r+0x1e>
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	b103      	cbz	r3, 800278a <_lseek_r+0x1e>
 8002788:	6023      	str	r3, [r4, #0]
 800278a:	bd38      	pop	{r3, r4, r5, pc}
 800278c:	200001f0 	.word	0x200001f0

08002790 <_read_r>:
 8002790:	b538      	push	{r3, r4, r5, lr}
 8002792:	4d07      	ldr	r5, [pc, #28]	@ (80027b0 <_read_r+0x20>)
 8002794:	4604      	mov	r4, r0
 8002796:	4608      	mov	r0, r1
 8002798:	4611      	mov	r1, r2
 800279a:	2200      	movs	r2, #0
 800279c:	602a      	str	r2, [r5, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	f7fe f92e 	bl	8000a00 <_read>
 80027a4:	1c43      	adds	r3, r0, #1
 80027a6:	d102      	bne.n	80027ae <_read_r+0x1e>
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	b103      	cbz	r3, 80027ae <_read_r+0x1e>
 80027ac:	6023      	str	r3, [r4, #0]
 80027ae:	bd38      	pop	{r3, r4, r5, pc}
 80027b0:	200001f0 	.word	0x200001f0

080027b4 <_write_r>:
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	4d07      	ldr	r5, [pc, #28]	@ (80027d4 <_write_r+0x20>)
 80027b8:	4604      	mov	r4, r0
 80027ba:	4608      	mov	r0, r1
 80027bc:	4611      	mov	r1, r2
 80027be:	2200      	movs	r2, #0
 80027c0:	602a      	str	r2, [r5, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f7fe f939 	bl	8000a3a <_write>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	d102      	bne.n	80027d2 <_write_r+0x1e>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	b103      	cbz	r3, 80027d2 <_write_r+0x1e>
 80027d0:	6023      	str	r3, [r4, #0]
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	200001f0 	.word	0x200001f0

080027d8 <__errno>:
 80027d8:	4b01      	ldr	r3, [pc, #4]	@ (80027e0 <__errno+0x8>)
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000018 	.word	0x20000018

080027e4 <__libc_init_array>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	4d0d      	ldr	r5, [pc, #52]	@ (800281c <__libc_init_array+0x38>)
 80027e8:	4c0d      	ldr	r4, [pc, #52]	@ (8002820 <__libc_init_array+0x3c>)
 80027ea:	1b64      	subs	r4, r4, r5
 80027ec:	10a4      	asrs	r4, r4, #2
 80027ee:	2600      	movs	r6, #0
 80027f0:	42a6      	cmp	r6, r4
 80027f2:	d109      	bne.n	8002808 <__libc_init_array+0x24>
 80027f4:	4d0b      	ldr	r5, [pc, #44]	@ (8002824 <__libc_init_array+0x40>)
 80027f6:	4c0c      	ldr	r4, [pc, #48]	@ (8002828 <__libc_init_array+0x44>)
 80027f8:	f000 fd22 	bl	8003240 <_init>
 80027fc:	1b64      	subs	r4, r4, r5
 80027fe:	10a4      	asrs	r4, r4, #2
 8002800:	2600      	movs	r6, #0
 8002802:	42a6      	cmp	r6, r4
 8002804:	d105      	bne.n	8002812 <__libc_init_array+0x2e>
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	f855 3b04 	ldr.w	r3, [r5], #4
 800280c:	4798      	blx	r3
 800280e:	3601      	adds	r6, #1
 8002810:	e7ee      	b.n	80027f0 <__libc_init_array+0xc>
 8002812:	f855 3b04 	ldr.w	r3, [r5], #4
 8002816:	4798      	blx	r3
 8002818:	3601      	adds	r6, #1
 800281a:	e7f2      	b.n	8002802 <__libc_init_array+0x1e>
 800281c:	080032dc 	.word	0x080032dc
 8002820:	080032dc 	.word	0x080032dc
 8002824:	080032dc 	.word	0x080032dc
 8002828:	080032e0 	.word	0x080032e0

0800282c <__retarget_lock_init_recursive>:
 800282c:	4770      	bx	lr

0800282e <__retarget_lock_acquire_recursive>:
 800282e:	4770      	bx	lr

08002830 <__retarget_lock_release_recursive>:
 8002830:	4770      	bx	lr
	...

08002834 <_free_r>:
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	4605      	mov	r5, r0
 8002838:	2900      	cmp	r1, #0
 800283a:	d041      	beq.n	80028c0 <_free_r+0x8c>
 800283c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002840:	1f0c      	subs	r4, r1, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	bfb8      	it	lt
 8002846:	18e4      	addlt	r4, r4, r3
 8002848:	f000 f8e0 	bl	8002a0c <__malloc_lock>
 800284c:	4a1d      	ldr	r2, [pc, #116]	@ (80028c4 <_free_r+0x90>)
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	b933      	cbnz	r3, 8002860 <_free_r+0x2c>
 8002852:	6063      	str	r3, [r4, #4]
 8002854:	6014      	str	r4, [r2, #0]
 8002856:	4628      	mov	r0, r5
 8002858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800285c:	f000 b8dc 	b.w	8002a18 <__malloc_unlock>
 8002860:	42a3      	cmp	r3, r4
 8002862:	d908      	bls.n	8002876 <_free_r+0x42>
 8002864:	6820      	ldr	r0, [r4, #0]
 8002866:	1821      	adds	r1, r4, r0
 8002868:	428b      	cmp	r3, r1
 800286a:	bf01      	itttt	eq
 800286c:	6819      	ldreq	r1, [r3, #0]
 800286e:	685b      	ldreq	r3, [r3, #4]
 8002870:	1809      	addeq	r1, r1, r0
 8002872:	6021      	streq	r1, [r4, #0]
 8002874:	e7ed      	b.n	8002852 <_free_r+0x1e>
 8002876:	461a      	mov	r2, r3
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	b10b      	cbz	r3, 8002880 <_free_r+0x4c>
 800287c:	42a3      	cmp	r3, r4
 800287e:	d9fa      	bls.n	8002876 <_free_r+0x42>
 8002880:	6811      	ldr	r1, [r2, #0]
 8002882:	1850      	adds	r0, r2, r1
 8002884:	42a0      	cmp	r0, r4
 8002886:	d10b      	bne.n	80028a0 <_free_r+0x6c>
 8002888:	6820      	ldr	r0, [r4, #0]
 800288a:	4401      	add	r1, r0
 800288c:	1850      	adds	r0, r2, r1
 800288e:	4283      	cmp	r3, r0
 8002890:	6011      	str	r1, [r2, #0]
 8002892:	d1e0      	bne.n	8002856 <_free_r+0x22>
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	6053      	str	r3, [r2, #4]
 800289a:	4408      	add	r0, r1
 800289c:	6010      	str	r0, [r2, #0]
 800289e:	e7da      	b.n	8002856 <_free_r+0x22>
 80028a0:	d902      	bls.n	80028a8 <_free_r+0x74>
 80028a2:	230c      	movs	r3, #12
 80028a4:	602b      	str	r3, [r5, #0]
 80028a6:	e7d6      	b.n	8002856 <_free_r+0x22>
 80028a8:	6820      	ldr	r0, [r4, #0]
 80028aa:	1821      	adds	r1, r4, r0
 80028ac:	428b      	cmp	r3, r1
 80028ae:	bf04      	itt	eq
 80028b0:	6819      	ldreq	r1, [r3, #0]
 80028b2:	685b      	ldreq	r3, [r3, #4]
 80028b4:	6063      	str	r3, [r4, #4]
 80028b6:	bf04      	itt	eq
 80028b8:	1809      	addeq	r1, r1, r0
 80028ba:	6021      	streq	r1, [r4, #0]
 80028bc:	6054      	str	r4, [r2, #4]
 80028be:	e7ca      	b.n	8002856 <_free_r+0x22>
 80028c0:	bd38      	pop	{r3, r4, r5, pc}
 80028c2:	bf00      	nop
 80028c4:	200001fc 	.word	0x200001fc

080028c8 <sbrk_aligned>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	4e0f      	ldr	r6, [pc, #60]	@ (8002908 <sbrk_aligned+0x40>)
 80028cc:	460c      	mov	r4, r1
 80028ce:	6831      	ldr	r1, [r6, #0]
 80028d0:	4605      	mov	r5, r0
 80028d2:	b911      	cbnz	r1, 80028da <sbrk_aligned+0x12>
 80028d4:	f000 fca4 	bl	8003220 <_sbrk_r>
 80028d8:	6030      	str	r0, [r6, #0]
 80028da:	4621      	mov	r1, r4
 80028dc:	4628      	mov	r0, r5
 80028de:	f000 fc9f 	bl	8003220 <_sbrk_r>
 80028e2:	1c43      	adds	r3, r0, #1
 80028e4:	d103      	bne.n	80028ee <sbrk_aligned+0x26>
 80028e6:	f04f 34ff 	mov.w	r4, #4294967295
 80028ea:	4620      	mov	r0, r4
 80028ec:	bd70      	pop	{r4, r5, r6, pc}
 80028ee:	1cc4      	adds	r4, r0, #3
 80028f0:	f024 0403 	bic.w	r4, r4, #3
 80028f4:	42a0      	cmp	r0, r4
 80028f6:	d0f8      	beq.n	80028ea <sbrk_aligned+0x22>
 80028f8:	1a21      	subs	r1, r4, r0
 80028fa:	4628      	mov	r0, r5
 80028fc:	f000 fc90 	bl	8003220 <_sbrk_r>
 8002900:	3001      	adds	r0, #1
 8002902:	d1f2      	bne.n	80028ea <sbrk_aligned+0x22>
 8002904:	e7ef      	b.n	80028e6 <sbrk_aligned+0x1e>
 8002906:	bf00      	nop
 8002908:	200001f8 	.word	0x200001f8

0800290c <_malloc_r>:
 800290c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002910:	1ccd      	adds	r5, r1, #3
 8002912:	f025 0503 	bic.w	r5, r5, #3
 8002916:	3508      	adds	r5, #8
 8002918:	2d0c      	cmp	r5, #12
 800291a:	bf38      	it	cc
 800291c:	250c      	movcc	r5, #12
 800291e:	2d00      	cmp	r5, #0
 8002920:	4606      	mov	r6, r0
 8002922:	db01      	blt.n	8002928 <_malloc_r+0x1c>
 8002924:	42a9      	cmp	r1, r5
 8002926:	d904      	bls.n	8002932 <_malloc_r+0x26>
 8002928:	230c      	movs	r3, #12
 800292a:	6033      	str	r3, [r6, #0]
 800292c:	2000      	movs	r0, #0
 800292e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a08 <_malloc_r+0xfc>
 8002936:	f000 f869 	bl	8002a0c <__malloc_lock>
 800293a:	f8d8 3000 	ldr.w	r3, [r8]
 800293e:	461c      	mov	r4, r3
 8002940:	bb44      	cbnz	r4, 8002994 <_malloc_r+0x88>
 8002942:	4629      	mov	r1, r5
 8002944:	4630      	mov	r0, r6
 8002946:	f7ff ffbf 	bl	80028c8 <sbrk_aligned>
 800294a:	1c43      	adds	r3, r0, #1
 800294c:	4604      	mov	r4, r0
 800294e:	d158      	bne.n	8002a02 <_malloc_r+0xf6>
 8002950:	f8d8 4000 	ldr.w	r4, [r8]
 8002954:	4627      	mov	r7, r4
 8002956:	2f00      	cmp	r7, #0
 8002958:	d143      	bne.n	80029e2 <_malloc_r+0xd6>
 800295a:	2c00      	cmp	r4, #0
 800295c:	d04b      	beq.n	80029f6 <_malloc_r+0xea>
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	4639      	mov	r1, r7
 8002962:	4630      	mov	r0, r6
 8002964:	eb04 0903 	add.w	r9, r4, r3
 8002968:	f000 fc5a 	bl	8003220 <_sbrk_r>
 800296c:	4581      	cmp	r9, r0
 800296e:	d142      	bne.n	80029f6 <_malloc_r+0xea>
 8002970:	6821      	ldr	r1, [r4, #0]
 8002972:	1a6d      	subs	r5, r5, r1
 8002974:	4629      	mov	r1, r5
 8002976:	4630      	mov	r0, r6
 8002978:	f7ff ffa6 	bl	80028c8 <sbrk_aligned>
 800297c:	3001      	adds	r0, #1
 800297e:	d03a      	beq.n	80029f6 <_malloc_r+0xea>
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	442b      	add	r3, r5
 8002984:	6023      	str	r3, [r4, #0]
 8002986:	f8d8 3000 	ldr.w	r3, [r8]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	bb62      	cbnz	r2, 80029e8 <_malloc_r+0xdc>
 800298e:	f8c8 7000 	str.w	r7, [r8]
 8002992:	e00f      	b.n	80029b4 <_malloc_r+0xa8>
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	1b52      	subs	r2, r2, r5
 8002998:	d420      	bmi.n	80029dc <_malloc_r+0xd0>
 800299a:	2a0b      	cmp	r2, #11
 800299c:	d917      	bls.n	80029ce <_malloc_r+0xc2>
 800299e:	1961      	adds	r1, r4, r5
 80029a0:	42a3      	cmp	r3, r4
 80029a2:	6025      	str	r5, [r4, #0]
 80029a4:	bf18      	it	ne
 80029a6:	6059      	strne	r1, [r3, #4]
 80029a8:	6863      	ldr	r3, [r4, #4]
 80029aa:	bf08      	it	eq
 80029ac:	f8c8 1000 	streq.w	r1, [r8]
 80029b0:	5162      	str	r2, [r4, r5]
 80029b2:	604b      	str	r3, [r1, #4]
 80029b4:	4630      	mov	r0, r6
 80029b6:	f000 f82f 	bl	8002a18 <__malloc_unlock>
 80029ba:	f104 000b 	add.w	r0, r4, #11
 80029be:	1d23      	adds	r3, r4, #4
 80029c0:	f020 0007 	bic.w	r0, r0, #7
 80029c4:	1ac2      	subs	r2, r0, r3
 80029c6:	bf1c      	itt	ne
 80029c8:	1a1b      	subne	r3, r3, r0
 80029ca:	50a3      	strne	r3, [r4, r2]
 80029cc:	e7af      	b.n	800292e <_malloc_r+0x22>
 80029ce:	6862      	ldr	r2, [r4, #4]
 80029d0:	42a3      	cmp	r3, r4
 80029d2:	bf0c      	ite	eq
 80029d4:	f8c8 2000 	streq.w	r2, [r8]
 80029d8:	605a      	strne	r2, [r3, #4]
 80029da:	e7eb      	b.n	80029b4 <_malloc_r+0xa8>
 80029dc:	4623      	mov	r3, r4
 80029de:	6864      	ldr	r4, [r4, #4]
 80029e0:	e7ae      	b.n	8002940 <_malloc_r+0x34>
 80029e2:	463c      	mov	r4, r7
 80029e4:	687f      	ldr	r7, [r7, #4]
 80029e6:	e7b6      	b.n	8002956 <_malloc_r+0x4a>
 80029e8:	461a      	mov	r2, r3
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	42a3      	cmp	r3, r4
 80029ee:	d1fb      	bne.n	80029e8 <_malloc_r+0xdc>
 80029f0:	2300      	movs	r3, #0
 80029f2:	6053      	str	r3, [r2, #4]
 80029f4:	e7de      	b.n	80029b4 <_malloc_r+0xa8>
 80029f6:	230c      	movs	r3, #12
 80029f8:	6033      	str	r3, [r6, #0]
 80029fa:	4630      	mov	r0, r6
 80029fc:	f000 f80c 	bl	8002a18 <__malloc_unlock>
 8002a00:	e794      	b.n	800292c <_malloc_r+0x20>
 8002a02:	6005      	str	r5, [r0, #0]
 8002a04:	e7d6      	b.n	80029b4 <_malloc_r+0xa8>
 8002a06:	bf00      	nop
 8002a08:	200001fc 	.word	0x200001fc

08002a0c <__malloc_lock>:
 8002a0c:	4801      	ldr	r0, [pc, #4]	@ (8002a14 <__malloc_lock+0x8>)
 8002a0e:	f7ff bf0e 	b.w	800282e <__retarget_lock_acquire_recursive>
 8002a12:	bf00      	nop
 8002a14:	200001f4 	.word	0x200001f4

08002a18 <__malloc_unlock>:
 8002a18:	4801      	ldr	r0, [pc, #4]	@ (8002a20 <__malloc_unlock+0x8>)
 8002a1a:	f7ff bf09 	b.w	8002830 <__retarget_lock_release_recursive>
 8002a1e:	bf00      	nop
 8002a20:	200001f4 	.word	0x200001f4

08002a24 <__sfputc_r>:
 8002a24:	6893      	ldr	r3, [r2, #8]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	b410      	push	{r4}
 8002a2c:	6093      	str	r3, [r2, #8]
 8002a2e:	da08      	bge.n	8002a42 <__sfputc_r+0x1e>
 8002a30:	6994      	ldr	r4, [r2, #24]
 8002a32:	42a3      	cmp	r3, r4
 8002a34:	db01      	blt.n	8002a3a <__sfputc_r+0x16>
 8002a36:	290a      	cmp	r1, #10
 8002a38:	d103      	bne.n	8002a42 <__sfputc_r+0x1e>
 8002a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a3e:	f7ff bde8 	b.w	8002612 <__swbuf_r>
 8002a42:	6813      	ldr	r3, [r2, #0]
 8002a44:	1c58      	adds	r0, r3, #1
 8002a46:	6010      	str	r0, [r2, #0]
 8002a48:	7019      	strb	r1, [r3, #0]
 8002a4a:	4608      	mov	r0, r1
 8002a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <__sfputs_r>:
 8002a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a54:	4606      	mov	r6, r0
 8002a56:	460f      	mov	r7, r1
 8002a58:	4614      	mov	r4, r2
 8002a5a:	18d5      	adds	r5, r2, r3
 8002a5c:	42ac      	cmp	r4, r5
 8002a5e:	d101      	bne.n	8002a64 <__sfputs_r+0x12>
 8002a60:	2000      	movs	r0, #0
 8002a62:	e007      	b.n	8002a74 <__sfputs_r+0x22>
 8002a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a68:	463a      	mov	r2, r7
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	f7ff ffda 	bl	8002a24 <__sfputc_r>
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d1f3      	bne.n	8002a5c <__sfputs_r+0xa>
 8002a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a78 <_vfiprintf_r>:
 8002a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a7c:	460d      	mov	r5, r1
 8002a7e:	b09d      	sub	sp, #116	@ 0x74
 8002a80:	4614      	mov	r4, r2
 8002a82:	4698      	mov	r8, r3
 8002a84:	4606      	mov	r6, r0
 8002a86:	b118      	cbz	r0, 8002a90 <_vfiprintf_r+0x18>
 8002a88:	6a03      	ldr	r3, [r0, #32]
 8002a8a:	b90b      	cbnz	r3, 8002a90 <_vfiprintf_r+0x18>
 8002a8c:	f7ff fcd8 	bl	8002440 <__sinit>
 8002a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a92:	07d9      	lsls	r1, r3, #31
 8002a94:	d405      	bmi.n	8002aa2 <_vfiprintf_r+0x2a>
 8002a96:	89ab      	ldrh	r3, [r5, #12]
 8002a98:	059a      	lsls	r2, r3, #22
 8002a9a:	d402      	bmi.n	8002aa2 <_vfiprintf_r+0x2a>
 8002a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a9e:	f7ff fec6 	bl	800282e <__retarget_lock_acquire_recursive>
 8002aa2:	89ab      	ldrh	r3, [r5, #12]
 8002aa4:	071b      	lsls	r3, r3, #28
 8002aa6:	d501      	bpl.n	8002aac <_vfiprintf_r+0x34>
 8002aa8:	692b      	ldr	r3, [r5, #16]
 8002aaa:	b99b      	cbnz	r3, 8002ad4 <_vfiprintf_r+0x5c>
 8002aac:	4629      	mov	r1, r5
 8002aae:	4630      	mov	r0, r6
 8002ab0:	f7ff fdee 	bl	8002690 <__swsetup_r>
 8002ab4:	b170      	cbz	r0, 8002ad4 <_vfiprintf_r+0x5c>
 8002ab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ab8:	07dc      	lsls	r4, r3, #31
 8002aba:	d504      	bpl.n	8002ac6 <_vfiprintf_r+0x4e>
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	b01d      	add	sp, #116	@ 0x74
 8002ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac6:	89ab      	ldrh	r3, [r5, #12]
 8002ac8:	0598      	lsls	r0, r3, #22
 8002aca:	d4f7      	bmi.n	8002abc <_vfiprintf_r+0x44>
 8002acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ace:	f7ff feaf 	bl	8002830 <__retarget_lock_release_recursive>
 8002ad2:	e7f3      	b.n	8002abc <_vfiprintf_r+0x44>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ad8:	2320      	movs	r3, #32
 8002ada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ae2:	2330      	movs	r3, #48	@ 0x30
 8002ae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002c94 <_vfiprintf_r+0x21c>
 8002ae8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002aec:	f04f 0901 	mov.w	r9, #1
 8002af0:	4623      	mov	r3, r4
 8002af2:	469a      	mov	sl, r3
 8002af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002af8:	b10a      	cbz	r2, 8002afe <_vfiprintf_r+0x86>
 8002afa:	2a25      	cmp	r2, #37	@ 0x25
 8002afc:	d1f9      	bne.n	8002af2 <_vfiprintf_r+0x7a>
 8002afe:	ebba 0b04 	subs.w	fp, sl, r4
 8002b02:	d00b      	beq.n	8002b1c <_vfiprintf_r+0xa4>
 8002b04:	465b      	mov	r3, fp
 8002b06:	4622      	mov	r2, r4
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	f7ff ffa1 	bl	8002a52 <__sfputs_r>
 8002b10:	3001      	adds	r0, #1
 8002b12:	f000 80a7 	beq.w	8002c64 <_vfiprintf_r+0x1ec>
 8002b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b18:	445a      	add	r2, fp
 8002b1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 809f 	beq.w	8002c64 <_vfiprintf_r+0x1ec>
 8002b26:	2300      	movs	r3, #0
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b30:	f10a 0a01 	add.w	sl, sl, #1
 8002b34:	9304      	str	r3, [sp, #16]
 8002b36:	9307      	str	r3, [sp, #28]
 8002b38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b3e:	4654      	mov	r4, sl
 8002b40:	2205      	movs	r2, #5
 8002b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b46:	4853      	ldr	r0, [pc, #332]	@ (8002c94 <_vfiprintf_r+0x21c>)
 8002b48:	f7fd fb42 	bl	80001d0 <memchr>
 8002b4c:	9a04      	ldr	r2, [sp, #16]
 8002b4e:	b9d8      	cbnz	r0, 8002b88 <_vfiprintf_r+0x110>
 8002b50:	06d1      	lsls	r1, r2, #27
 8002b52:	bf44      	itt	mi
 8002b54:	2320      	movmi	r3, #32
 8002b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b5a:	0713      	lsls	r3, r2, #28
 8002b5c:	bf44      	itt	mi
 8002b5e:	232b      	movmi	r3, #43	@ 0x2b
 8002b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b64:	f89a 3000 	ldrb.w	r3, [sl]
 8002b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b6a:	d015      	beq.n	8002b98 <_vfiprintf_r+0x120>
 8002b6c:	9a07      	ldr	r2, [sp, #28]
 8002b6e:	4654      	mov	r4, sl
 8002b70:	2000      	movs	r0, #0
 8002b72:	f04f 0c0a 	mov.w	ip, #10
 8002b76:	4621      	mov	r1, r4
 8002b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b7c:	3b30      	subs	r3, #48	@ 0x30
 8002b7e:	2b09      	cmp	r3, #9
 8002b80:	d94b      	bls.n	8002c1a <_vfiprintf_r+0x1a2>
 8002b82:	b1b0      	cbz	r0, 8002bb2 <_vfiprintf_r+0x13a>
 8002b84:	9207      	str	r2, [sp, #28]
 8002b86:	e014      	b.n	8002bb2 <_vfiprintf_r+0x13a>
 8002b88:	eba0 0308 	sub.w	r3, r0, r8
 8002b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	9304      	str	r3, [sp, #16]
 8002b94:	46a2      	mov	sl, r4
 8002b96:	e7d2      	b.n	8002b3e <_vfiprintf_r+0xc6>
 8002b98:	9b03      	ldr	r3, [sp, #12]
 8002b9a:	1d19      	adds	r1, r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	9103      	str	r1, [sp, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bfbb      	ittet	lt
 8002ba4:	425b      	neglt	r3, r3
 8002ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8002baa:	9307      	strge	r3, [sp, #28]
 8002bac:	9307      	strlt	r3, [sp, #28]
 8002bae:	bfb8      	it	lt
 8002bb0:	9204      	strlt	r2, [sp, #16]
 8002bb2:	7823      	ldrb	r3, [r4, #0]
 8002bb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002bb6:	d10a      	bne.n	8002bce <_vfiprintf_r+0x156>
 8002bb8:	7863      	ldrb	r3, [r4, #1]
 8002bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bbc:	d132      	bne.n	8002c24 <_vfiprintf_r+0x1ac>
 8002bbe:	9b03      	ldr	r3, [sp, #12]
 8002bc0:	1d1a      	adds	r2, r3, #4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	9203      	str	r2, [sp, #12]
 8002bc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002bca:	3402      	adds	r4, #2
 8002bcc:	9305      	str	r3, [sp, #20]
 8002bce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002ca4 <_vfiprintf_r+0x22c>
 8002bd2:	7821      	ldrb	r1, [r4, #0]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	4650      	mov	r0, sl
 8002bd8:	f7fd fafa 	bl	80001d0 <memchr>
 8002bdc:	b138      	cbz	r0, 8002bee <_vfiprintf_r+0x176>
 8002bde:	9b04      	ldr	r3, [sp, #16]
 8002be0:	eba0 000a 	sub.w	r0, r0, sl
 8002be4:	2240      	movs	r2, #64	@ 0x40
 8002be6:	4082      	lsls	r2, r0
 8002be8:	4313      	orrs	r3, r2
 8002bea:	3401      	adds	r4, #1
 8002bec:	9304      	str	r3, [sp, #16]
 8002bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bf2:	4829      	ldr	r0, [pc, #164]	@ (8002c98 <_vfiprintf_r+0x220>)
 8002bf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002bf8:	2206      	movs	r2, #6
 8002bfa:	f7fd fae9 	bl	80001d0 <memchr>
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d03f      	beq.n	8002c82 <_vfiprintf_r+0x20a>
 8002c02:	4b26      	ldr	r3, [pc, #152]	@ (8002c9c <_vfiprintf_r+0x224>)
 8002c04:	bb1b      	cbnz	r3, 8002c4e <_vfiprintf_r+0x1d6>
 8002c06:	9b03      	ldr	r3, [sp, #12]
 8002c08:	3307      	adds	r3, #7
 8002c0a:	f023 0307 	bic.w	r3, r3, #7
 8002c0e:	3308      	adds	r3, #8
 8002c10:	9303      	str	r3, [sp, #12]
 8002c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c14:	443b      	add	r3, r7
 8002c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c18:	e76a      	b.n	8002af0 <_vfiprintf_r+0x78>
 8002c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c1e:	460c      	mov	r4, r1
 8002c20:	2001      	movs	r0, #1
 8002c22:	e7a8      	b.n	8002b76 <_vfiprintf_r+0xfe>
 8002c24:	2300      	movs	r3, #0
 8002c26:	3401      	adds	r4, #1
 8002c28:	9305      	str	r3, [sp, #20]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f04f 0c0a 	mov.w	ip, #10
 8002c30:	4620      	mov	r0, r4
 8002c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c36:	3a30      	subs	r2, #48	@ 0x30
 8002c38:	2a09      	cmp	r2, #9
 8002c3a:	d903      	bls.n	8002c44 <_vfiprintf_r+0x1cc>
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0c6      	beq.n	8002bce <_vfiprintf_r+0x156>
 8002c40:	9105      	str	r1, [sp, #20]
 8002c42:	e7c4      	b.n	8002bce <_vfiprintf_r+0x156>
 8002c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c48:	4604      	mov	r4, r0
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e7f0      	b.n	8002c30 <_vfiprintf_r+0x1b8>
 8002c4e:	ab03      	add	r3, sp, #12
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	462a      	mov	r2, r5
 8002c54:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <_vfiprintf_r+0x228>)
 8002c56:	a904      	add	r1, sp, #16
 8002c58:	4630      	mov	r0, r6
 8002c5a:	f3af 8000 	nop.w
 8002c5e:	4607      	mov	r7, r0
 8002c60:	1c78      	adds	r0, r7, #1
 8002c62:	d1d6      	bne.n	8002c12 <_vfiprintf_r+0x19a>
 8002c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c66:	07d9      	lsls	r1, r3, #31
 8002c68:	d405      	bmi.n	8002c76 <_vfiprintf_r+0x1fe>
 8002c6a:	89ab      	ldrh	r3, [r5, #12]
 8002c6c:	059a      	lsls	r2, r3, #22
 8002c6e:	d402      	bmi.n	8002c76 <_vfiprintf_r+0x1fe>
 8002c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c72:	f7ff fddd 	bl	8002830 <__retarget_lock_release_recursive>
 8002c76:	89ab      	ldrh	r3, [r5, #12]
 8002c78:	065b      	lsls	r3, r3, #25
 8002c7a:	f53f af1f 	bmi.w	8002abc <_vfiprintf_r+0x44>
 8002c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c80:	e71e      	b.n	8002ac0 <_vfiprintf_r+0x48>
 8002c82:	ab03      	add	r3, sp, #12
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	462a      	mov	r2, r5
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <_vfiprintf_r+0x228>)
 8002c8a:	a904      	add	r1, sp, #16
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f000 f879 	bl	8002d84 <_printf_i>
 8002c92:	e7e4      	b.n	8002c5e <_vfiprintf_r+0x1e6>
 8002c94:	080032a0 	.word	0x080032a0
 8002c98:	080032aa 	.word	0x080032aa
 8002c9c:	00000000 	.word	0x00000000
 8002ca0:	08002a53 	.word	0x08002a53
 8002ca4:	080032a6 	.word	0x080032a6

08002ca8 <_printf_common>:
 8002ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cac:	4616      	mov	r6, r2
 8002cae:	4698      	mov	r8, r3
 8002cb0:	688a      	ldr	r2, [r1, #8]
 8002cb2:	690b      	ldr	r3, [r1, #16]
 8002cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bfb8      	it	lt
 8002cbc:	4613      	movlt	r3, r2
 8002cbe:	6033      	str	r3, [r6, #0]
 8002cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002cc4:	4607      	mov	r7, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	b10a      	cbz	r2, 8002cce <_printf_common+0x26>
 8002cca:	3301      	adds	r3, #1
 8002ccc:	6033      	str	r3, [r6, #0]
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	0699      	lsls	r1, r3, #26
 8002cd2:	bf42      	ittt	mi
 8002cd4:	6833      	ldrmi	r3, [r6, #0]
 8002cd6:	3302      	addmi	r3, #2
 8002cd8:	6033      	strmi	r3, [r6, #0]
 8002cda:	6825      	ldr	r5, [r4, #0]
 8002cdc:	f015 0506 	ands.w	r5, r5, #6
 8002ce0:	d106      	bne.n	8002cf0 <_printf_common+0x48>
 8002ce2:	f104 0a19 	add.w	sl, r4, #25
 8002ce6:	68e3      	ldr	r3, [r4, #12]
 8002ce8:	6832      	ldr	r2, [r6, #0]
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	dc26      	bgt.n	8002d3e <_printf_common+0x96>
 8002cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002cf4:	6822      	ldr	r2, [r4, #0]
 8002cf6:	3b00      	subs	r3, #0
 8002cf8:	bf18      	it	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	0692      	lsls	r2, r2, #26
 8002cfe:	d42b      	bmi.n	8002d58 <_printf_common+0xb0>
 8002d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d04:	4641      	mov	r1, r8
 8002d06:	4638      	mov	r0, r7
 8002d08:	47c8      	blx	r9
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	d01e      	beq.n	8002d4c <_printf_common+0xa4>
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	f003 0306 	and.w	r3, r3, #6
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	bf02      	ittt	eq
 8002d1a:	68e5      	ldreq	r5, [r4, #12]
 8002d1c:	6833      	ldreq	r3, [r6, #0]
 8002d1e:	1aed      	subeq	r5, r5, r3
 8002d20:	68a3      	ldr	r3, [r4, #8]
 8002d22:	bf0c      	ite	eq
 8002d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d28:	2500      	movne	r5, #0
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	bfc4      	itt	gt
 8002d2e:	1a9b      	subgt	r3, r3, r2
 8002d30:	18ed      	addgt	r5, r5, r3
 8002d32:	2600      	movs	r6, #0
 8002d34:	341a      	adds	r4, #26
 8002d36:	42b5      	cmp	r5, r6
 8002d38:	d11a      	bne.n	8002d70 <_printf_common+0xc8>
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	e008      	b.n	8002d50 <_printf_common+0xa8>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	4652      	mov	r2, sl
 8002d42:	4641      	mov	r1, r8
 8002d44:	4638      	mov	r0, r7
 8002d46:	47c8      	blx	r9
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d103      	bne.n	8002d54 <_printf_common+0xac>
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d54:	3501      	adds	r5, #1
 8002d56:	e7c6      	b.n	8002ce6 <_printf_common+0x3e>
 8002d58:	18e1      	adds	r1, r4, r3
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	2030      	movs	r0, #48	@ 0x30
 8002d5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d62:	4422      	add	r2, r4
 8002d64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	e7c7      	b.n	8002d00 <_printf_common+0x58>
 8002d70:	2301      	movs	r3, #1
 8002d72:	4622      	mov	r2, r4
 8002d74:	4641      	mov	r1, r8
 8002d76:	4638      	mov	r0, r7
 8002d78:	47c8      	blx	r9
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	d0e6      	beq.n	8002d4c <_printf_common+0xa4>
 8002d7e:	3601      	adds	r6, #1
 8002d80:	e7d9      	b.n	8002d36 <_printf_common+0x8e>
	...

08002d84 <_printf_i>:
 8002d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d88:	7e0f      	ldrb	r7, [r1, #24]
 8002d8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d8c:	2f78      	cmp	r7, #120	@ 0x78
 8002d8e:	4691      	mov	r9, r2
 8002d90:	4680      	mov	r8, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	469a      	mov	sl, r3
 8002d96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d9a:	d807      	bhi.n	8002dac <_printf_i+0x28>
 8002d9c:	2f62      	cmp	r7, #98	@ 0x62
 8002d9e:	d80a      	bhi.n	8002db6 <_printf_i+0x32>
 8002da0:	2f00      	cmp	r7, #0
 8002da2:	f000 80d1 	beq.w	8002f48 <_printf_i+0x1c4>
 8002da6:	2f58      	cmp	r7, #88	@ 0x58
 8002da8:	f000 80b8 	beq.w	8002f1c <_printf_i+0x198>
 8002dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002db0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002db4:	e03a      	b.n	8002e2c <_printf_i+0xa8>
 8002db6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002dba:	2b15      	cmp	r3, #21
 8002dbc:	d8f6      	bhi.n	8002dac <_printf_i+0x28>
 8002dbe:	a101      	add	r1, pc, #4	@ (adr r1, 8002dc4 <_printf_i+0x40>)
 8002dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dc4:	08002e1d 	.word	0x08002e1d
 8002dc8:	08002e31 	.word	0x08002e31
 8002dcc:	08002dad 	.word	0x08002dad
 8002dd0:	08002dad 	.word	0x08002dad
 8002dd4:	08002dad 	.word	0x08002dad
 8002dd8:	08002dad 	.word	0x08002dad
 8002ddc:	08002e31 	.word	0x08002e31
 8002de0:	08002dad 	.word	0x08002dad
 8002de4:	08002dad 	.word	0x08002dad
 8002de8:	08002dad 	.word	0x08002dad
 8002dec:	08002dad 	.word	0x08002dad
 8002df0:	08002f2f 	.word	0x08002f2f
 8002df4:	08002e5b 	.word	0x08002e5b
 8002df8:	08002ee9 	.word	0x08002ee9
 8002dfc:	08002dad 	.word	0x08002dad
 8002e00:	08002dad 	.word	0x08002dad
 8002e04:	08002f51 	.word	0x08002f51
 8002e08:	08002dad 	.word	0x08002dad
 8002e0c:	08002e5b 	.word	0x08002e5b
 8002e10:	08002dad 	.word	0x08002dad
 8002e14:	08002dad 	.word	0x08002dad
 8002e18:	08002ef1 	.word	0x08002ef1
 8002e1c:	6833      	ldr	r3, [r6, #0]
 8002e1e:	1d1a      	adds	r2, r3, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6032      	str	r2, [r6, #0]
 8002e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e09c      	b.n	8002f6a <_printf_i+0x1e6>
 8002e30:	6833      	ldr	r3, [r6, #0]
 8002e32:	6820      	ldr	r0, [r4, #0]
 8002e34:	1d19      	adds	r1, r3, #4
 8002e36:	6031      	str	r1, [r6, #0]
 8002e38:	0606      	lsls	r6, r0, #24
 8002e3a:	d501      	bpl.n	8002e40 <_printf_i+0xbc>
 8002e3c:	681d      	ldr	r5, [r3, #0]
 8002e3e:	e003      	b.n	8002e48 <_printf_i+0xc4>
 8002e40:	0645      	lsls	r5, r0, #25
 8002e42:	d5fb      	bpl.n	8002e3c <_printf_i+0xb8>
 8002e44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	da03      	bge.n	8002e54 <_printf_i+0xd0>
 8002e4c:	232d      	movs	r3, #45	@ 0x2d
 8002e4e:	426d      	negs	r5, r5
 8002e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e54:	4858      	ldr	r0, [pc, #352]	@ (8002fb8 <_printf_i+0x234>)
 8002e56:	230a      	movs	r3, #10
 8002e58:	e011      	b.n	8002e7e <_printf_i+0xfa>
 8002e5a:	6821      	ldr	r1, [r4, #0]
 8002e5c:	6833      	ldr	r3, [r6, #0]
 8002e5e:	0608      	lsls	r0, r1, #24
 8002e60:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e64:	d402      	bmi.n	8002e6c <_printf_i+0xe8>
 8002e66:	0649      	lsls	r1, r1, #25
 8002e68:	bf48      	it	mi
 8002e6a:	b2ad      	uxthmi	r5, r5
 8002e6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002e6e:	4852      	ldr	r0, [pc, #328]	@ (8002fb8 <_printf_i+0x234>)
 8002e70:	6033      	str	r3, [r6, #0]
 8002e72:	bf14      	ite	ne
 8002e74:	230a      	movne	r3, #10
 8002e76:	2308      	moveq	r3, #8
 8002e78:	2100      	movs	r1, #0
 8002e7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e7e:	6866      	ldr	r6, [r4, #4]
 8002e80:	60a6      	str	r6, [r4, #8]
 8002e82:	2e00      	cmp	r6, #0
 8002e84:	db05      	blt.n	8002e92 <_printf_i+0x10e>
 8002e86:	6821      	ldr	r1, [r4, #0]
 8002e88:	432e      	orrs	r6, r5
 8002e8a:	f021 0104 	bic.w	r1, r1, #4
 8002e8e:	6021      	str	r1, [r4, #0]
 8002e90:	d04b      	beq.n	8002f2a <_printf_i+0x1a6>
 8002e92:	4616      	mov	r6, r2
 8002e94:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e98:	fb03 5711 	mls	r7, r3, r1, r5
 8002e9c:	5dc7      	ldrb	r7, [r0, r7]
 8002e9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ea2:	462f      	mov	r7, r5
 8002ea4:	42bb      	cmp	r3, r7
 8002ea6:	460d      	mov	r5, r1
 8002ea8:	d9f4      	bls.n	8002e94 <_printf_i+0x110>
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d10b      	bne.n	8002ec6 <_printf_i+0x142>
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	07df      	lsls	r7, r3, #31
 8002eb2:	d508      	bpl.n	8002ec6 <_printf_i+0x142>
 8002eb4:	6923      	ldr	r3, [r4, #16]
 8002eb6:	6861      	ldr	r1, [r4, #4]
 8002eb8:	4299      	cmp	r1, r3
 8002eba:	bfde      	ittt	le
 8002ebc:	2330      	movle	r3, #48	@ 0x30
 8002ebe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ec2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ec6:	1b92      	subs	r2, r2, r6
 8002ec8:	6122      	str	r2, [r4, #16]
 8002eca:	f8cd a000 	str.w	sl, [sp]
 8002ece:	464b      	mov	r3, r9
 8002ed0:	aa03      	add	r2, sp, #12
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	4640      	mov	r0, r8
 8002ed6:	f7ff fee7 	bl	8002ca8 <_printf_common>
 8002eda:	3001      	adds	r0, #1
 8002edc:	d14a      	bne.n	8002f74 <_printf_i+0x1f0>
 8002ede:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee2:	b004      	add	sp, #16
 8002ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	f043 0320 	orr.w	r3, r3, #32
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	4832      	ldr	r0, [pc, #200]	@ (8002fbc <_printf_i+0x238>)
 8002ef2:	2778      	movs	r7, #120	@ 0x78
 8002ef4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	6831      	ldr	r1, [r6, #0]
 8002efc:	061f      	lsls	r7, r3, #24
 8002efe:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f02:	d402      	bmi.n	8002f0a <_printf_i+0x186>
 8002f04:	065f      	lsls	r7, r3, #25
 8002f06:	bf48      	it	mi
 8002f08:	b2ad      	uxthmi	r5, r5
 8002f0a:	6031      	str	r1, [r6, #0]
 8002f0c:	07d9      	lsls	r1, r3, #31
 8002f0e:	bf44      	itt	mi
 8002f10:	f043 0320 	orrmi.w	r3, r3, #32
 8002f14:	6023      	strmi	r3, [r4, #0]
 8002f16:	b11d      	cbz	r5, 8002f20 <_printf_i+0x19c>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	e7ad      	b.n	8002e78 <_printf_i+0xf4>
 8002f1c:	4826      	ldr	r0, [pc, #152]	@ (8002fb8 <_printf_i+0x234>)
 8002f1e:	e7e9      	b.n	8002ef4 <_printf_i+0x170>
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	f023 0320 	bic.w	r3, r3, #32
 8002f26:	6023      	str	r3, [r4, #0]
 8002f28:	e7f6      	b.n	8002f18 <_printf_i+0x194>
 8002f2a:	4616      	mov	r6, r2
 8002f2c:	e7bd      	b.n	8002eaa <_printf_i+0x126>
 8002f2e:	6833      	ldr	r3, [r6, #0]
 8002f30:	6825      	ldr	r5, [r4, #0]
 8002f32:	6961      	ldr	r1, [r4, #20]
 8002f34:	1d18      	adds	r0, r3, #4
 8002f36:	6030      	str	r0, [r6, #0]
 8002f38:	062e      	lsls	r6, r5, #24
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	d501      	bpl.n	8002f42 <_printf_i+0x1be>
 8002f3e:	6019      	str	r1, [r3, #0]
 8002f40:	e002      	b.n	8002f48 <_printf_i+0x1c4>
 8002f42:	0668      	lsls	r0, r5, #25
 8002f44:	d5fb      	bpl.n	8002f3e <_printf_i+0x1ba>
 8002f46:	8019      	strh	r1, [r3, #0]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	6123      	str	r3, [r4, #16]
 8002f4c:	4616      	mov	r6, r2
 8002f4e:	e7bc      	b.n	8002eca <_printf_i+0x146>
 8002f50:	6833      	ldr	r3, [r6, #0]
 8002f52:	1d1a      	adds	r2, r3, #4
 8002f54:	6032      	str	r2, [r6, #0]
 8002f56:	681e      	ldr	r6, [r3, #0]
 8002f58:	6862      	ldr	r2, [r4, #4]
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	f7fd f937 	bl	80001d0 <memchr>
 8002f62:	b108      	cbz	r0, 8002f68 <_printf_i+0x1e4>
 8002f64:	1b80      	subs	r0, r0, r6
 8002f66:	6060      	str	r0, [r4, #4]
 8002f68:	6863      	ldr	r3, [r4, #4]
 8002f6a:	6123      	str	r3, [r4, #16]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f72:	e7aa      	b.n	8002eca <_printf_i+0x146>
 8002f74:	6923      	ldr	r3, [r4, #16]
 8002f76:	4632      	mov	r2, r6
 8002f78:	4649      	mov	r1, r9
 8002f7a:	4640      	mov	r0, r8
 8002f7c:	47d0      	blx	sl
 8002f7e:	3001      	adds	r0, #1
 8002f80:	d0ad      	beq.n	8002ede <_printf_i+0x15a>
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	079b      	lsls	r3, r3, #30
 8002f86:	d413      	bmi.n	8002fb0 <_printf_i+0x22c>
 8002f88:	68e0      	ldr	r0, [r4, #12]
 8002f8a:	9b03      	ldr	r3, [sp, #12]
 8002f8c:	4298      	cmp	r0, r3
 8002f8e:	bfb8      	it	lt
 8002f90:	4618      	movlt	r0, r3
 8002f92:	e7a6      	b.n	8002ee2 <_printf_i+0x15e>
 8002f94:	2301      	movs	r3, #1
 8002f96:	4632      	mov	r2, r6
 8002f98:	4649      	mov	r1, r9
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	47d0      	blx	sl
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d09d      	beq.n	8002ede <_printf_i+0x15a>
 8002fa2:	3501      	adds	r5, #1
 8002fa4:	68e3      	ldr	r3, [r4, #12]
 8002fa6:	9903      	ldr	r1, [sp, #12]
 8002fa8:	1a5b      	subs	r3, r3, r1
 8002faa:	42ab      	cmp	r3, r5
 8002fac:	dcf2      	bgt.n	8002f94 <_printf_i+0x210>
 8002fae:	e7eb      	b.n	8002f88 <_printf_i+0x204>
 8002fb0:	2500      	movs	r5, #0
 8002fb2:	f104 0619 	add.w	r6, r4, #25
 8002fb6:	e7f5      	b.n	8002fa4 <_printf_i+0x220>
 8002fb8:	080032b1 	.word	0x080032b1
 8002fbc:	080032c2 	.word	0x080032c2

08002fc0 <__sflush_r>:
 8002fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc8:	0716      	lsls	r6, r2, #28
 8002fca:	4605      	mov	r5, r0
 8002fcc:	460c      	mov	r4, r1
 8002fce:	d454      	bmi.n	800307a <__sflush_r+0xba>
 8002fd0:	684b      	ldr	r3, [r1, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	dc02      	bgt.n	8002fdc <__sflush_r+0x1c>
 8002fd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	dd48      	ble.n	800306e <__sflush_r+0xae>
 8002fdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002fde:	2e00      	cmp	r6, #0
 8002fe0:	d045      	beq.n	800306e <__sflush_r+0xae>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002fe8:	682f      	ldr	r7, [r5, #0]
 8002fea:	6a21      	ldr	r1, [r4, #32]
 8002fec:	602b      	str	r3, [r5, #0]
 8002fee:	d030      	beq.n	8003052 <__sflush_r+0x92>
 8002ff0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	0759      	lsls	r1, r3, #29
 8002ff6:	d505      	bpl.n	8003004 <__sflush_r+0x44>
 8002ff8:	6863      	ldr	r3, [r4, #4]
 8002ffa:	1ad2      	subs	r2, r2, r3
 8002ffc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ffe:	b10b      	cbz	r3, 8003004 <__sflush_r+0x44>
 8003000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003002:	1ad2      	subs	r2, r2, r3
 8003004:	2300      	movs	r3, #0
 8003006:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003008:	6a21      	ldr	r1, [r4, #32]
 800300a:	4628      	mov	r0, r5
 800300c:	47b0      	blx	r6
 800300e:	1c43      	adds	r3, r0, #1
 8003010:	89a3      	ldrh	r3, [r4, #12]
 8003012:	d106      	bne.n	8003022 <__sflush_r+0x62>
 8003014:	6829      	ldr	r1, [r5, #0]
 8003016:	291d      	cmp	r1, #29
 8003018:	d82b      	bhi.n	8003072 <__sflush_r+0xb2>
 800301a:	4a2a      	ldr	r2, [pc, #168]	@ (80030c4 <__sflush_r+0x104>)
 800301c:	40ca      	lsrs	r2, r1
 800301e:	07d6      	lsls	r6, r2, #31
 8003020:	d527      	bpl.n	8003072 <__sflush_r+0xb2>
 8003022:	2200      	movs	r2, #0
 8003024:	6062      	str	r2, [r4, #4]
 8003026:	04d9      	lsls	r1, r3, #19
 8003028:	6922      	ldr	r2, [r4, #16]
 800302a:	6022      	str	r2, [r4, #0]
 800302c:	d504      	bpl.n	8003038 <__sflush_r+0x78>
 800302e:	1c42      	adds	r2, r0, #1
 8003030:	d101      	bne.n	8003036 <__sflush_r+0x76>
 8003032:	682b      	ldr	r3, [r5, #0]
 8003034:	b903      	cbnz	r3, 8003038 <__sflush_r+0x78>
 8003036:	6560      	str	r0, [r4, #84]	@ 0x54
 8003038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800303a:	602f      	str	r7, [r5, #0]
 800303c:	b1b9      	cbz	r1, 800306e <__sflush_r+0xae>
 800303e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003042:	4299      	cmp	r1, r3
 8003044:	d002      	beq.n	800304c <__sflush_r+0x8c>
 8003046:	4628      	mov	r0, r5
 8003048:	f7ff fbf4 	bl	8002834 <_free_r>
 800304c:	2300      	movs	r3, #0
 800304e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003050:	e00d      	b.n	800306e <__sflush_r+0xae>
 8003052:	2301      	movs	r3, #1
 8003054:	4628      	mov	r0, r5
 8003056:	47b0      	blx	r6
 8003058:	4602      	mov	r2, r0
 800305a:	1c50      	adds	r0, r2, #1
 800305c:	d1c9      	bne.n	8002ff2 <__sflush_r+0x32>
 800305e:	682b      	ldr	r3, [r5, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0c6      	beq.n	8002ff2 <__sflush_r+0x32>
 8003064:	2b1d      	cmp	r3, #29
 8003066:	d001      	beq.n	800306c <__sflush_r+0xac>
 8003068:	2b16      	cmp	r3, #22
 800306a:	d11e      	bne.n	80030aa <__sflush_r+0xea>
 800306c:	602f      	str	r7, [r5, #0]
 800306e:	2000      	movs	r0, #0
 8003070:	e022      	b.n	80030b8 <__sflush_r+0xf8>
 8003072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003076:	b21b      	sxth	r3, r3
 8003078:	e01b      	b.n	80030b2 <__sflush_r+0xf2>
 800307a:	690f      	ldr	r7, [r1, #16]
 800307c:	2f00      	cmp	r7, #0
 800307e:	d0f6      	beq.n	800306e <__sflush_r+0xae>
 8003080:	0793      	lsls	r3, r2, #30
 8003082:	680e      	ldr	r6, [r1, #0]
 8003084:	bf08      	it	eq
 8003086:	694b      	ldreq	r3, [r1, #20]
 8003088:	600f      	str	r7, [r1, #0]
 800308a:	bf18      	it	ne
 800308c:	2300      	movne	r3, #0
 800308e:	eba6 0807 	sub.w	r8, r6, r7
 8003092:	608b      	str	r3, [r1, #8]
 8003094:	f1b8 0f00 	cmp.w	r8, #0
 8003098:	dde9      	ble.n	800306e <__sflush_r+0xae>
 800309a:	6a21      	ldr	r1, [r4, #32]
 800309c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800309e:	4643      	mov	r3, r8
 80030a0:	463a      	mov	r2, r7
 80030a2:	4628      	mov	r0, r5
 80030a4:	47b0      	blx	r6
 80030a6:	2800      	cmp	r0, #0
 80030a8:	dc08      	bgt.n	80030bc <__sflush_r+0xfc>
 80030aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030b2:	81a3      	strh	r3, [r4, #12]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030bc:	4407      	add	r7, r0
 80030be:	eba8 0800 	sub.w	r8, r8, r0
 80030c2:	e7e7      	b.n	8003094 <__sflush_r+0xd4>
 80030c4:	20400001 	.word	0x20400001

080030c8 <_fflush_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	690b      	ldr	r3, [r1, #16]
 80030cc:	4605      	mov	r5, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	b913      	cbnz	r3, 80030d8 <_fflush_r+0x10>
 80030d2:	2500      	movs	r5, #0
 80030d4:	4628      	mov	r0, r5
 80030d6:	bd38      	pop	{r3, r4, r5, pc}
 80030d8:	b118      	cbz	r0, 80030e2 <_fflush_r+0x1a>
 80030da:	6a03      	ldr	r3, [r0, #32]
 80030dc:	b90b      	cbnz	r3, 80030e2 <_fflush_r+0x1a>
 80030de:	f7ff f9af 	bl	8002440 <__sinit>
 80030e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f3      	beq.n	80030d2 <_fflush_r+0xa>
 80030ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80030ec:	07d0      	lsls	r0, r2, #31
 80030ee:	d404      	bmi.n	80030fa <_fflush_r+0x32>
 80030f0:	0599      	lsls	r1, r3, #22
 80030f2:	d402      	bmi.n	80030fa <_fflush_r+0x32>
 80030f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030f6:	f7ff fb9a 	bl	800282e <__retarget_lock_acquire_recursive>
 80030fa:	4628      	mov	r0, r5
 80030fc:	4621      	mov	r1, r4
 80030fe:	f7ff ff5f 	bl	8002fc0 <__sflush_r>
 8003102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003104:	07da      	lsls	r2, r3, #31
 8003106:	4605      	mov	r5, r0
 8003108:	d4e4      	bmi.n	80030d4 <_fflush_r+0xc>
 800310a:	89a3      	ldrh	r3, [r4, #12]
 800310c:	059b      	lsls	r3, r3, #22
 800310e:	d4e1      	bmi.n	80030d4 <_fflush_r+0xc>
 8003110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003112:	f7ff fb8d 	bl	8002830 <__retarget_lock_release_recursive>
 8003116:	e7dd      	b.n	80030d4 <_fflush_r+0xc>

08003118 <__swhatbuf_r>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	460c      	mov	r4, r1
 800311c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003120:	2900      	cmp	r1, #0
 8003122:	b096      	sub	sp, #88	@ 0x58
 8003124:	4615      	mov	r5, r2
 8003126:	461e      	mov	r6, r3
 8003128:	da0d      	bge.n	8003146 <__swhatbuf_r+0x2e>
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003130:	f04f 0100 	mov.w	r1, #0
 8003134:	bf14      	ite	ne
 8003136:	2340      	movne	r3, #64	@ 0x40
 8003138:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800313c:	2000      	movs	r0, #0
 800313e:	6031      	str	r1, [r6, #0]
 8003140:	602b      	str	r3, [r5, #0]
 8003142:	b016      	add	sp, #88	@ 0x58
 8003144:	bd70      	pop	{r4, r5, r6, pc}
 8003146:	466a      	mov	r2, sp
 8003148:	f000 f848 	bl	80031dc <_fstat_r>
 800314c:	2800      	cmp	r0, #0
 800314e:	dbec      	blt.n	800312a <__swhatbuf_r+0x12>
 8003150:	9901      	ldr	r1, [sp, #4]
 8003152:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003156:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800315a:	4259      	negs	r1, r3
 800315c:	4159      	adcs	r1, r3
 800315e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003162:	e7eb      	b.n	800313c <__swhatbuf_r+0x24>

08003164 <__smakebuf_r>:
 8003164:	898b      	ldrh	r3, [r1, #12]
 8003166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003168:	079d      	lsls	r5, r3, #30
 800316a:	4606      	mov	r6, r0
 800316c:	460c      	mov	r4, r1
 800316e:	d507      	bpl.n	8003180 <__smakebuf_r+0x1c>
 8003170:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	6123      	str	r3, [r4, #16]
 8003178:	2301      	movs	r3, #1
 800317a:	6163      	str	r3, [r4, #20]
 800317c:	b003      	add	sp, #12
 800317e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003180:	ab01      	add	r3, sp, #4
 8003182:	466a      	mov	r2, sp
 8003184:	f7ff ffc8 	bl	8003118 <__swhatbuf_r>
 8003188:	9f00      	ldr	r7, [sp, #0]
 800318a:	4605      	mov	r5, r0
 800318c:	4639      	mov	r1, r7
 800318e:	4630      	mov	r0, r6
 8003190:	f7ff fbbc 	bl	800290c <_malloc_r>
 8003194:	b948      	cbnz	r0, 80031aa <__smakebuf_r+0x46>
 8003196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800319a:	059a      	lsls	r2, r3, #22
 800319c:	d4ee      	bmi.n	800317c <__smakebuf_r+0x18>
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	f043 0302 	orr.w	r3, r3, #2
 80031a6:	81a3      	strh	r3, [r4, #12]
 80031a8:	e7e2      	b.n	8003170 <__smakebuf_r+0xc>
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	6020      	str	r0, [r4, #0]
 80031ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b2:	81a3      	strh	r3, [r4, #12]
 80031b4:	9b01      	ldr	r3, [sp, #4]
 80031b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80031ba:	b15b      	cbz	r3, 80031d4 <__smakebuf_r+0x70>
 80031bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031c0:	4630      	mov	r0, r6
 80031c2:	f000 f81d 	bl	8003200 <_isatty_r>
 80031c6:	b128      	cbz	r0, 80031d4 <__smakebuf_r+0x70>
 80031c8:	89a3      	ldrh	r3, [r4, #12]
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	81a3      	strh	r3, [r4, #12]
 80031d4:	89a3      	ldrh	r3, [r4, #12]
 80031d6:	431d      	orrs	r5, r3
 80031d8:	81a5      	strh	r5, [r4, #12]
 80031da:	e7cf      	b.n	800317c <__smakebuf_r+0x18>

080031dc <_fstat_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4d07      	ldr	r5, [pc, #28]	@ (80031fc <_fstat_r+0x20>)
 80031e0:	2300      	movs	r3, #0
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	602b      	str	r3, [r5, #0]
 80031ea:	f7fd fc4e 	bl	8000a8a <_fstat>
 80031ee:	1c43      	adds	r3, r0, #1
 80031f0:	d102      	bne.n	80031f8 <_fstat_r+0x1c>
 80031f2:	682b      	ldr	r3, [r5, #0]
 80031f4:	b103      	cbz	r3, 80031f8 <_fstat_r+0x1c>
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	bd38      	pop	{r3, r4, r5, pc}
 80031fa:	bf00      	nop
 80031fc:	200001f0 	.word	0x200001f0

08003200 <_isatty_r>:
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4d06      	ldr	r5, [pc, #24]	@ (800321c <_isatty_r+0x1c>)
 8003204:	2300      	movs	r3, #0
 8003206:	4604      	mov	r4, r0
 8003208:	4608      	mov	r0, r1
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	f7fd fc4d 	bl	8000aaa <_isatty>
 8003210:	1c43      	adds	r3, r0, #1
 8003212:	d102      	bne.n	800321a <_isatty_r+0x1a>
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	b103      	cbz	r3, 800321a <_isatty_r+0x1a>
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	bd38      	pop	{r3, r4, r5, pc}
 800321c:	200001f0 	.word	0x200001f0

08003220 <_sbrk_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	4d06      	ldr	r5, [pc, #24]	@ (800323c <_sbrk_r+0x1c>)
 8003224:	2300      	movs	r3, #0
 8003226:	4604      	mov	r4, r0
 8003228:	4608      	mov	r0, r1
 800322a:	602b      	str	r3, [r5, #0]
 800322c:	f7fd fc56 	bl	8000adc <_sbrk>
 8003230:	1c43      	adds	r3, r0, #1
 8003232:	d102      	bne.n	800323a <_sbrk_r+0x1a>
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	b103      	cbz	r3, 800323a <_sbrk_r+0x1a>
 8003238:	6023      	str	r3, [r4, #0]
 800323a:	bd38      	pop	{r3, r4, r5, pc}
 800323c:	200001f0 	.word	0x200001f0

08003240 <_init>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr

0800324c <_fini>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr
