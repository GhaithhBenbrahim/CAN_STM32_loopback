
CAN_loopback_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003740  08003740  00004740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003804  08003804  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003804  08003804  00004804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800380c  0800380c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800380c  0800380c  0000480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003810  08003810  00004810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003814  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000198  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f94  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015be  00000000  00000000  0000b02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000678  00000000  00000000  0000c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b2  00000000  00000000  0000cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e8e  00000000  00000000  0000d11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007249  00000000  00000000  0002dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c488d  00000000  00000000  000351f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9a7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020a8  00000000  00000000  000f9ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  000fbb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003728 	.word	0x08003728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003728 	.word	0x08003728

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_CAN_TxMailbox0CompleteCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	printf("message transmitted : M0 \r\n");
 80005a4:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 80005a6:	f002 fa5d 	bl	8002a64 <puts>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	08003740 	.word	0x08003740

080005b8 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	printf("message transmitted : M1 \r\n");
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 80005c2:	f002 fa4f 	bl	8002a64 <puts>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	0800375c 	.word	0x0800375c

080005d4 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	printf("message transmitted : M2 \r\n");
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 80005de:	f002 fa41 	bl	8002a64 <puts>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08003778 	.word	0x08003778

080005f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08c      	sub	sp, #48	@ 0x30
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;

	uint8_t rcvd_msg[5];


	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg ) != HAL_OK)
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	f107 0214 	add.w	r2, r7, #20
 8000600:	2100      	movs	r1, #0
 8000602:	4809      	ldr	r0, [pc, #36]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000604:	f000 fea2 	bl	800134c <HAL_CAN_GetRxMessage>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_Handler();
 800060e:	f000 f959 	bl	80008c4 <Error_Handler>
	}

	printf("message received : %s\n", rcvd_msg);
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	4619      	mov	r1, r3
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800061a:	f002 f9bb 	bl	8002994 <iprintf>

}
 800061e:	bf00      	nop
 8000620:	3730      	adds	r7, #48	@ 0x30
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000084 	.word	0x20000084
 800062c:	08003794 	.word	0x08003794

08000630 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	printf("CAN error !");
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <HAL_CAN_ErrorCallback+0x1c>)
 800063a:	f002 f9ab 	bl	8002994 <iprintf>
	Error_Handler();
 800063e:	f000 f941 	bl	80008c4 <Error_Handler>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	080037ac 	.word	0x080037ac

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fb1a 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f81e 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f8bc 	bl	80007d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000660:	f000 f884 	bl	800076c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Config();
 8000664:	f000 f908 	bl	8000878 <CAN_Filter_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
 8000668:	f240 4103 	movw	r1, #1027	@ 0x403
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <main+0x44>)
 800066e:	f000 ff8f 	bl	8001590 <HAL_CAN_ActivateNotification>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <main+0x2c>
  {
	  Error_Handler();
 8000678:	f000 f924 	bl	80008c4 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800067c:	4805      	ldr	r0, [pc, #20]	@ (8000694 <main+0x44>)
 800067e:	f000 fd51 	bl	8001124 <HAL_CAN_Start>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <main+0x3c>
  {
	  Error_Handler();
 8000688:	f000 f91c 	bl	80008c4 <Error_Handler>
  }

  CAN1_Tx();
 800068c:	f000 f8cc 	bl	8000828 <CAN1_Tx>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <main+0x40>
 8000694:	20000084 	.word	0x20000084

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fabc 	bl	8002c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800070c:	2332      	movs	r3, #50	@ 0x32
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fc13 	bl	8001f48 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f8cc 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fe74 	bl	8002438 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f8b5 	bl	80008c4 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_CAN1_Init+0x64>)
 8000772:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <MX_CAN1_Init+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_CAN1_Init+0x64>)
 8000778:	2205      	movs	r2, #5
 800077a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_CAN1_Init+0x64>)
 800077e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000782:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_CAN1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_CAN1_Init+0x64>)
 800078c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000790:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_CAN1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <MX_CAN1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_CAN1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_CAN1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_CAN1_Init+0x64>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_CAN1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_CAN1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_CAN1_Init+0x64>)
 80007be:	f000 fad7 	bl	8000d70 <HAL_CAN_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007c8:	f000 f87c 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000084 	.word	0x20000084
 80007d4:	40006400 	.word	0x40006400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_GPIO_Init+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000824 <MX_GPIO_Init+0x4c>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <MX_GPIO_Init+0x4c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_GPIO_Init+0x4c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a08      	ldr	r2, [pc, #32]	@ (8000824 <MX_GPIO_Init+0x4c>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_GPIO_Init+0x4c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <CAN1_Tx>:

/* USER CODE BEGIN 4 */
void CAN1_Tx (void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader ;

	uint32_t TxMailbox;

	uint8_t our_message[5] = {'H', 'E', 'L', 'L', 'O'};
 800082e:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <CAN1_Tx+0x48>)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000836:	6018      	str	r0, [r3, #0]
 8000838:	3304      	adds	r3, #4
 800083a:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;
 800083c:	2305      	movs	r3, #5
 800083e:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;
 8000840:	f240 635d 	movw	r3, #1629	@ 0x65d
 8000844:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, our_message, &TxMailbox) != HAL_OK)
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	1d3a      	adds	r2, r7, #4
 8000854:	f107 0110 	add.w	r1, r7, #16
 8000858:	4806      	ldr	r0, [pc, #24]	@ (8000874 <CAN1_Tx+0x4c>)
 800085a:	f000 fca7 	bl	80011ac <HAL_CAN_AddTxMessage>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <CAN1_Tx+0x40>
	{
		Error_Handler();
 8000864:	f000 f82e 	bl	80008c4 <Error_Handler>
	}

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	@ 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	080037b8 	.word	0x080037b8
 8000874:	20000084 	.word	0x20000084

08000878 <CAN_Filter_Config>:
	printf("message received : %s\n", rcvd_msg);
}
*/

void CAN_Filter_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_Filter_init;

	can1_Filter_init.FilterActivation = ENABLE ;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
	can1_Filter_init.FilterBank = 0 ;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
	can1_Filter_init.FilterFIFOAssignment = CAN_RX_FIFO0 ;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
	can1_Filter_init.FilterIdHigh = 0x0000 ;
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
	can1_Filter_init.FilterIdLow = 0x0000 ;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
	can1_Filter_init.FilterMaskIdHigh = 0x0000 ;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
	can1_Filter_init.FilterMaskIdLow = 0x0000 ;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
	can1_Filter_init.FilterMode = CAN_FILTERMODE_IDMASK ;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
	can1_Filter_init.FilterScale = CAN_FILTERSCALE_32BIT ;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan1, &can1_Filter_init) != HAL_OK )
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <CAN_Filter_Config+0x48>)
 80008a8:	f000 fb5e 	bl	8000f68 <HAL_CAN_ConfigFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 80008b2:	f000 f807 	bl	80008c4 <Error_Handler>
	}

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	@ 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000084 	.word	0x20000084

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a0f      	ldr	r2, [pc, #60]	@ (800091c <HAL_MspInit+0x4c>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	@ (800091c <HAL_MspInit+0x4c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800090e:	2007      	movs	r0, #7
 8000910:	f001 f93c 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a25      	ldr	r2, [pc, #148]	@ (80009d4 <HAL_CAN_MspInit+0xb4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d144      	bne.n	80009cc <HAL_CAN_MspInit+0xac>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <HAL_CAN_MspInit+0xb8>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <HAL_CAN_MspInit+0xb8>)
 800094c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000950:	6413      	str	r3, [r2, #64]	@ 0x40
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <HAL_CAN_MspInit+0xb8>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <HAL_CAN_MspInit+0xb8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <HAL_CAN_MspInit+0xb8>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <HAL_CAN_MspInit+0xb8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800097a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800098c:	2309      	movs	r3, #9
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4811      	ldr	r0, [pc, #68]	@ (80009dc <HAL_CAN_MspInit+0xbc>)
 8000998:	f001 f93a 	bl	8001c10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2013      	movs	r0, #19
 80009a2:	f001 f8fe 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80009a6:	2013      	movs	r0, #19
 80009a8:	f001 f917 	bl	8001bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2014      	movs	r0, #20
 80009b2:	f001 f8f6 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009b6:	2014      	movs	r0, #20
 80009b8:	f001 f90f 	bl	8001bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2015      	movs	r0, #21
 80009c2:	f001 f8ee 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80009c6:	2015      	movs	r0, #21
 80009c8:	f001 f907 	bl	8001bda <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	@ 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40006400 	.word	0x40006400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 f97b 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <CAN1_TX_IRQHandler+0x10>)
 8000a46:	f000 fdc9 	bl	80015dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000084 	.word	0x20000084

08000a54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <CAN1_RX0_IRQHandler+0x10>)
 8000a5a:	f000 fdbf 	bl	80015dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000084 	.word	0x20000084

08000a68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <CAN1_RX1_IRQHandler+0x10>)
 8000a6e:	f000 fdb5 	bl	80015dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000084 	.word	0x20000084

08000a7c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <ITM_SendChar+0x48>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <ITM_SendChar+0x48>)
 8000a8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a90:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <ITM_SendChar+0x4c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <ITM_SendChar+0x4c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a9e:	bf00      	nop
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f8      	beq.n	8000aa0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000aae:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	6013      	str	r3, [r2, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000edfc 	.word	0xe000edfc
 8000ac8:	e0000e00 	.word	0xe0000e00

08000acc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e00a      	b.n	8000af4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ade:	f3af 8000 	nop.w
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf0      	blt.n	8000ade <_read+0x12>
	}

return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e009      	b.n	8000b2c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ffab 	bl	8000a7c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbf1      	blt.n	8000b18 <_write+0x12>
	}
	return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_close>:

int _close(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
	return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b66:	605a      	str	r2, [r3, #4]
	return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_isatty>:

int _isatty(int file)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f002 f872 	bl	8002cc0 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20020000 	.word	0x20020000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	200000ac 	.word	0x200000ac
 8000c10:	20000200 	.word	0x20000200

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c3c:	f7ff ffea 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	@ (8000c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	@ (8000c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 f831 	bl	8002ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fcf1 	bl	8000650 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c7c:	08003814 	.word	0x08003814
  ldr r2, =_sbss
 8000c80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c84:	20000200 	.word	0x20000200

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 ff69 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe06 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 ff81 	bl	8001bf6 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 ff49 	bl	8001ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	200000b0 	.word	0x200000b0

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200000b0 	.word	0x200000b0

08000d70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e0ed      	b.n	8000f5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fdc6 	bl	8000920 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f042 0201 	orr.w	r2, r2, #1
 8000da2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da4:	f7ff ffd8 	bl	8000d58 <HAL_GetTick>
 8000da8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000daa:	e012      	b.n	8000dd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dac:	f7ff ffd4 	bl	8000d58 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b0a      	cmp	r3, #10
 8000db8:	d90b      	bls.n	8000dd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2205      	movs	r2, #5
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e0c5      	b.n	8000f5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0e5      	beq.n	8000dac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0202 	bic.w	r2, r2, #2
 8000dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df0:	f7ff ffb2 	bl	8000d58 <HAL_GetTick>
 8000df4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000df6:	e012      	b.n	8000e1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000df8:	f7ff ffae 	bl	8000d58 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d90b      	bls.n	8000e1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2205      	movs	r2, #5
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e09f      	b.n	8000f5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1e5      	bne.n	8000df8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7e1b      	ldrb	r3, [r3, #24]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d108      	bne.n	8000e46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	e007      	b.n	8000e56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7e5b      	ldrb	r3, [r3, #25]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d108      	bne.n	8000e70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e007      	b.n	8000e80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e9b      	ldrb	r3, [r3, #26]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d108      	bne.n	8000e9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0220 	orr.w	r2, r2, #32
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e007      	b.n	8000eaa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0220 	bic.w	r2, r2, #32
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7edb      	ldrb	r3, [r3, #27]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d108      	bne.n	8000ec4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0210 	bic.w	r2, r2, #16
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e007      	b.n	8000ed4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0210 	orr.w	r2, r2, #16
 8000ed2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7f1b      	ldrb	r3, [r3, #28]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d108      	bne.n	8000eee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0208 	orr.w	r2, r2, #8
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e007      	b.n	8000efe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0208 	bic.w	r2, r2, #8
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7f5b      	ldrb	r3, [r3, #29]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d108      	bne.n	8000f18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0204 	orr.w	r2, r2, #4
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e007      	b.n	8000f28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0204 	bic.w	r2, r2, #4
 8000f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	ea42 0103 	orr.w	r1, r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	1e5a      	subs	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f78:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d003      	beq.n	8000f88 <HAL_CAN_ConfigFilter+0x20>
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	f040 80be 	bne.w	8001104 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f88:	4b65      	ldr	r3, [pc, #404]	@ (8001120 <HAL_CAN_ConfigFilter+0x1b8>)
 8000f8a:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fa2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f003 031f 	and.w	r3, r3, #31
 8000fc8:	2201      	movs	r2, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	401a      	ands	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d123      	bne.n	8001032 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800100c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	3248      	adds	r2, #72	@ 0x48
 8001012:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001026:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001028:	6939      	ldr	r1, [r7, #16]
 800102a:	3348      	adds	r3, #72	@ 0x48
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d122      	bne.n	8001080 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	431a      	orrs	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800105a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	3248      	adds	r2, #72	@ 0x48
 8001060:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001074:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001076:	6939      	ldr	r1, [r7, #16]
 8001078:	3348      	adds	r3, #72	@ 0x48
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d109      	bne.n	800109c <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800109a:	e007      	b.n	80010ac <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d109      	bne.n	80010c8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80010c6:	e007      	b.n	80010d8 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d107      	bne.n	80010f0 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010f6:	f023 0201 	bic.w	r2, r3, #1
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	e006      	b.n	8001112 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
  }
}
 8001112:	4618      	mov	r0, r3
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40006400 	.word	0x40006400

08001124 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d12e      	bne.n	8001196 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001150:	f7ff fe02 	bl	8000d58 <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001156:	e012      	b.n	800117e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001158:	f7ff fdfe 	bl	8000d58 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b0a      	cmp	r3, #10
 8001164:	d90b      	bls.n	800117e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2205      	movs	r2, #5
 8001176:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e012      	b.n	80011a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1e5      	bne.n	8001158 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e006      	b.n	80011a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
  }
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d003      	beq.n	80011d8 <HAL_CAN_AddTxMessage+0x2c>
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	f040 80ad 	bne.w	8001332 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10a      	bne.n	80011f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d105      	bne.n	80011f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8095 	beq.w	8001322 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	0e1b      	lsrs	r3, r3, #24
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001202:	2201      	movs	r2, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10d      	bne.n	8001230 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800121e:	68f9      	ldr	r1, [r7, #12]
 8001220:	6809      	ldr	r1, [r1, #0]
 8001222:	431a      	orrs	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3318      	adds	r3, #24
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	440b      	add	r3, r1
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e00f      	b.n	8001250 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800123a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001240:	68f9      	ldr	r1, [r7, #12]
 8001242:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001244:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3318      	adds	r3, #24
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	440b      	add	r3, r1
 800124e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3318      	adds	r3, #24
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	440b      	add	r3, r1
 8001260:	3304      	adds	r3, #4
 8001262:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	7d1b      	ldrb	r3, [r3, #20]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d111      	bne.n	8001290 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3318      	adds	r3, #24
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	4413      	add	r3, r2
 8001278:	3304      	adds	r3, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	6811      	ldr	r1, [r2, #0]
 8001280:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3318      	adds	r3, #24
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	440b      	add	r3, r1
 800128c:	3304      	adds	r3, #4
 800128e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3307      	adds	r3, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	061a      	lsls	r2, r3, #24
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3306      	adds	r3, #6
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	041b      	lsls	r3, r3, #16
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3305      	adds	r3, #5
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	4313      	orrs	r3, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	3204      	adds	r2, #4
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	4610      	mov	r0, r2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	6811      	ldr	r1, [r2, #0]
 80012b8:	ea43 0200 	orr.w	r2, r3, r0
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	440b      	add	r3, r1
 80012c2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80012c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3303      	adds	r3, #3
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	061a      	lsls	r2, r3, #24
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3302      	adds	r3, #2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	041b      	lsls	r3, r3, #16
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3301      	adds	r3, #1
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	4313      	orrs	r3, r2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	4610      	mov	r0, r2
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	6811      	ldr	r1, [r2, #0]
 80012ee:	ea43 0200 	orr.w	r2, r3, r0
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	440b      	add	r3, r1
 80012f8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80012fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3318      	adds	r3, #24
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	4413      	add	r3, r2
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	6811      	ldr	r1, [r2, #0]
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3318      	adds	r3, #24
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	440b      	add	r3, r1
 800131c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e00e      	b.n	8001340 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e006      	b.n	8001340 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001336:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
  }
}
 8001340:	4618      	mov	r0, r3
 8001342:	3724      	adds	r7, #36	@ 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001360:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d003      	beq.n	8001370 <HAL_CAN_GetRxMessage+0x24>
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	2b02      	cmp	r3, #2
 800136c:	f040 8103 	bne.w	8001576 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10e      	bne.n	8001394 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d116      	bne.n	80013b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001388:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0f7      	b.n	8001584 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d107      	bne.n	80013b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0e8      	b.n	8001584 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	331b      	adds	r3, #27
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0204 	and.w	r2, r3, #4
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10c      	bne.n	80013ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	331b      	adds	r3, #27
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	4413      	add	r3, r2
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e00b      	b.n	8001402 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	331b      	adds	r3, #27
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	331b      	adds	r3, #27
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4413      	add	r3, r2
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0202 	and.w	r2, r3, #2
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	331b      	adds	r3, #27
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	3304      	adds	r3, #4
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2208      	movs	r2, #8
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	e00b      	b.n	8001450 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	331b      	adds	r3, #27
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	3304      	adds	r3, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 020f 	and.w	r2, r3, #15
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	331b      	adds	r3, #27
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4413      	add	r3, r2
 800145c:	3304      	adds	r3, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	331b      	adds	r3, #27
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	4413      	add	r3, r2
 8001474:	3304      	adds	r3, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0c1b      	lsrs	r3, r3, #16
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4413      	add	r3, r2
 800148a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	0a1a      	lsrs	r2, r3, #8
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0c1a      	lsrs	r2, r3, #16
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	3302      	adds	r3, #2
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0e1a      	lsrs	r2, r3, #24
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3303      	adds	r3, #3
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3304      	adds	r3, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	4413      	add	r3, r2
 8001506:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0a1a      	lsrs	r2, r3, #8
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3305      	adds	r3, #5
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4413      	add	r3, r2
 8001520:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	0c1a      	lsrs	r2, r3, #16
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	3306      	adds	r3, #6
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0e1a      	lsrs	r2, r3, #24
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	3307      	adds	r3, #7
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d108      	bne.n	8001562 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0220 	orr.w	r2, r2, #32
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	e007      	b.n	8001572 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0220 	orr.w	r2, r2, #32
 8001570:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e006      	b.n	8001584 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
  }
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d002      	beq.n	80015ae <HAL_CAN_ActivateNotification+0x1e>
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d109      	bne.n	80015c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6959      	ldr	r1, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e006      	b.n	80015d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
  }
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	@ 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d07c      	beq.n	800171c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d023      	beq.n	8001674 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7fe ffac 	bl	800059c <HAL_CAN_TxMailbox0CompleteCallback>
 8001644:	e016      	b.n	8001674 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
 8001658:	e00c      	b.n	8001674 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001666:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
 800166c:	e002      	b.n	8001674 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f96b 	bl	800194a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d024      	beq.n	80016c8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001686:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff90 	bl	80005b8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001698:	e016      	b.n	80016c8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ac:	e00c      	b.n	80016c8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c0:	e002      	b.n	80016c8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f94b 	bl	800195e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d024      	beq.n	800171c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe ff74 	bl	80005d4 <HAL_CAN_TxMailbox2CompleteCallback>
 80016ec:	e016      	b.n	800171c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001700:	e00c      	b.n	800171c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
 8001714:	e002      	b.n	800171c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f92b 	bl	8001972 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00c      	beq.n	8001740 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2210      	movs	r2, #16
 800173e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2208      	movs	r2, #8
 800175a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f912 	bl	8001986 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d009      	beq.n	8001780 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe ff38 	bl	80005f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00c      	beq.n	80017a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d007      	beq.n	80017a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2210      	movs	r2, #16
 80017a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00b      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2208      	movs	r2, #8
 80017be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f8f4 	bl	80019ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d009      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f8db 	bl	800199a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2210      	movs	r2, #16
 80017fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f8de 	bl	80019c2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00b      	beq.n	8001828 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2208      	movs	r2, #8
 8001820:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8d7 	bl	80019d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d07b      	beq.n	800192a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d072      	beq.n	8001922 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d008      	beq.n	8001858 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800185e:	2b00      	cmp	r3, #0
 8001860:	d008      	beq.n	8001874 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001896:	2b00      	cmp	r3, #0
 8001898:	d043      	beq.n	8001922 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03e      	beq.n	8001922 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018aa:	2b60      	cmp	r3, #96	@ 0x60
 80018ac:	d02b      	beq.n	8001906 <HAL_CAN_IRQHandler+0x32a>
 80018ae:	2b60      	cmp	r3, #96	@ 0x60
 80018b0:	d82e      	bhi.n	8001910 <HAL_CAN_IRQHandler+0x334>
 80018b2:	2b50      	cmp	r3, #80	@ 0x50
 80018b4:	d022      	beq.n	80018fc <HAL_CAN_IRQHandler+0x320>
 80018b6:	2b50      	cmp	r3, #80	@ 0x50
 80018b8:	d82a      	bhi.n	8001910 <HAL_CAN_IRQHandler+0x334>
 80018ba:	2b40      	cmp	r3, #64	@ 0x40
 80018bc:	d019      	beq.n	80018f2 <HAL_CAN_IRQHandler+0x316>
 80018be:	2b40      	cmp	r3, #64	@ 0x40
 80018c0:	d826      	bhi.n	8001910 <HAL_CAN_IRQHandler+0x334>
 80018c2:	2b30      	cmp	r3, #48	@ 0x30
 80018c4:	d010      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x30c>
 80018c6:	2b30      	cmp	r3, #48	@ 0x30
 80018c8:	d822      	bhi.n	8001910 <HAL_CAN_IRQHandler+0x334>
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d002      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x2f8>
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d005      	beq.n	80018de <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018d2:	e01d      	b.n	8001910 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018dc:	e019      	b.n	8001912 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e0:	f043 0310 	orr.w	r3, r3, #16
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018e6:	e014      	b.n	8001912 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	f043 0320 	orr.w	r3, r3, #32
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018f0:	e00f      	b.n	8001912 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018fa:	e00a      	b.n	8001912 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001904:	e005      	b.n	8001912 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800190e:	e000      	b.n	8001912 <HAL_CAN_IRQHandler+0x336>
            break;
 8001910:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001920:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2204      	movs	r2, #4
 8001928:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7fe fe77 	bl	8000630 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1e:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	60d3      	str	r3, [r2, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db0b      	blt.n	8001a7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 021f 	and.w	r2, r3, #31
 8001a68:	4907      	ldr	r1, [pc, #28]	@ (8001a88 <__NVIC_EnableIRQ+0x38>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	2001      	movs	r0, #1
 8001a72:	fa00 f202 	lsl.w	r2, r0, r2
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db0a      	blt.n	8001ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	@ (8001ad8 <__NVIC_SetPriority+0x4c>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab4:	e00a      	b.n	8001acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4908      	ldr	r1, [pc, #32]	@ (8001adc <__NVIC_SetPriority+0x50>)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	761a      	strb	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	@ 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	4313      	orrs	r3, r2
         );
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	@ 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b58:	d301      	bcc.n	8001b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00f      	b.n	8001b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <SysTick_Config+0x40>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b66:	210f      	movs	r1, #15
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f7ff ff8e 	bl	8001a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b70:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <SysTick_Config+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b76:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <SysTick_Config+0x40>)
 8001b78:	2207      	movs	r2, #7
 8001b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff29 	bl	80019ec <__NVIC_SetPriorityGrouping>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb4:	f7ff ff3e 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7ff ff8e 	bl	8001ae0 <NVIC_EncodePriority>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff5d 	bl	8001a8c <__NVIC_SetPriority>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff31 	bl	8001a50 <__NVIC_EnableIRQ>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffa2 	bl	8001b48 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	@ 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	e16b      	b.n	8001f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 815a 	bne.w	8001efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d005      	beq.n	8001c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d130      	bne.n	8001cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 0201 	and.w	r2, r3, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d017      	beq.n	8001d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d123      	bne.n	8001d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	69b9      	ldr	r1, [r7, #24]
 8001d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80b4 	beq.w	8001efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b60      	ldr	r3, [pc, #384]	@ (8001f1c <HAL_GPIO_Init+0x30c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	4a5f      	ldr	r2, [pc, #380]	@ (8001f1c <HAL_GPIO_Init+0x30c>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f1c <HAL_GPIO_Init+0x30c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f20 <HAL_GPIO_Init+0x310>)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	@ (8001f24 <HAL_GPIO_Init+0x314>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d02b      	beq.n	8001e36 <HAL_GPIO_Init+0x226>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a51      	ldr	r2, [pc, #324]	@ (8001f28 <HAL_GPIO_Init+0x318>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d025      	beq.n	8001e32 <HAL_GPIO_Init+0x222>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a50      	ldr	r2, [pc, #320]	@ (8001f2c <HAL_GPIO_Init+0x31c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01f      	beq.n	8001e2e <HAL_GPIO_Init+0x21e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4f      	ldr	r2, [pc, #316]	@ (8001f30 <HAL_GPIO_Init+0x320>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0x21a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4e      	ldr	r2, [pc, #312]	@ (8001f34 <HAL_GPIO_Init+0x324>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x216>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4d      	ldr	r2, [pc, #308]	@ (8001f38 <HAL_GPIO_Init+0x328>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4c      	ldr	r2, [pc, #304]	@ (8001f3c <HAL_GPIO_Init+0x32c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x20e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	@ (8001f40 <HAL_GPIO_Init+0x330>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x20a>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00e      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	@ (8001f20 <HAL_GPIO_Init+0x310>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <HAL_GPIO_Init+0x334>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a32      	ldr	r2, [pc, #200]	@ (8001f44 <HAL_GPIO_Init+0x334>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b30      	ldr	r3, [pc, #192]	@ (8001f44 <HAL_GPIO_Init+0x334>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <HAL_GPIO_Init+0x334>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <HAL_GPIO_Init+0x334>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ece:	4a1d      	ldr	r2, [pc, #116]	@ (8001f44 <HAL_GPIO_Init+0x334>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_GPIO_Init+0x334>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef8:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <HAL_GPIO_Init+0x334>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f ae90 	bls.w	8001c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40021c00 	.word	0x40021c00
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e267      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d075      	beq.n	8002052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f66:	4b88      	ldr	r3, [pc, #544]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d00c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f72:	4b85      	ldr	r3, [pc, #532]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d112      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4b82      	ldr	r3, [pc, #520]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d05b      	beq.n	8002050 <HAL_RCC_OscConfig+0x108>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d157      	bne.n	8002050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e242      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fac:	d106      	bne.n	8001fbc <HAL_RCC_OscConfig+0x74>
 8001fae:	4b76      	ldr	r3, [pc, #472]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a75      	ldr	r2, [pc, #468]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e01d      	b.n	8001ff8 <HAL_RCC_OscConfig+0xb0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x98>
 8001fc6:	4b70      	ldr	r3, [pc, #448]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6f      	ldr	r2, [pc, #444]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6c      	ldr	r2, [pc, #432]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0xb0>
 8001fe0:	4b69      	ldr	r3, [pc, #420]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a68      	ldr	r2, [pc, #416]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a65      	ldr	r2, [pc, #404]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe feaa 	bl	8000d58 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7fe fea6 	bl	8000d58 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	@ 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e207      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b5b      	ldr	r3, [pc, #364]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0xc0>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7fe fe96 	bl	8000d58 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002030:	f7fe fe92 	bl	8000d58 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	@ 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1f3      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	4b51      	ldr	r3, [pc, #324]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0xe8>
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d063      	beq.n	8002126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800205e:	4b4a      	ldr	r3, [pc, #296]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	4b47      	ldr	r3, [pc, #284]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002072:	2b08      	cmp	r3, #8
 8002074:	d11c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b44      	ldr	r3, [pc, #272]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_RCC_OscConfig+0x152>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e1c7      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209a:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4937      	ldr	r1, [pc, #220]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	e03a      	b.n	8002126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b8:	4b34      	ldr	r3, [pc, #208]	@ (800218c <HAL_RCC_OscConfig+0x244>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7fe fe4b 	bl	8000d58 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c6:	f7fe fe47 	bl	8000d58 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1a8      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4925      	ldr	r1, [pc, #148]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
 80020f8:	e015      	b.n	8002126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <HAL_RCC_OscConfig+0x244>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7fe fe2a 	bl	8000d58 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002108:	f7fe fe26 	bl	8000d58 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e187      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d036      	beq.n	80021a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_RCC_OscConfig+0x248>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7fe fe0a 	bl	8000d58 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002148:	f7fe fe06 	bl	8000d58 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e167      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x200>
 8002166:	e01b      	b.n	80021a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_RCC_OscConfig+0x248>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7fe fdf3 	bl	8000d58 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	e00e      	b.n	8002194 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002176:	f7fe fdef 	bl	8000d58 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d907      	bls.n	8002194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e150      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
 8002188:	40023800 	.word	0x40023800
 800218c:	42470000 	.word	0x42470000
 8002190:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	4b88      	ldr	r3, [pc, #544]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ea      	bne.n	8002176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8097 	beq.w	80022dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b81      	ldr	r3, [pc, #516]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b7d      	ldr	r3, [pc, #500]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	4a7c      	ldr	r2, [pc, #496]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ce:	4b7a      	ldr	r3, [pc, #488]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b77      	ldr	r3, [pc, #476]	@ (80023bc <HAL_RCC_OscConfig+0x474>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ea:	4b74      	ldr	r3, [pc, #464]	@ (80023bc <HAL_RCC_OscConfig+0x474>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a73      	ldr	r2, [pc, #460]	@ (80023bc <HAL_RCC_OscConfig+0x474>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fdaf 	bl	8000d58 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7fe fdab 	bl	8000d58 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e10c      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b6a      	ldr	r3, [pc, #424]	@ (80023bc <HAL_RCC_OscConfig+0x474>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x2ea>
 8002224:	4b64      	ldr	r3, [pc, #400]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002228:	4a63      	ldr	r2, [pc, #396]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002230:	e01c      	b.n	800226c <HAL_RCC_OscConfig+0x324>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x30c>
 800223a:	4b5f      	ldr	r3, [pc, #380]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223e:	4a5e      	ldr	r2, [pc, #376]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6713      	str	r3, [r2, #112]	@ 0x70
 8002246:	4b5c      	ldr	r3, [pc, #368]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224a:	4a5b      	ldr	r2, [pc, #364]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6713      	str	r3, [r2, #112]	@ 0x70
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0x324>
 8002254:	4b58      	ldr	r3, [pc, #352]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002258:	4a57      	ldr	r2, [pc, #348]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002260:	4b55      	ldr	r3, [pc, #340]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	4a54      	ldr	r2, [pc, #336]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002274:	f7fe fd70 	bl	8000d58 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227c:	f7fe fd6c 	bl	8000d58 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0cb      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	4b49      	ldr	r3, [pc, #292]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ee      	beq.n	800227c <HAL_RCC_OscConfig+0x334>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7fe fd5a 	bl	8000d58 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7fe fd56 	bl	8000d58 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0b5      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022be:	4b3e      	ldr	r3, [pc, #248]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1ee      	bne.n	80022a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d0:	4b39      	ldr	r3, [pc, #228]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	4a38      	ldr	r2, [pc, #224]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a1 	beq.w	8002428 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022e6:	4b34      	ldr	r3, [pc, #208]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d05c      	beq.n	80023ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d141      	bne.n	800237e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <HAL_RCC_OscConfig+0x478>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fd2a 	bl	8000d58 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fd26 	bl	8000d58 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e087      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	491b      	ldr	r1, [pc, #108]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x478>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe fcff 	bl	8000d58 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe fcfb 	bl	8000d58 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e05c      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x416>
 800237c:	e054      	b.n	8002428 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_RCC_OscConfig+0x478>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fce8 	bl	8000d58 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fce4 	bl	8000d58 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e045      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x444>
 80023aa:	e03d      	b.n	8002428 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e038      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000
 80023c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x4ec>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d028      	beq.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d121      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11a      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d111      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0cc      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	4b68      	ldr	r3, [pc, #416]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d90c      	bls.n	8002474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b65      	ldr	r3, [pc, #404]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b63      	ldr	r3, [pc, #396]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0b8      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800248c:	4b59      	ldr	r3, [pc, #356]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a58      	ldr	r2, [pc, #352]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002496:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a4:	4b53      	ldr	r3, [pc, #332]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a52      	ldr	r2, [pc, #328]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b50      	ldr	r3, [pc, #320]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	494d      	ldr	r1, [pc, #308]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d044      	beq.n	8002558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b47      	ldr	r3, [pc, #284]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d119      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e07f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4b3f      	ldr	r3, [pc, #252]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4b3b      	ldr	r3, [pc, #236]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e067      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4934      	ldr	r1, [pc, #208]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002528:	f7fe fc16 	bl	8000d58 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fc12 	bl	8000d58 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e04f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 020c 	and.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	429a      	cmp	r2, r3
 8002556:	d1eb      	bne.n	8002530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d20c      	bcs.n	8002580 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b22      	ldr	r3, [pc, #136]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e032      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800258c:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4916      	ldr	r1, [pc, #88]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	490e      	ldr	r1, [pc, #56]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025be:	f000 f821 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025c2:	4602      	mov	r2, r0
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	490a      	ldr	r1, [pc, #40]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	5ccb      	ldrb	r3, [r1, r3]
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	4a09      	ldr	r2, [pc, #36]	@ (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fb76 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023c00 	.word	0x40023c00
 80025f4:	40023800 	.word	0x40023800
 80025f8:	080037c0 	.word	0x080037c0
 80025fc:	20000000 	.word	0x20000000
 8002600:	20000004 	.word	0x20000004

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002608:	b094      	sub	sp, #80	@ 0x50
 800260a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261c:	4b79      	ldr	r3, [pc, #484]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d00d      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x40>
 8002628:	2b08      	cmp	r3, #8
 800262a:	f200 80e1 	bhi.w	80027f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x34>
 8002632:	2b04      	cmp	r3, #4
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x3a>
 8002636:	e0db      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b73      	ldr	r3, [pc, #460]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x204>)
 800263a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800263c:	e0db      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800263e:	4b73      	ldr	r3, [pc, #460]	@ (800280c <HAL_RCC_GetSysClockFreq+0x208>)
 8002640:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002642:	e0d8      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002644:	4b6f      	ldr	r3, [pc, #444]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800264c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800264e:	4b6d      	ldr	r3, [pc, #436]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d063      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265a:	4b6a      	ldr	r3, [pc, #424]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	2200      	movs	r2, #0
 8002662:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002664:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266c:	633b      	str	r3, [r7, #48]	@ 0x30
 800266e:	2300      	movs	r3, #0
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
 8002672:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002676:	4622      	mov	r2, r4
 8002678:	462b      	mov	r3, r5
 800267a:	f04f 0000 	mov.w	r0, #0
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	0159      	lsls	r1, r3, #5
 8002684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002688:	0150      	lsls	r0, r2, #5
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4621      	mov	r1, r4
 8002690:	1a51      	subs	r1, r2, r1
 8002692:	6139      	str	r1, [r7, #16]
 8002694:	4629      	mov	r1, r5
 8002696:	eb63 0301 	sbc.w	r3, r3, r1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026a8:	4659      	mov	r1, fp
 80026aa:	018b      	lsls	r3, r1, #6
 80026ac:	4651      	mov	r1, sl
 80026ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026b2:	4651      	mov	r1, sl
 80026b4:	018a      	lsls	r2, r1, #6
 80026b6:	4651      	mov	r1, sl
 80026b8:	ebb2 0801 	subs.w	r8, r2, r1
 80026bc:	4659      	mov	r1, fp
 80026be:	eb63 0901 	sbc.w	r9, r3, r1
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d6:	4690      	mov	r8, r2
 80026d8:	4699      	mov	r9, r3
 80026da:	4623      	mov	r3, r4
 80026dc:	eb18 0303 	adds.w	r3, r8, r3
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	462b      	mov	r3, r5
 80026e4:	eb49 0303 	adc.w	r3, r9, r3
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026f6:	4629      	mov	r1, r5
 80026f8:	024b      	lsls	r3, r1, #9
 80026fa:	4621      	mov	r1, r4
 80026fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002700:	4621      	mov	r1, r4
 8002702:	024a      	lsls	r2, r1, #9
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800270a:	2200      	movs	r2, #0
 800270c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800270e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002714:	f7fd fdac 	bl	8000270 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4613      	mov	r3, r2
 800271e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002720:	e058      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002722:	4b38      	ldr	r3, [pc, #224]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	2200      	movs	r2, #0
 800272a:	4618      	mov	r0, r3
 800272c:	4611      	mov	r1, r2
 800272e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
 8002738:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800273c:	4642      	mov	r2, r8
 800273e:	464b      	mov	r3, r9
 8002740:	f04f 0000 	mov.w	r0, #0
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	0159      	lsls	r1, r3, #5
 800274a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800274e:	0150      	lsls	r0, r2, #5
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4641      	mov	r1, r8
 8002756:	ebb2 0a01 	subs.w	sl, r2, r1
 800275a:	4649      	mov	r1, r9
 800275c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800276c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002774:	ebb2 040a 	subs.w	r4, r2, sl
 8002778:	eb63 050b 	sbc.w	r5, r3, fp
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	00eb      	lsls	r3, r5, #3
 8002786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800278a:	00e2      	lsls	r2, r4, #3
 800278c:	4614      	mov	r4, r2
 800278e:	461d      	mov	r5, r3
 8002790:	4643      	mov	r3, r8
 8002792:	18e3      	adds	r3, r4, r3
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	464b      	mov	r3, r9
 8002798:	eb45 0303 	adc.w	r3, r5, r3
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027aa:	4629      	mov	r1, r5
 80027ac:	028b      	lsls	r3, r1, #10
 80027ae:	4621      	mov	r1, r4
 80027b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b4:	4621      	mov	r1, r4
 80027b6:	028a      	lsls	r2, r1, #10
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027be:	2200      	movs	r2, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	61fa      	str	r2, [r7, #28]
 80027c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c8:	f7fd fd52 	bl	8000270 <__aeabi_uldivmod>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4613      	mov	r3, r2
 80027d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	3301      	adds	r3, #1
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027ee:	e002      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x204>)
 80027f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3750      	adds	r7, #80	@ 0x50
 80027fc:	46bd      	mov	sp, r7
 80027fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	00f42400 	.word	0x00f42400
 800280c:	007a1200 	.word	0x007a1200

08002810 <std>:
 8002810:	2300      	movs	r3, #0
 8002812:	b510      	push	{r4, lr}
 8002814:	4604      	mov	r4, r0
 8002816:	e9c0 3300 	strd	r3, r3, [r0]
 800281a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800281e:	6083      	str	r3, [r0, #8]
 8002820:	8181      	strh	r1, [r0, #12]
 8002822:	6643      	str	r3, [r0, #100]	@ 0x64
 8002824:	81c2      	strh	r2, [r0, #14]
 8002826:	6183      	str	r3, [r0, #24]
 8002828:	4619      	mov	r1, r3
 800282a:	2208      	movs	r2, #8
 800282c:	305c      	adds	r0, #92	@ 0x5c
 800282e:	f000 f9f9 	bl	8002c24 <memset>
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <std+0x58>)
 8002834:	6263      	str	r3, [r4, #36]	@ 0x24
 8002836:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <std+0x5c>)
 8002838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800283a:	4b0d      	ldr	r3, [pc, #52]	@ (8002870 <std+0x60>)
 800283c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800283e:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <std+0x64>)
 8002840:	6323      	str	r3, [r4, #48]	@ 0x30
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <std+0x68>)
 8002844:	6224      	str	r4, [r4, #32]
 8002846:	429c      	cmp	r4, r3
 8002848:	d006      	beq.n	8002858 <std+0x48>
 800284a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800284e:	4294      	cmp	r4, r2
 8002850:	d002      	beq.n	8002858 <std+0x48>
 8002852:	33d0      	adds	r3, #208	@ 0xd0
 8002854:	429c      	cmp	r4, r3
 8002856:	d105      	bne.n	8002864 <std+0x54>
 8002858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800285c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002860:	f000 ba58 	b.w	8002d14 <__retarget_lock_init_recursive>
 8002864:	bd10      	pop	{r4, pc}
 8002866:	bf00      	nop
 8002868:	08002a75 	.word	0x08002a75
 800286c:	08002a97 	.word	0x08002a97
 8002870:	08002acf 	.word	0x08002acf
 8002874:	08002af3 	.word	0x08002af3
 8002878:	200000b4 	.word	0x200000b4

0800287c <stdio_exit_handler>:
 800287c:	4a02      	ldr	r2, [pc, #8]	@ (8002888 <stdio_exit_handler+0xc>)
 800287e:	4903      	ldr	r1, [pc, #12]	@ (800288c <stdio_exit_handler+0x10>)
 8002880:	4803      	ldr	r0, [pc, #12]	@ (8002890 <stdio_exit_handler+0x14>)
 8002882:	f000 b869 	b.w	8002958 <_fwalk_sglue>
 8002886:	bf00      	nop
 8002888:	2000000c 	.word	0x2000000c
 800288c:	080035b1 	.word	0x080035b1
 8002890:	2000001c 	.word	0x2000001c

08002894 <cleanup_stdio>:
 8002894:	6841      	ldr	r1, [r0, #4]
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <cleanup_stdio+0x34>)
 8002898:	4299      	cmp	r1, r3
 800289a:	b510      	push	{r4, lr}
 800289c:	4604      	mov	r4, r0
 800289e:	d001      	beq.n	80028a4 <cleanup_stdio+0x10>
 80028a0:	f000 fe86 	bl	80035b0 <_fflush_r>
 80028a4:	68a1      	ldr	r1, [r4, #8]
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <cleanup_stdio+0x38>)
 80028a8:	4299      	cmp	r1, r3
 80028aa:	d002      	beq.n	80028b2 <cleanup_stdio+0x1e>
 80028ac:	4620      	mov	r0, r4
 80028ae:	f000 fe7f 	bl	80035b0 <_fflush_r>
 80028b2:	68e1      	ldr	r1, [r4, #12]
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <cleanup_stdio+0x3c>)
 80028b6:	4299      	cmp	r1, r3
 80028b8:	d004      	beq.n	80028c4 <cleanup_stdio+0x30>
 80028ba:	4620      	mov	r0, r4
 80028bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028c0:	f000 be76 	b.w	80035b0 <_fflush_r>
 80028c4:	bd10      	pop	{r4, pc}
 80028c6:	bf00      	nop
 80028c8:	200000b4 	.word	0x200000b4
 80028cc:	2000011c 	.word	0x2000011c
 80028d0:	20000184 	.word	0x20000184

080028d4 <global_stdio_init.part.0>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <global_stdio_init.part.0+0x30>)
 80028d8:	4c0b      	ldr	r4, [pc, #44]	@ (8002908 <global_stdio_init.part.0+0x34>)
 80028da:	4a0c      	ldr	r2, [pc, #48]	@ (800290c <global_stdio_init.part.0+0x38>)
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	4620      	mov	r0, r4
 80028e0:	2200      	movs	r2, #0
 80028e2:	2104      	movs	r1, #4
 80028e4:	f7ff ff94 	bl	8002810 <std>
 80028e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80028ec:	2201      	movs	r2, #1
 80028ee:	2109      	movs	r1, #9
 80028f0:	f7ff ff8e 	bl	8002810 <std>
 80028f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80028f8:	2202      	movs	r2, #2
 80028fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028fe:	2112      	movs	r1, #18
 8002900:	f7ff bf86 	b.w	8002810 <std>
 8002904:	200001ec 	.word	0x200001ec
 8002908:	200000b4 	.word	0x200000b4
 800290c:	0800287d 	.word	0x0800287d

08002910 <__sfp_lock_acquire>:
 8002910:	4801      	ldr	r0, [pc, #4]	@ (8002918 <__sfp_lock_acquire+0x8>)
 8002912:	f000 ba00 	b.w	8002d16 <__retarget_lock_acquire_recursive>
 8002916:	bf00      	nop
 8002918:	200001f5 	.word	0x200001f5

0800291c <__sfp_lock_release>:
 800291c:	4801      	ldr	r0, [pc, #4]	@ (8002924 <__sfp_lock_release+0x8>)
 800291e:	f000 b9fb 	b.w	8002d18 <__retarget_lock_release_recursive>
 8002922:	bf00      	nop
 8002924:	200001f5 	.word	0x200001f5

08002928 <__sinit>:
 8002928:	b510      	push	{r4, lr}
 800292a:	4604      	mov	r4, r0
 800292c:	f7ff fff0 	bl	8002910 <__sfp_lock_acquire>
 8002930:	6a23      	ldr	r3, [r4, #32]
 8002932:	b11b      	cbz	r3, 800293c <__sinit+0x14>
 8002934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002938:	f7ff bff0 	b.w	800291c <__sfp_lock_release>
 800293c:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <__sinit+0x28>)
 800293e:	6223      	str	r3, [r4, #32]
 8002940:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <__sinit+0x2c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f5      	bne.n	8002934 <__sinit+0xc>
 8002948:	f7ff ffc4 	bl	80028d4 <global_stdio_init.part.0>
 800294c:	e7f2      	b.n	8002934 <__sinit+0xc>
 800294e:	bf00      	nop
 8002950:	08002895 	.word	0x08002895
 8002954:	200001ec 	.word	0x200001ec

08002958 <_fwalk_sglue>:
 8002958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800295c:	4607      	mov	r7, r0
 800295e:	4688      	mov	r8, r1
 8002960:	4614      	mov	r4, r2
 8002962:	2600      	movs	r6, #0
 8002964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002968:	f1b9 0901 	subs.w	r9, r9, #1
 800296c:	d505      	bpl.n	800297a <_fwalk_sglue+0x22>
 800296e:	6824      	ldr	r4, [r4, #0]
 8002970:	2c00      	cmp	r4, #0
 8002972:	d1f7      	bne.n	8002964 <_fwalk_sglue+0xc>
 8002974:	4630      	mov	r0, r6
 8002976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800297a:	89ab      	ldrh	r3, [r5, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d907      	bls.n	8002990 <_fwalk_sglue+0x38>
 8002980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002984:	3301      	adds	r3, #1
 8002986:	d003      	beq.n	8002990 <_fwalk_sglue+0x38>
 8002988:	4629      	mov	r1, r5
 800298a:	4638      	mov	r0, r7
 800298c:	47c0      	blx	r8
 800298e:	4306      	orrs	r6, r0
 8002990:	3568      	adds	r5, #104	@ 0x68
 8002992:	e7e9      	b.n	8002968 <_fwalk_sglue+0x10>

08002994 <iprintf>:
 8002994:	b40f      	push	{r0, r1, r2, r3}
 8002996:	b507      	push	{r0, r1, r2, lr}
 8002998:	4906      	ldr	r1, [pc, #24]	@ (80029b4 <iprintf+0x20>)
 800299a:	ab04      	add	r3, sp, #16
 800299c:	6808      	ldr	r0, [r1, #0]
 800299e:	f853 2b04 	ldr.w	r2, [r3], #4
 80029a2:	6881      	ldr	r1, [r0, #8]
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	f000 fadb 	bl	8002f60 <_vfiprintf_r>
 80029aa:	b003      	add	sp, #12
 80029ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80029b0:	b004      	add	sp, #16
 80029b2:	4770      	bx	lr
 80029b4:	20000018 	.word	0x20000018

080029b8 <_puts_r>:
 80029b8:	6a03      	ldr	r3, [r0, #32]
 80029ba:	b570      	push	{r4, r5, r6, lr}
 80029bc:	6884      	ldr	r4, [r0, #8]
 80029be:	4605      	mov	r5, r0
 80029c0:	460e      	mov	r6, r1
 80029c2:	b90b      	cbnz	r3, 80029c8 <_puts_r+0x10>
 80029c4:	f7ff ffb0 	bl	8002928 <__sinit>
 80029c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80029ca:	07db      	lsls	r3, r3, #31
 80029cc:	d405      	bmi.n	80029da <_puts_r+0x22>
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	0598      	lsls	r0, r3, #22
 80029d2:	d402      	bmi.n	80029da <_puts_r+0x22>
 80029d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029d6:	f000 f99e 	bl	8002d16 <__retarget_lock_acquire_recursive>
 80029da:	89a3      	ldrh	r3, [r4, #12]
 80029dc:	0719      	lsls	r1, r3, #28
 80029de:	d502      	bpl.n	80029e6 <_puts_r+0x2e>
 80029e0:	6923      	ldr	r3, [r4, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d135      	bne.n	8002a52 <_puts_r+0x9a>
 80029e6:	4621      	mov	r1, r4
 80029e8:	4628      	mov	r0, r5
 80029ea:	f000 f8c5 	bl	8002b78 <__swsetup_r>
 80029ee:	b380      	cbz	r0, 8002a52 <_puts_r+0x9a>
 80029f0:	f04f 35ff 	mov.w	r5, #4294967295
 80029f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80029f6:	07da      	lsls	r2, r3, #31
 80029f8:	d405      	bmi.n	8002a06 <_puts_r+0x4e>
 80029fa:	89a3      	ldrh	r3, [r4, #12]
 80029fc:	059b      	lsls	r3, r3, #22
 80029fe:	d402      	bmi.n	8002a06 <_puts_r+0x4e>
 8002a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a02:	f000 f989 	bl	8002d18 <__retarget_lock_release_recursive>
 8002a06:	4628      	mov	r0, r5
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da04      	bge.n	8002a18 <_puts_r+0x60>
 8002a0e:	69a2      	ldr	r2, [r4, #24]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	dc17      	bgt.n	8002a44 <_puts_r+0x8c>
 8002a14:	290a      	cmp	r1, #10
 8002a16:	d015      	beq.n	8002a44 <_puts_r+0x8c>
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	6022      	str	r2, [r4, #0]
 8002a1e:	7019      	strb	r1, [r3, #0]
 8002a20:	68a3      	ldr	r3, [r4, #8]
 8002a22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a26:	3b01      	subs	r3, #1
 8002a28:	60a3      	str	r3, [r4, #8]
 8002a2a:	2900      	cmp	r1, #0
 8002a2c:	d1ed      	bne.n	8002a0a <_puts_r+0x52>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da11      	bge.n	8002a56 <_puts_r+0x9e>
 8002a32:	4622      	mov	r2, r4
 8002a34:	210a      	movs	r1, #10
 8002a36:	4628      	mov	r0, r5
 8002a38:	f000 f85f 	bl	8002afa <__swbuf_r>
 8002a3c:	3001      	adds	r0, #1
 8002a3e:	d0d7      	beq.n	80029f0 <_puts_r+0x38>
 8002a40:	250a      	movs	r5, #10
 8002a42:	e7d7      	b.n	80029f4 <_puts_r+0x3c>
 8002a44:	4622      	mov	r2, r4
 8002a46:	4628      	mov	r0, r5
 8002a48:	f000 f857 	bl	8002afa <__swbuf_r>
 8002a4c:	3001      	adds	r0, #1
 8002a4e:	d1e7      	bne.n	8002a20 <_puts_r+0x68>
 8002a50:	e7ce      	b.n	80029f0 <_puts_r+0x38>
 8002a52:	3e01      	subs	r6, #1
 8002a54:	e7e4      	b.n	8002a20 <_puts_r+0x68>
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	6022      	str	r2, [r4, #0]
 8002a5c:	220a      	movs	r2, #10
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e7ee      	b.n	8002a40 <_puts_r+0x88>
	...

08002a64 <puts>:
 8002a64:	4b02      	ldr	r3, [pc, #8]	@ (8002a70 <puts+0xc>)
 8002a66:	4601      	mov	r1, r0
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	f7ff bfa5 	b.w	80029b8 <_puts_r>
 8002a6e:	bf00      	nop
 8002a70:	20000018 	.word	0x20000018

08002a74 <__sread>:
 8002a74:	b510      	push	{r4, lr}
 8002a76:	460c      	mov	r4, r1
 8002a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a7c:	f000 f8fc 	bl	8002c78 <_read_r>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	bfab      	itete	ge
 8002a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a86:	89a3      	ldrhlt	r3, [r4, #12]
 8002a88:	181b      	addge	r3, r3, r0
 8002a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a8e:	bfac      	ite	ge
 8002a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002a92:	81a3      	strhlt	r3, [r4, #12]
 8002a94:	bd10      	pop	{r4, pc}

08002a96 <__swrite>:
 8002a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a9a:	461f      	mov	r7, r3
 8002a9c:	898b      	ldrh	r3, [r1, #12]
 8002a9e:	05db      	lsls	r3, r3, #23
 8002aa0:	4605      	mov	r5, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	4616      	mov	r6, r2
 8002aa6:	d505      	bpl.n	8002ab4 <__swrite+0x1e>
 8002aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aac:	2302      	movs	r3, #2
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f000 f8d0 	bl	8002c54 <_lseek_r>
 8002ab4:	89a3      	ldrh	r3, [r4, #12]
 8002ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002abe:	81a3      	strh	r3, [r4, #12]
 8002ac0:	4632      	mov	r2, r6
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aca:	f000 b8e7 	b.w	8002c9c <_write_r>

08002ace <__sseek>:
 8002ace:	b510      	push	{r4, lr}
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad6:	f000 f8bd 	bl	8002c54 <_lseek_r>
 8002ada:	1c43      	adds	r3, r0, #1
 8002adc:	89a3      	ldrh	r3, [r4, #12]
 8002ade:	bf15      	itete	ne
 8002ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002aea:	81a3      	strheq	r3, [r4, #12]
 8002aec:	bf18      	it	ne
 8002aee:	81a3      	strhne	r3, [r4, #12]
 8002af0:	bd10      	pop	{r4, pc}

08002af2 <__sclose>:
 8002af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002af6:	f000 b89d 	b.w	8002c34 <_close_r>

08002afa <__swbuf_r>:
 8002afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afc:	460e      	mov	r6, r1
 8002afe:	4614      	mov	r4, r2
 8002b00:	4605      	mov	r5, r0
 8002b02:	b118      	cbz	r0, 8002b0c <__swbuf_r+0x12>
 8002b04:	6a03      	ldr	r3, [r0, #32]
 8002b06:	b90b      	cbnz	r3, 8002b0c <__swbuf_r+0x12>
 8002b08:	f7ff ff0e 	bl	8002928 <__sinit>
 8002b0c:	69a3      	ldr	r3, [r4, #24]
 8002b0e:	60a3      	str	r3, [r4, #8]
 8002b10:	89a3      	ldrh	r3, [r4, #12]
 8002b12:	071a      	lsls	r2, r3, #28
 8002b14:	d501      	bpl.n	8002b1a <__swbuf_r+0x20>
 8002b16:	6923      	ldr	r3, [r4, #16]
 8002b18:	b943      	cbnz	r3, 8002b2c <__swbuf_r+0x32>
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f000 f82b 	bl	8002b78 <__swsetup_r>
 8002b22:	b118      	cbz	r0, 8002b2c <__swbuf_r+0x32>
 8002b24:	f04f 37ff 	mov.w	r7, #4294967295
 8002b28:	4638      	mov	r0, r7
 8002b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	6922      	ldr	r2, [r4, #16]
 8002b30:	1a98      	subs	r0, r3, r2
 8002b32:	6963      	ldr	r3, [r4, #20]
 8002b34:	b2f6      	uxtb	r6, r6
 8002b36:	4283      	cmp	r3, r0
 8002b38:	4637      	mov	r7, r6
 8002b3a:	dc05      	bgt.n	8002b48 <__swbuf_r+0x4e>
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	4628      	mov	r0, r5
 8002b40:	f000 fd36 	bl	80035b0 <_fflush_r>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d1ed      	bne.n	8002b24 <__swbuf_r+0x2a>
 8002b48:	68a3      	ldr	r3, [r4, #8]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	60a3      	str	r3, [r4, #8]
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	6022      	str	r2, [r4, #0]
 8002b54:	701e      	strb	r6, [r3, #0]
 8002b56:	6962      	ldr	r2, [r4, #20]
 8002b58:	1c43      	adds	r3, r0, #1
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d004      	beq.n	8002b68 <__swbuf_r+0x6e>
 8002b5e:	89a3      	ldrh	r3, [r4, #12]
 8002b60:	07db      	lsls	r3, r3, #31
 8002b62:	d5e1      	bpl.n	8002b28 <__swbuf_r+0x2e>
 8002b64:	2e0a      	cmp	r6, #10
 8002b66:	d1df      	bne.n	8002b28 <__swbuf_r+0x2e>
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f000 fd20 	bl	80035b0 <_fflush_r>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d0d9      	beq.n	8002b28 <__swbuf_r+0x2e>
 8002b74:	e7d6      	b.n	8002b24 <__swbuf_r+0x2a>
	...

08002b78 <__swsetup_r>:
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <__swsetup_r+0xa8>)
 8002b7c:	4605      	mov	r5, r0
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	460c      	mov	r4, r1
 8002b82:	b118      	cbz	r0, 8002b8c <__swsetup_r+0x14>
 8002b84:	6a03      	ldr	r3, [r0, #32]
 8002b86:	b90b      	cbnz	r3, 8002b8c <__swsetup_r+0x14>
 8002b88:	f7ff fece 	bl	8002928 <__sinit>
 8002b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b90:	0719      	lsls	r1, r3, #28
 8002b92:	d422      	bmi.n	8002bda <__swsetup_r+0x62>
 8002b94:	06da      	lsls	r2, r3, #27
 8002b96:	d407      	bmi.n	8002ba8 <__swsetup_r+0x30>
 8002b98:	2209      	movs	r2, #9
 8002b9a:	602a      	str	r2, [r5, #0]
 8002b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ba0:	81a3      	strh	r3, [r4, #12]
 8002ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba6:	e033      	b.n	8002c10 <__swsetup_r+0x98>
 8002ba8:	0758      	lsls	r0, r3, #29
 8002baa:	d512      	bpl.n	8002bd2 <__swsetup_r+0x5a>
 8002bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002bae:	b141      	cbz	r1, 8002bc2 <__swsetup_r+0x4a>
 8002bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002bb4:	4299      	cmp	r1, r3
 8002bb6:	d002      	beq.n	8002bbe <__swsetup_r+0x46>
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f000 f8af 	bl	8002d1c <_free_r>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002bc2:	89a3      	ldrh	r3, [r4, #12]
 8002bc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002bc8:	81a3      	strh	r3, [r4, #12]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	6063      	str	r3, [r4, #4]
 8002bce:	6923      	ldr	r3, [r4, #16]
 8002bd0:	6023      	str	r3, [r4, #0]
 8002bd2:	89a3      	ldrh	r3, [r4, #12]
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	81a3      	strh	r3, [r4, #12]
 8002bda:	6923      	ldr	r3, [r4, #16]
 8002bdc:	b94b      	cbnz	r3, 8002bf2 <__swsetup_r+0x7a>
 8002bde:	89a3      	ldrh	r3, [r4, #12]
 8002be0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be8:	d003      	beq.n	8002bf2 <__swsetup_r+0x7a>
 8002bea:	4621      	mov	r1, r4
 8002bec:	4628      	mov	r0, r5
 8002bee:	f000 fd2d 	bl	800364c <__smakebuf_r>
 8002bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bf6:	f013 0201 	ands.w	r2, r3, #1
 8002bfa:	d00a      	beq.n	8002c12 <__swsetup_r+0x9a>
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	60a2      	str	r2, [r4, #8]
 8002c00:	6962      	ldr	r2, [r4, #20]
 8002c02:	4252      	negs	r2, r2
 8002c04:	61a2      	str	r2, [r4, #24]
 8002c06:	6922      	ldr	r2, [r4, #16]
 8002c08:	b942      	cbnz	r2, 8002c1c <__swsetup_r+0xa4>
 8002c0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002c0e:	d1c5      	bne.n	8002b9c <__swsetup_r+0x24>
 8002c10:	bd38      	pop	{r3, r4, r5, pc}
 8002c12:	0799      	lsls	r1, r3, #30
 8002c14:	bf58      	it	pl
 8002c16:	6962      	ldrpl	r2, [r4, #20]
 8002c18:	60a2      	str	r2, [r4, #8]
 8002c1a:	e7f4      	b.n	8002c06 <__swsetup_r+0x8e>
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e7f7      	b.n	8002c10 <__swsetup_r+0x98>
 8002c20:	20000018 	.word	0x20000018

08002c24 <memset>:
 8002c24:	4402      	add	r2, r0
 8002c26:	4603      	mov	r3, r0
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <memset+0xa>
 8002c2c:	4770      	bx	lr
 8002c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c32:	e7f9      	b.n	8002c28 <memset+0x4>

08002c34 <_close_r>:
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	4d06      	ldr	r5, [pc, #24]	@ (8002c50 <_close_r+0x1c>)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	602b      	str	r3, [r5, #0]
 8002c40:	f7fd ff7d 	bl	8000b3e <_close>
 8002c44:	1c43      	adds	r3, r0, #1
 8002c46:	d102      	bne.n	8002c4e <_close_r+0x1a>
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	b103      	cbz	r3, 8002c4e <_close_r+0x1a>
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	bd38      	pop	{r3, r4, r5, pc}
 8002c50:	200001f0 	.word	0x200001f0

08002c54 <_lseek_r>:
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	4d07      	ldr	r5, [pc, #28]	@ (8002c74 <_lseek_r+0x20>)
 8002c58:	4604      	mov	r4, r0
 8002c5a:	4608      	mov	r0, r1
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	2200      	movs	r2, #0
 8002c60:	602a      	str	r2, [r5, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f7fd ff92 	bl	8000b8c <_lseek>
 8002c68:	1c43      	adds	r3, r0, #1
 8002c6a:	d102      	bne.n	8002c72 <_lseek_r+0x1e>
 8002c6c:	682b      	ldr	r3, [r5, #0]
 8002c6e:	b103      	cbz	r3, 8002c72 <_lseek_r+0x1e>
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	bd38      	pop	{r3, r4, r5, pc}
 8002c74:	200001f0 	.word	0x200001f0

08002c78 <_read_r>:
 8002c78:	b538      	push	{r3, r4, r5, lr}
 8002c7a:	4d07      	ldr	r5, [pc, #28]	@ (8002c98 <_read_r+0x20>)
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	4608      	mov	r0, r1
 8002c80:	4611      	mov	r1, r2
 8002c82:	2200      	movs	r2, #0
 8002c84:	602a      	str	r2, [r5, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f7fd ff20 	bl	8000acc <_read>
 8002c8c:	1c43      	adds	r3, r0, #1
 8002c8e:	d102      	bne.n	8002c96 <_read_r+0x1e>
 8002c90:	682b      	ldr	r3, [r5, #0]
 8002c92:	b103      	cbz	r3, 8002c96 <_read_r+0x1e>
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	200001f0 	.word	0x200001f0

08002c9c <_write_r>:
 8002c9c:	b538      	push	{r3, r4, r5, lr}
 8002c9e:	4d07      	ldr	r5, [pc, #28]	@ (8002cbc <_write_r+0x20>)
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	4608      	mov	r0, r1
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	602a      	str	r2, [r5, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f7fd ff2b 	bl	8000b06 <_write>
 8002cb0:	1c43      	adds	r3, r0, #1
 8002cb2:	d102      	bne.n	8002cba <_write_r+0x1e>
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	b103      	cbz	r3, 8002cba <_write_r+0x1e>
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	bd38      	pop	{r3, r4, r5, pc}
 8002cbc:	200001f0 	.word	0x200001f0

08002cc0 <__errno>:
 8002cc0:	4b01      	ldr	r3, [pc, #4]	@ (8002cc8 <__errno+0x8>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000018 	.word	0x20000018

08002ccc <__libc_init_array>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4d0d      	ldr	r5, [pc, #52]	@ (8002d04 <__libc_init_array+0x38>)
 8002cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8002d08 <__libc_init_array+0x3c>)
 8002cd2:	1b64      	subs	r4, r4, r5
 8002cd4:	10a4      	asrs	r4, r4, #2
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	42a6      	cmp	r6, r4
 8002cda:	d109      	bne.n	8002cf0 <__libc_init_array+0x24>
 8002cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8002d0c <__libc_init_array+0x40>)
 8002cde:	4c0c      	ldr	r4, [pc, #48]	@ (8002d10 <__libc_init_array+0x44>)
 8002ce0:	f000 fd22 	bl	8003728 <_init>
 8002ce4:	1b64      	subs	r4, r4, r5
 8002ce6:	10a4      	asrs	r4, r4, #2
 8002ce8:	2600      	movs	r6, #0
 8002cea:	42a6      	cmp	r6, r4
 8002cec:	d105      	bne.n	8002cfa <__libc_init_array+0x2e>
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf4:	4798      	blx	r3
 8002cf6:	3601      	adds	r6, #1
 8002cf8:	e7ee      	b.n	8002cd8 <__libc_init_array+0xc>
 8002cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfe:	4798      	blx	r3
 8002d00:	3601      	adds	r6, #1
 8002d02:	e7f2      	b.n	8002cea <__libc_init_array+0x1e>
 8002d04:	0800380c 	.word	0x0800380c
 8002d08:	0800380c 	.word	0x0800380c
 8002d0c:	0800380c 	.word	0x0800380c
 8002d10:	08003810 	.word	0x08003810

08002d14 <__retarget_lock_init_recursive>:
 8002d14:	4770      	bx	lr

08002d16 <__retarget_lock_acquire_recursive>:
 8002d16:	4770      	bx	lr

08002d18 <__retarget_lock_release_recursive>:
 8002d18:	4770      	bx	lr
	...

08002d1c <_free_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4605      	mov	r5, r0
 8002d20:	2900      	cmp	r1, #0
 8002d22:	d041      	beq.n	8002da8 <_free_r+0x8c>
 8002d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d28:	1f0c      	subs	r4, r1, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bfb8      	it	lt
 8002d2e:	18e4      	addlt	r4, r4, r3
 8002d30:	f000 f8e0 	bl	8002ef4 <__malloc_lock>
 8002d34:	4a1d      	ldr	r2, [pc, #116]	@ (8002dac <_free_r+0x90>)
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	b933      	cbnz	r3, 8002d48 <_free_r+0x2c>
 8002d3a:	6063      	str	r3, [r4, #4]
 8002d3c:	6014      	str	r4, [r2, #0]
 8002d3e:	4628      	mov	r0, r5
 8002d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d44:	f000 b8dc 	b.w	8002f00 <__malloc_unlock>
 8002d48:	42a3      	cmp	r3, r4
 8002d4a:	d908      	bls.n	8002d5e <_free_r+0x42>
 8002d4c:	6820      	ldr	r0, [r4, #0]
 8002d4e:	1821      	adds	r1, r4, r0
 8002d50:	428b      	cmp	r3, r1
 8002d52:	bf01      	itttt	eq
 8002d54:	6819      	ldreq	r1, [r3, #0]
 8002d56:	685b      	ldreq	r3, [r3, #4]
 8002d58:	1809      	addeq	r1, r1, r0
 8002d5a:	6021      	streq	r1, [r4, #0]
 8002d5c:	e7ed      	b.n	8002d3a <_free_r+0x1e>
 8002d5e:	461a      	mov	r2, r3
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	b10b      	cbz	r3, 8002d68 <_free_r+0x4c>
 8002d64:	42a3      	cmp	r3, r4
 8002d66:	d9fa      	bls.n	8002d5e <_free_r+0x42>
 8002d68:	6811      	ldr	r1, [r2, #0]
 8002d6a:	1850      	adds	r0, r2, r1
 8002d6c:	42a0      	cmp	r0, r4
 8002d6e:	d10b      	bne.n	8002d88 <_free_r+0x6c>
 8002d70:	6820      	ldr	r0, [r4, #0]
 8002d72:	4401      	add	r1, r0
 8002d74:	1850      	adds	r0, r2, r1
 8002d76:	4283      	cmp	r3, r0
 8002d78:	6011      	str	r1, [r2, #0]
 8002d7a:	d1e0      	bne.n	8002d3e <_free_r+0x22>
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	6053      	str	r3, [r2, #4]
 8002d82:	4408      	add	r0, r1
 8002d84:	6010      	str	r0, [r2, #0]
 8002d86:	e7da      	b.n	8002d3e <_free_r+0x22>
 8002d88:	d902      	bls.n	8002d90 <_free_r+0x74>
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	602b      	str	r3, [r5, #0]
 8002d8e:	e7d6      	b.n	8002d3e <_free_r+0x22>
 8002d90:	6820      	ldr	r0, [r4, #0]
 8002d92:	1821      	adds	r1, r4, r0
 8002d94:	428b      	cmp	r3, r1
 8002d96:	bf04      	itt	eq
 8002d98:	6819      	ldreq	r1, [r3, #0]
 8002d9a:	685b      	ldreq	r3, [r3, #4]
 8002d9c:	6063      	str	r3, [r4, #4]
 8002d9e:	bf04      	itt	eq
 8002da0:	1809      	addeq	r1, r1, r0
 8002da2:	6021      	streq	r1, [r4, #0]
 8002da4:	6054      	str	r4, [r2, #4]
 8002da6:	e7ca      	b.n	8002d3e <_free_r+0x22>
 8002da8:	bd38      	pop	{r3, r4, r5, pc}
 8002daa:	bf00      	nop
 8002dac:	200001fc 	.word	0x200001fc

08002db0 <sbrk_aligned>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	4e0f      	ldr	r6, [pc, #60]	@ (8002df0 <sbrk_aligned+0x40>)
 8002db4:	460c      	mov	r4, r1
 8002db6:	6831      	ldr	r1, [r6, #0]
 8002db8:	4605      	mov	r5, r0
 8002dba:	b911      	cbnz	r1, 8002dc2 <sbrk_aligned+0x12>
 8002dbc:	f000 fca4 	bl	8003708 <_sbrk_r>
 8002dc0:	6030      	str	r0, [r6, #0]
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f000 fc9f 	bl	8003708 <_sbrk_r>
 8002dca:	1c43      	adds	r3, r0, #1
 8002dcc:	d103      	bne.n	8002dd6 <sbrk_aligned+0x26>
 8002dce:	f04f 34ff 	mov.w	r4, #4294967295
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
 8002dd6:	1cc4      	adds	r4, r0, #3
 8002dd8:	f024 0403 	bic.w	r4, r4, #3
 8002ddc:	42a0      	cmp	r0, r4
 8002dde:	d0f8      	beq.n	8002dd2 <sbrk_aligned+0x22>
 8002de0:	1a21      	subs	r1, r4, r0
 8002de2:	4628      	mov	r0, r5
 8002de4:	f000 fc90 	bl	8003708 <_sbrk_r>
 8002de8:	3001      	adds	r0, #1
 8002dea:	d1f2      	bne.n	8002dd2 <sbrk_aligned+0x22>
 8002dec:	e7ef      	b.n	8002dce <sbrk_aligned+0x1e>
 8002dee:	bf00      	nop
 8002df0:	200001f8 	.word	0x200001f8

08002df4 <_malloc_r>:
 8002df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df8:	1ccd      	adds	r5, r1, #3
 8002dfa:	f025 0503 	bic.w	r5, r5, #3
 8002dfe:	3508      	adds	r5, #8
 8002e00:	2d0c      	cmp	r5, #12
 8002e02:	bf38      	it	cc
 8002e04:	250c      	movcc	r5, #12
 8002e06:	2d00      	cmp	r5, #0
 8002e08:	4606      	mov	r6, r0
 8002e0a:	db01      	blt.n	8002e10 <_malloc_r+0x1c>
 8002e0c:	42a9      	cmp	r1, r5
 8002e0e:	d904      	bls.n	8002e1a <_malloc_r+0x26>
 8002e10:	230c      	movs	r3, #12
 8002e12:	6033      	str	r3, [r6, #0]
 8002e14:	2000      	movs	r0, #0
 8002e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ef0 <_malloc_r+0xfc>
 8002e1e:	f000 f869 	bl	8002ef4 <__malloc_lock>
 8002e22:	f8d8 3000 	ldr.w	r3, [r8]
 8002e26:	461c      	mov	r4, r3
 8002e28:	bb44      	cbnz	r4, 8002e7c <_malloc_r+0x88>
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	f7ff ffbf 	bl	8002db0 <sbrk_aligned>
 8002e32:	1c43      	adds	r3, r0, #1
 8002e34:	4604      	mov	r4, r0
 8002e36:	d158      	bne.n	8002eea <_malloc_r+0xf6>
 8002e38:	f8d8 4000 	ldr.w	r4, [r8]
 8002e3c:	4627      	mov	r7, r4
 8002e3e:	2f00      	cmp	r7, #0
 8002e40:	d143      	bne.n	8002eca <_malloc_r+0xd6>
 8002e42:	2c00      	cmp	r4, #0
 8002e44:	d04b      	beq.n	8002ede <_malloc_r+0xea>
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	4639      	mov	r1, r7
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	eb04 0903 	add.w	r9, r4, r3
 8002e50:	f000 fc5a 	bl	8003708 <_sbrk_r>
 8002e54:	4581      	cmp	r9, r0
 8002e56:	d142      	bne.n	8002ede <_malloc_r+0xea>
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	1a6d      	subs	r5, r5, r1
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	4630      	mov	r0, r6
 8002e60:	f7ff ffa6 	bl	8002db0 <sbrk_aligned>
 8002e64:	3001      	adds	r0, #1
 8002e66:	d03a      	beq.n	8002ede <_malloc_r+0xea>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	442b      	add	r3, r5
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	bb62      	cbnz	r2, 8002ed0 <_malloc_r+0xdc>
 8002e76:	f8c8 7000 	str.w	r7, [r8]
 8002e7a:	e00f      	b.n	8002e9c <_malloc_r+0xa8>
 8002e7c:	6822      	ldr	r2, [r4, #0]
 8002e7e:	1b52      	subs	r2, r2, r5
 8002e80:	d420      	bmi.n	8002ec4 <_malloc_r+0xd0>
 8002e82:	2a0b      	cmp	r2, #11
 8002e84:	d917      	bls.n	8002eb6 <_malloc_r+0xc2>
 8002e86:	1961      	adds	r1, r4, r5
 8002e88:	42a3      	cmp	r3, r4
 8002e8a:	6025      	str	r5, [r4, #0]
 8002e8c:	bf18      	it	ne
 8002e8e:	6059      	strne	r1, [r3, #4]
 8002e90:	6863      	ldr	r3, [r4, #4]
 8002e92:	bf08      	it	eq
 8002e94:	f8c8 1000 	streq.w	r1, [r8]
 8002e98:	5162      	str	r2, [r4, r5]
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f000 f82f 	bl	8002f00 <__malloc_unlock>
 8002ea2:	f104 000b 	add.w	r0, r4, #11
 8002ea6:	1d23      	adds	r3, r4, #4
 8002ea8:	f020 0007 	bic.w	r0, r0, #7
 8002eac:	1ac2      	subs	r2, r0, r3
 8002eae:	bf1c      	itt	ne
 8002eb0:	1a1b      	subne	r3, r3, r0
 8002eb2:	50a3      	strne	r3, [r4, r2]
 8002eb4:	e7af      	b.n	8002e16 <_malloc_r+0x22>
 8002eb6:	6862      	ldr	r2, [r4, #4]
 8002eb8:	42a3      	cmp	r3, r4
 8002eba:	bf0c      	ite	eq
 8002ebc:	f8c8 2000 	streq.w	r2, [r8]
 8002ec0:	605a      	strne	r2, [r3, #4]
 8002ec2:	e7eb      	b.n	8002e9c <_malloc_r+0xa8>
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	6864      	ldr	r4, [r4, #4]
 8002ec8:	e7ae      	b.n	8002e28 <_malloc_r+0x34>
 8002eca:	463c      	mov	r4, r7
 8002ecc:	687f      	ldr	r7, [r7, #4]
 8002ece:	e7b6      	b.n	8002e3e <_malloc_r+0x4a>
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	42a3      	cmp	r3, r4
 8002ed6:	d1fb      	bne.n	8002ed0 <_malloc_r+0xdc>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6053      	str	r3, [r2, #4]
 8002edc:	e7de      	b.n	8002e9c <_malloc_r+0xa8>
 8002ede:	230c      	movs	r3, #12
 8002ee0:	6033      	str	r3, [r6, #0]
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f000 f80c 	bl	8002f00 <__malloc_unlock>
 8002ee8:	e794      	b.n	8002e14 <_malloc_r+0x20>
 8002eea:	6005      	str	r5, [r0, #0]
 8002eec:	e7d6      	b.n	8002e9c <_malloc_r+0xa8>
 8002eee:	bf00      	nop
 8002ef0:	200001fc 	.word	0x200001fc

08002ef4 <__malloc_lock>:
 8002ef4:	4801      	ldr	r0, [pc, #4]	@ (8002efc <__malloc_lock+0x8>)
 8002ef6:	f7ff bf0e 	b.w	8002d16 <__retarget_lock_acquire_recursive>
 8002efa:	bf00      	nop
 8002efc:	200001f4 	.word	0x200001f4

08002f00 <__malloc_unlock>:
 8002f00:	4801      	ldr	r0, [pc, #4]	@ (8002f08 <__malloc_unlock+0x8>)
 8002f02:	f7ff bf09 	b.w	8002d18 <__retarget_lock_release_recursive>
 8002f06:	bf00      	nop
 8002f08:	200001f4 	.word	0x200001f4

08002f0c <__sfputc_r>:
 8002f0c:	6893      	ldr	r3, [r2, #8]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	b410      	push	{r4}
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	da08      	bge.n	8002f2a <__sfputc_r+0x1e>
 8002f18:	6994      	ldr	r4, [r2, #24]
 8002f1a:	42a3      	cmp	r3, r4
 8002f1c:	db01      	blt.n	8002f22 <__sfputc_r+0x16>
 8002f1e:	290a      	cmp	r1, #10
 8002f20:	d103      	bne.n	8002f2a <__sfputc_r+0x1e>
 8002f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f26:	f7ff bde8 	b.w	8002afa <__swbuf_r>
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	1c58      	adds	r0, r3, #1
 8002f2e:	6010      	str	r0, [r2, #0]
 8002f30:	7019      	strb	r1, [r3, #0]
 8002f32:	4608      	mov	r0, r1
 8002f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <__sfputs_r>:
 8002f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3c:	4606      	mov	r6, r0
 8002f3e:	460f      	mov	r7, r1
 8002f40:	4614      	mov	r4, r2
 8002f42:	18d5      	adds	r5, r2, r3
 8002f44:	42ac      	cmp	r4, r5
 8002f46:	d101      	bne.n	8002f4c <__sfputs_r+0x12>
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e007      	b.n	8002f5c <__sfputs_r+0x22>
 8002f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f50:	463a      	mov	r2, r7
 8002f52:	4630      	mov	r0, r6
 8002f54:	f7ff ffda 	bl	8002f0c <__sfputc_r>
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	d1f3      	bne.n	8002f44 <__sfputs_r+0xa>
 8002f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f60 <_vfiprintf_r>:
 8002f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f64:	460d      	mov	r5, r1
 8002f66:	b09d      	sub	sp, #116	@ 0x74
 8002f68:	4614      	mov	r4, r2
 8002f6a:	4698      	mov	r8, r3
 8002f6c:	4606      	mov	r6, r0
 8002f6e:	b118      	cbz	r0, 8002f78 <_vfiprintf_r+0x18>
 8002f70:	6a03      	ldr	r3, [r0, #32]
 8002f72:	b90b      	cbnz	r3, 8002f78 <_vfiprintf_r+0x18>
 8002f74:	f7ff fcd8 	bl	8002928 <__sinit>
 8002f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f7a:	07d9      	lsls	r1, r3, #31
 8002f7c:	d405      	bmi.n	8002f8a <_vfiprintf_r+0x2a>
 8002f7e:	89ab      	ldrh	r3, [r5, #12]
 8002f80:	059a      	lsls	r2, r3, #22
 8002f82:	d402      	bmi.n	8002f8a <_vfiprintf_r+0x2a>
 8002f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f86:	f7ff fec6 	bl	8002d16 <__retarget_lock_acquire_recursive>
 8002f8a:	89ab      	ldrh	r3, [r5, #12]
 8002f8c:	071b      	lsls	r3, r3, #28
 8002f8e:	d501      	bpl.n	8002f94 <_vfiprintf_r+0x34>
 8002f90:	692b      	ldr	r3, [r5, #16]
 8002f92:	b99b      	cbnz	r3, 8002fbc <_vfiprintf_r+0x5c>
 8002f94:	4629      	mov	r1, r5
 8002f96:	4630      	mov	r0, r6
 8002f98:	f7ff fdee 	bl	8002b78 <__swsetup_r>
 8002f9c:	b170      	cbz	r0, 8002fbc <_vfiprintf_r+0x5c>
 8002f9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fa0:	07dc      	lsls	r4, r3, #31
 8002fa2:	d504      	bpl.n	8002fae <_vfiprintf_r+0x4e>
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	b01d      	add	sp, #116	@ 0x74
 8002faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fae:	89ab      	ldrh	r3, [r5, #12]
 8002fb0:	0598      	lsls	r0, r3, #22
 8002fb2:	d4f7      	bmi.n	8002fa4 <_vfiprintf_r+0x44>
 8002fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fb6:	f7ff feaf 	bl	8002d18 <__retarget_lock_release_recursive>
 8002fba:	e7f3      	b.n	8002fa4 <_vfiprintf_r+0x44>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fca:	2330      	movs	r3, #48	@ 0x30
 8002fcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800317c <_vfiprintf_r+0x21c>
 8002fd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002fd4:	f04f 0901 	mov.w	r9, #1
 8002fd8:	4623      	mov	r3, r4
 8002fda:	469a      	mov	sl, r3
 8002fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fe0:	b10a      	cbz	r2, 8002fe6 <_vfiprintf_r+0x86>
 8002fe2:	2a25      	cmp	r2, #37	@ 0x25
 8002fe4:	d1f9      	bne.n	8002fda <_vfiprintf_r+0x7a>
 8002fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8002fea:	d00b      	beq.n	8003004 <_vfiprintf_r+0xa4>
 8002fec:	465b      	mov	r3, fp
 8002fee:	4622      	mov	r2, r4
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f7ff ffa1 	bl	8002f3a <__sfputs_r>
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	f000 80a7 	beq.w	800314c <_vfiprintf_r+0x1ec>
 8002ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003000:	445a      	add	r2, fp
 8003002:	9209      	str	r2, [sp, #36]	@ 0x24
 8003004:	f89a 3000 	ldrb.w	r3, [sl]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 809f 	beq.w	800314c <_vfiprintf_r+0x1ec>
 800300e:	2300      	movs	r3, #0
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003018:	f10a 0a01 	add.w	sl, sl, #1
 800301c:	9304      	str	r3, [sp, #16]
 800301e:	9307      	str	r3, [sp, #28]
 8003020:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003024:	931a      	str	r3, [sp, #104]	@ 0x68
 8003026:	4654      	mov	r4, sl
 8003028:	2205      	movs	r2, #5
 800302a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800302e:	4853      	ldr	r0, [pc, #332]	@ (800317c <_vfiprintf_r+0x21c>)
 8003030:	f7fd f8ce 	bl	80001d0 <memchr>
 8003034:	9a04      	ldr	r2, [sp, #16]
 8003036:	b9d8      	cbnz	r0, 8003070 <_vfiprintf_r+0x110>
 8003038:	06d1      	lsls	r1, r2, #27
 800303a:	bf44      	itt	mi
 800303c:	2320      	movmi	r3, #32
 800303e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003042:	0713      	lsls	r3, r2, #28
 8003044:	bf44      	itt	mi
 8003046:	232b      	movmi	r3, #43	@ 0x2b
 8003048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800304c:	f89a 3000 	ldrb.w	r3, [sl]
 8003050:	2b2a      	cmp	r3, #42	@ 0x2a
 8003052:	d015      	beq.n	8003080 <_vfiprintf_r+0x120>
 8003054:	9a07      	ldr	r2, [sp, #28]
 8003056:	4654      	mov	r4, sl
 8003058:	2000      	movs	r0, #0
 800305a:	f04f 0c0a 	mov.w	ip, #10
 800305e:	4621      	mov	r1, r4
 8003060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003064:	3b30      	subs	r3, #48	@ 0x30
 8003066:	2b09      	cmp	r3, #9
 8003068:	d94b      	bls.n	8003102 <_vfiprintf_r+0x1a2>
 800306a:	b1b0      	cbz	r0, 800309a <_vfiprintf_r+0x13a>
 800306c:	9207      	str	r2, [sp, #28]
 800306e:	e014      	b.n	800309a <_vfiprintf_r+0x13a>
 8003070:	eba0 0308 	sub.w	r3, r0, r8
 8003074:	fa09 f303 	lsl.w	r3, r9, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	9304      	str	r3, [sp, #16]
 800307c:	46a2      	mov	sl, r4
 800307e:	e7d2      	b.n	8003026 <_vfiprintf_r+0xc6>
 8003080:	9b03      	ldr	r3, [sp, #12]
 8003082:	1d19      	adds	r1, r3, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	9103      	str	r1, [sp, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	bfbb      	ittet	lt
 800308c:	425b      	neglt	r3, r3
 800308e:	f042 0202 	orrlt.w	r2, r2, #2
 8003092:	9307      	strge	r3, [sp, #28]
 8003094:	9307      	strlt	r3, [sp, #28]
 8003096:	bfb8      	it	lt
 8003098:	9204      	strlt	r2, [sp, #16]
 800309a:	7823      	ldrb	r3, [r4, #0]
 800309c:	2b2e      	cmp	r3, #46	@ 0x2e
 800309e:	d10a      	bne.n	80030b6 <_vfiprintf_r+0x156>
 80030a0:	7863      	ldrb	r3, [r4, #1]
 80030a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80030a4:	d132      	bne.n	800310c <_vfiprintf_r+0x1ac>
 80030a6:	9b03      	ldr	r3, [sp, #12]
 80030a8:	1d1a      	adds	r2, r3, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	9203      	str	r2, [sp, #12]
 80030ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030b2:	3402      	adds	r4, #2
 80030b4:	9305      	str	r3, [sp, #20]
 80030b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800318c <_vfiprintf_r+0x22c>
 80030ba:	7821      	ldrb	r1, [r4, #0]
 80030bc:	2203      	movs	r2, #3
 80030be:	4650      	mov	r0, sl
 80030c0:	f7fd f886 	bl	80001d0 <memchr>
 80030c4:	b138      	cbz	r0, 80030d6 <_vfiprintf_r+0x176>
 80030c6:	9b04      	ldr	r3, [sp, #16]
 80030c8:	eba0 000a 	sub.w	r0, r0, sl
 80030cc:	2240      	movs	r2, #64	@ 0x40
 80030ce:	4082      	lsls	r2, r0
 80030d0:	4313      	orrs	r3, r2
 80030d2:	3401      	adds	r4, #1
 80030d4:	9304      	str	r3, [sp, #16]
 80030d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030da:	4829      	ldr	r0, [pc, #164]	@ (8003180 <_vfiprintf_r+0x220>)
 80030dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80030e0:	2206      	movs	r2, #6
 80030e2:	f7fd f875 	bl	80001d0 <memchr>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d03f      	beq.n	800316a <_vfiprintf_r+0x20a>
 80030ea:	4b26      	ldr	r3, [pc, #152]	@ (8003184 <_vfiprintf_r+0x224>)
 80030ec:	bb1b      	cbnz	r3, 8003136 <_vfiprintf_r+0x1d6>
 80030ee:	9b03      	ldr	r3, [sp, #12]
 80030f0:	3307      	adds	r3, #7
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	3308      	adds	r3, #8
 80030f8:	9303      	str	r3, [sp, #12]
 80030fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030fc:	443b      	add	r3, r7
 80030fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003100:	e76a      	b.n	8002fd8 <_vfiprintf_r+0x78>
 8003102:	fb0c 3202 	mla	r2, ip, r2, r3
 8003106:	460c      	mov	r4, r1
 8003108:	2001      	movs	r0, #1
 800310a:	e7a8      	b.n	800305e <_vfiprintf_r+0xfe>
 800310c:	2300      	movs	r3, #0
 800310e:	3401      	adds	r4, #1
 8003110:	9305      	str	r3, [sp, #20]
 8003112:	4619      	mov	r1, r3
 8003114:	f04f 0c0a 	mov.w	ip, #10
 8003118:	4620      	mov	r0, r4
 800311a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800311e:	3a30      	subs	r2, #48	@ 0x30
 8003120:	2a09      	cmp	r2, #9
 8003122:	d903      	bls.n	800312c <_vfiprintf_r+0x1cc>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0c6      	beq.n	80030b6 <_vfiprintf_r+0x156>
 8003128:	9105      	str	r1, [sp, #20]
 800312a:	e7c4      	b.n	80030b6 <_vfiprintf_r+0x156>
 800312c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003130:	4604      	mov	r4, r0
 8003132:	2301      	movs	r3, #1
 8003134:	e7f0      	b.n	8003118 <_vfiprintf_r+0x1b8>
 8003136:	ab03      	add	r3, sp, #12
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	462a      	mov	r2, r5
 800313c:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <_vfiprintf_r+0x228>)
 800313e:	a904      	add	r1, sp, #16
 8003140:	4630      	mov	r0, r6
 8003142:	f3af 8000 	nop.w
 8003146:	4607      	mov	r7, r0
 8003148:	1c78      	adds	r0, r7, #1
 800314a:	d1d6      	bne.n	80030fa <_vfiprintf_r+0x19a>
 800314c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800314e:	07d9      	lsls	r1, r3, #31
 8003150:	d405      	bmi.n	800315e <_vfiprintf_r+0x1fe>
 8003152:	89ab      	ldrh	r3, [r5, #12]
 8003154:	059a      	lsls	r2, r3, #22
 8003156:	d402      	bmi.n	800315e <_vfiprintf_r+0x1fe>
 8003158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800315a:	f7ff fddd 	bl	8002d18 <__retarget_lock_release_recursive>
 800315e:	89ab      	ldrh	r3, [r5, #12]
 8003160:	065b      	lsls	r3, r3, #25
 8003162:	f53f af1f 	bmi.w	8002fa4 <_vfiprintf_r+0x44>
 8003166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003168:	e71e      	b.n	8002fa8 <_vfiprintf_r+0x48>
 800316a:	ab03      	add	r3, sp, #12
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	462a      	mov	r2, r5
 8003170:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <_vfiprintf_r+0x228>)
 8003172:	a904      	add	r1, sp, #16
 8003174:	4630      	mov	r0, r6
 8003176:	f000 f879 	bl	800326c <_printf_i>
 800317a:	e7e4      	b.n	8003146 <_vfiprintf_r+0x1e6>
 800317c:	080037d0 	.word	0x080037d0
 8003180:	080037da 	.word	0x080037da
 8003184:	00000000 	.word	0x00000000
 8003188:	08002f3b 	.word	0x08002f3b
 800318c:	080037d6 	.word	0x080037d6

08003190 <_printf_common>:
 8003190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003194:	4616      	mov	r6, r2
 8003196:	4698      	mov	r8, r3
 8003198:	688a      	ldr	r2, [r1, #8]
 800319a:	690b      	ldr	r3, [r1, #16]
 800319c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031a0:	4293      	cmp	r3, r2
 80031a2:	bfb8      	it	lt
 80031a4:	4613      	movlt	r3, r2
 80031a6:	6033      	str	r3, [r6, #0]
 80031a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031ac:	4607      	mov	r7, r0
 80031ae:	460c      	mov	r4, r1
 80031b0:	b10a      	cbz	r2, 80031b6 <_printf_common+0x26>
 80031b2:	3301      	adds	r3, #1
 80031b4:	6033      	str	r3, [r6, #0]
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	0699      	lsls	r1, r3, #26
 80031ba:	bf42      	ittt	mi
 80031bc:	6833      	ldrmi	r3, [r6, #0]
 80031be:	3302      	addmi	r3, #2
 80031c0:	6033      	strmi	r3, [r6, #0]
 80031c2:	6825      	ldr	r5, [r4, #0]
 80031c4:	f015 0506 	ands.w	r5, r5, #6
 80031c8:	d106      	bne.n	80031d8 <_printf_common+0x48>
 80031ca:	f104 0a19 	add.w	sl, r4, #25
 80031ce:	68e3      	ldr	r3, [r4, #12]
 80031d0:	6832      	ldr	r2, [r6, #0]
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	42ab      	cmp	r3, r5
 80031d6:	dc26      	bgt.n	8003226 <_printf_common+0x96>
 80031d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031dc:	6822      	ldr	r2, [r4, #0]
 80031de:	3b00      	subs	r3, #0
 80031e0:	bf18      	it	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	0692      	lsls	r2, r2, #26
 80031e6:	d42b      	bmi.n	8003240 <_printf_common+0xb0>
 80031e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031ec:	4641      	mov	r1, r8
 80031ee:	4638      	mov	r0, r7
 80031f0:	47c8      	blx	r9
 80031f2:	3001      	adds	r0, #1
 80031f4:	d01e      	beq.n	8003234 <_printf_common+0xa4>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	6922      	ldr	r2, [r4, #16]
 80031fa:	f003 0306 	and.w	r3, r3, #6
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf02      	ittt	eq
 8003202:	68e5      	ldreq	r5, [r4, #12]
 8003204:	6833      	ldreq	r3, [r6, #0]
 8003206:	1aed      	subeq	r5, r5, r3
 8003208:	68a3      	ldr	r3, [r4, #8]
 800320a:	bf0c      	ite	eq
 800320c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003210:	2500      	movne	r5, #0
 8003212:	4293      	cmp	r3, r2
 8003214:	bfc4      	itt	gt
 8003216:	1a9b      	subgt	r3, r3, r2
 8003218:	18ed      	addgt	r5, r5, r3
 800321a:	2600      	movs	r6, #0
 800321c:	341a      	adds	r4, #26
 800321e:	42b5      	cmp	r5, r6
 8003220:	d11a      	bne.n	8003258 <_printf_common+0xc8>
 8003222:	2000      	movs	r0, #0
 8003224:	e008      	b.n	8003238 <_printf_common+0xa8>
 8003226:	2301      	movs	r3, #1
 8003228:	4652      	mov	r2, sl
 800322a:	4641      	mov	r1, r8
 800322c:	4638      	mov	r0, r7
 800322e:	47c8      	blx	r9
 8003230:	3001      	adds	r0, #1
 8003232:	d103      	bne.n	800323c <_printf_common+0xac>
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800323c:	3501      	adds	r5, #1
 800323e:	e7c6      	b.n	80031ce <_printf_common+0x3e>
 8003240:	18e1      	adds	r1, r4, r3
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	2030      	movs	r0, #48	@ 0x30
 8003246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800324a:	4422      	add	r2, r4
 800324c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003254:	3302      	adds	r3, #2
 8003256:	e7c7      	b.n	80031e8 <_printf_common+0x58>
 8003258:	2301      	movs	r3, #1
 800325a:	4622      	mov	r2, r4
 800325c:	4641      	mov	r1, r8
 800325e:	4638      	mov	r0, r7
 8003260:	47c8      	blx	r9
 8003262:	3001      	adds	r0, #1
 8003264:	d0e6      	beq.n	8003234 <_printf_common+0xa4>
 8003266:	3601      	adds	r6, #1
 8003268:	e7d9      	b.n	800321e <_printf_common+0x8e>
	...

0800326c <_printf_i>:
 800326c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003270:	7e0f      	ldrb	r7, [r1, #24]
 8003272:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003274:	2f78      	cmp	r7, #120	@ 0x78
 8003276:	4691      	mov	r9, r2
 8003278:	4680      	mov	r8, r0
 800327a:	460c      	mov	r4, r1
 800327c:	469a      	mov	sl, r3
 800327e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003282:	d807      	bhi.n	8003294 <_printf_i+0x28>
 8003284:	2f62      	cmp	r7, #98	@ 0x62
 8003286:	d80a      	bhi.n	800329e <_printf_i+0x32>
 8003288:	2f00      	cmp	r7, #0
 800328a:	f000 80d1 	beq.w	8003430 <_printf_i+0x1c4>
 800328e:	2f58      	cmp	r7, #88	@ 0x58
 8003290:	f000 80b8 	beq.w	8003404 <_printf_i+0x198>
 8003294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800329c:	e03a      	b.n	8003314 <_printf_i+0xa8>
 800329e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032a2:	2b15      	cmp	r3, #21
 80032a4:	d8f6      	bhi.n	8003294 <_printf_i+0x28>
 80032a6:	a101      	add	r1, pc, #4	@ (adr r1, 80032ac <_printf_i+0x40>)
 80032a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032ac:	08003305 	.word	0x08003305
 80032b0:	08003319 	.word	0x08003319
 80032b4:	08003295 	.word	0x08003295
 80032b8:	08003295 	.word	0x08003295
 80032bc:	08003295 	.word	0x08003295
 80032c0:	08003295 	.word	0x08003295
 80032c4:	08003319 	.word	0x08003319
 80032c8:	08003295 	.word	0x08003295
 80032cc:	08003295 	.word	0x08003295
 80032d0:	08003295 	.word	0x08003295
 80032d4:	08003295 	.word	0x08003295
 80032d8:	08003417 	.word	0x08003417
 80032dc:	08003343 	.word	0x08003343
 80032e0:	080033d1 	.word	0x080033d1
 80032e4:	08003295 	.word	0x08003295
 80032e8:	08003295 	.word	0x08003295
 80032ec:	08003439 	.word	0x08003439
 80032f0:	08003295 	.word	0x08003295
 80032f4:	08003343 	.word	0x08003343
 80032f8:	08003295 	.word	0x08003295
 80032fc:	08003295 	.word	0x08003295
 8003300:	080033d9 	.word	0x080033d9
 8003304:	6833      	ldr	r3, [r6, #0]
 8003306:	1d1a      	adds	r2, r3, #4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6032      	str	r2, [r6, #0]
 800330c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003314:	2301      	movs	r3, #1
 8003316:	e09c      	b.n	8003452 <_printf_i+0x1e6>
 8003318:	6833      	ldr	r3, [r6, #0]
 800331a:	6820      	ldr	r0, [r4, #0]
 800331c:	1d19      	adds	r1, r3, #4
 800331e:	6031      	str	r1, [r6, #0]
 8003320:	0606      	lsls	r6, r0, #24
 8003322:	d501      	bpl.n	8003328 <_printf_i+0xbc>
 8003324:	681d      	ldr	r5, [r3, #0]
 8003326:	e003      	b.n	8003330 <_printf_i+0xc4>
 8003328:	0645      	lsls	r5, r0, #25
 800332a:	d5fb      	bpl.n	8003324 <_printf_i+0xb8>
 800332c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003330:	2d00      	cmp	r5, #0
 8003332:	da03      	bge.n	800333c <_printf_i+0xd0>
 8003334:	232d      	movs	r3, #45	@ 0x2d
 8003336:	426d      	negs	r5, r5
 8003338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800333c:	4858      	ldr	r0, [pc, #352]	@ (80034a0 <_printf_i+0x234>)
 800333e:	230a      	movs	r3, #10
 8003340:	e011      	b.n	8003366 <_printf_i+0xfa>
 8003342:	6821      	ldr	r1, [r4, #0]
 8003344:	6833      	ldr	r3, [r6, #0]
 8003346:	0608      	lsls	r0, r1, #24
 8003348:	f853 5b04 	ldr.w	r5, [r3], #4
 800334c:	d402      	bmi.n	8003354 <_printf_i+0xe8>
 800334e:	0649      	lsls	r1, r1, #25
 8003350:	bf48      	it	mi
 8003352:	b2ad      	uxthmi	r5, r5
 8003354:	2f6f      	cmp	r7, #111	@ 0x6f
 8003356:	4852      	ldr	r0, [pc, #328]	@ (80034a0 <_printf_i+0x234>)
 8003358:	6033      	str	r3, [r6, #0]
 800335a:	bf14      	ite	ne
 800335c:	230a      	movne	r3, #10
 800335e:	2308      	moveq	r3, #8
 8003360:	2100      	movs	r1, #0
 8003362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003366:	6866      	ldr	r6, [r4, #4]
 8003368:	60a6      	str	r6, [r4, #8]
 800336a:	2e00      	cmp	r6, #0
 800336c:	db05      	blt.n	800337a <_printf_i+0x10e>
 800336e:	6821      	ldr	r1, [r4, #0]
 8003370:	432e      	orrs	r6, r5
 8003372:	f021 0104 	bic.w	r1, r1, #4
 8003376:	6021      	str	r1, [r4, #0]
 8003378:	d04b      	beq.n	8003412 <_printf_i+0x1a6>
 800337a:	4616      	mov	r6, r2
 800337c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003380:	fb03 5711 	mls	r7, r3, r1, r5
 8003384:	5dc7      	ldrb	r7, [r0, r7]
 8003386:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800338a:	462f      	mov	r7, r5
 800338c:	42bb      	cmp	r3, r7
 800338e:	460d      	mov	r5, r1
 8003390:	d9f4      	bls.n	800337c <_printf_i+0x110>
 8003392:	2b08      	cmp	r3, #8
 8003394:	d10b      	bne.n	80033ae <_printf_i+0x142>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	07df      	lsls	r7, r3, #31
 800339a:	d508      	bpl.n	80033ae <_printf_i+0x142>
 800339c:	6923      	ldr	r3, [r4, #16]
 800339e:	6861      	ldr	r1, [r4, #4]
 80033a0:	4299      	cmp	r1, r3
 80033a2:	bfde      	ittt	le
 80033a4:	2330      	movle	r3, #48	@ 0x30
 80033a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033ae:	1b92      	subs	r2, r2, r6
 80033b0:	6122      	str	r2, [r4, #16]
 80033b2:	f8cd a000 	str.w	sl, [sp]
 80033b6:	464b      	mov	r3, r9
 80033b8:	aa03      	add	r2, sp, #12
 80033ba:	4621      	mov	r1, r4
 80033bc:	4640      	mov	r0, r8
 80033be:	f7ff fee7 	bl	8003190 <_printf_common>
 80033c2:	3001      	adds	r0, #1
 80033c4:	d14a      	bne.n	800345c <_printf_i+0x1f0>
 80033c6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ca:	b004      	add	sp, #16
 80033cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	f043 0320 	orr.w	r3, r3, #32
 80033d6:	6023      	str	r3, [r4, #0]
 80033d8:	4832      	ldr	r0, [pc, #200]	@ (80034a4 <_printf_i+0x238>)
 80033da:	2778      	movs	r7, #120	@ 0x78
 80033dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	6831      	ldr	r1, [r6, #0]
 80033e4:	061f      	lsls	r7, r3, #24
 80033e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80033ea:	d402      	bmi.n	80033f2 <_printf_i+0x186>
 80033ec:	065f      	lsls	r7, r3, #25
 80033ee:	bf48      	it	mi
 80033f0:	b2ad      	uxthmi	r5, r5
 80033f2:	6031      	str	r1, [r6, #0]
 80033f4:	07d9      	lsls	r1, r3, #31
 80033f6:	bf44      	itt	mi
 80033f8:	f043 0320 	orrmi.w	r3, r3, #32
 80033fc:	6023      	strmi	r3, [r4, #0]
 80033fe:	b11d      	cbz	r5, 8003408 <_printf_i+0x19c>
 8003400:	2310      	movs	r3, #16
 8003402:	e7ad      	b.n	8003360 <_printf_i+0xf4>
 8003404:	4826      	ldr	r0, [pc, #152]	@ (80034a0 <_printf_i+0x234>)
 8003406:	e7e9      	b.n	80033dc <_printf_i+0x170>
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	f023 0320 	bic.w	r3, r3, #32
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	e7f6      	b.n	8003400 <_printf_i+0x194>
 8003412:	4616      	mov	r6, r2
 8003414:	e7bd      	b.n	8003392 <_printf_i+0x126>
 8003416:	6833      	ldr	r3, [r6, #0]
 8003418:	6825      	ldr	r5, [r4, #0]
 800341a:	6961      	ldr	r1, [r4, #20]
 800341c:	1d18      	adds	r0, r3, #4
 800341e:	6030      	str	r0, [r6, #0]
 8003420:	062e      	lsls	r6, r5, #24
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	d501      	bpl.n	800342a <_printf_i+0x1be>
 8003426:	6019      	str	r1, [r3, #0]
 8003428:	e002      	b.n	8003430 <_printf_i+0x1c4>
 800342a:	0668      	lsls	r0, r5, #25
 800342c:	d5fb      	bpl.n	8003426 <_printf_i+0x1ba>
 800342e:	8019      	strh	r1, [r3, #0]
 8003430:	2300      	movs	r3, #0
 8003432:	6123      	str	r3, [r4, #16]
 8003434:	4616      	mov	r6, r2
 8003436:	e7bc      	b.n	80033b2 <_printf_i+0x146>
 8003438:	6833      	ldr	r3, [r6, #0]
 800343a:	1d1a      	adds	r2, r3, #4
 800343c:	6032      	str	r2, [r6, #0]
 800343e:	681e      	ldr	r6, [r3, #0]
 8003440:	6862      	ldr	r2, [r4, #4]
 8003442:	2100      	movs	r1, #0
 8003444:	4630      	mov	r0, r6
 8003446:	f7fc fec3 	bl	80001d0 <memchr>
 800344a:	b108      	cbz	r0, 8003450 <_printf_i+0x1e4>
 800344c:	1b80      	subs	r0, r0, r6
 800344e:	6060      	str	r0, [r4, #4]
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	6123      	str	r3, [r4, #16]
 8003454:	2300      	movs	r3, #0
 8003456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800345a:	e7aa      	b.n	80033b2 <_printf_i+0x146>
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	4632      	mov	r2, r6
 8003460:	4649      	mov	r1, r9
 8003462:	4640      	mov	r0, r8
 8003464:	47d0      	blx	sl
 8003466:	3001      	adds	r0, #1
 8003468:	d0ad      	beq.n	80033c6 <_printf_i+0x15a>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	079b      	lsls	r3, r3, #30
 800346e:	d413      	bmi.n	8003498 <_printf_i+0x22c>
 8003470:	68e0      	ldr	r0, [r4, #12]
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	4298      	cmp	r0, r3
 8003476:	bfb8      	it	lt
 8003478:	4618      	movlt	r0, r3
 800347a:	e7a6      	b.n	80033ca <_printf_i+0x15e>
 800347c:	2301      	movs	r3, #1
 800347e:	4632      	mov	r2, r6
 8003480:	4649      	mov	r1, r9
 8003482:	4640      	mov	r0, r8
 8003484:	47d0      	blx	sl
 8003486:	3001      	adds	r0, #1
 8003488:	d09d      	beq.n	80033c6 <_printf_i+0x15a>
 800348a:	3501      	adds	r5, #1
 800348c:	68e3      	ldr	r3, [r4, #12]
 800348e:	9903      	ldr	r1, [sp, #12]
 8003490:	1a5b      	subs	r3, r3, r1
 8003492:	42ab      	cmp	r3, r5
 8003494:	dcf2      	bgt.n	800347c <_printf_i+0x210>
 8003496:	e7eb      	b.n	8003470 <_printf_i+0x204>
 8003498:	2500      	movs	r5, #0
 800349a:	f104 0619 	add.w	r6, r4, #25
 800349e:	e7f5      	b.n	800348c <_printf_i+0x220>
 80034a0:	080037e1 	.word	0x080037e1
 80034a4:	080037f2 	.word	0x080037f2

080034a8 <__sflush_r>:
 80034a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b0:	0716      	lsls	r6, r2, #28
 80034b2:	4605      	mov	r5, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	d454      	bmi.n	8003562 <__sflush_r+0xba>
 80034b8:	684b      	ldr	r3, [r1, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dc02      	bgt.n	80034c4 <__sflush_r+0x1c>
 80034be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	dd48      	ble.n	8003556 <__sflush_r+0xae>
 80034c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034c6:	2e00      	cmp	r6, #0
 80034c8:	d045      	beq.n	8003556 <__sflush_r+0xae>
 80034ca:	2300      	movs	r3, #0
 80034cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80034d0:	682f      	ldr	r7, [r5, #0]
 80034d2:	6a21      	ldr	r1, [r4, #32]
 80034d4:	602b      	str	r3, [r5, #0]
 80034d6:	d030      	beq.n	800353a <__sflush_r+0x92>
 80034d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034da:	89a3      	ldrh	r3, [r4, #12]
 80034dc:	0759      	lsls	r1, r3, #29
 80034de:	d505      	bpl.n	80034ec <__sflush_r+0x44>
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	1ad2      	subs	r2, r2, r3
 80034e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034e6:	b10b      	cbz	r3, 80034ec <__sflush_r+0x44>
 80034e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034ea:	1ad2      	subs	r2, r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034f0:	6a21      	ldr	r1, [r4, #32]
 80034f2:	4628      	mov	r0, r5
 80034f4:	47b0      	blx	r6
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	d106      	bne.n	800350a <__sflush_r+0x62>
 80034fc:	6829      	ldr	r1, [r5, #0]
 80034fe:	291d      	cmp	r1, #29
 8003500:	d82b      	bhi.n	800355a <__sflush_r+0xb2>
 8003502:	4a2a      	ldr	r2, [pc, #168]	@ (80035ac <__sflush_r+0x104>)
 8003504:	40ca      	lsrs	r2, r1
 8003506:	07d6      	lsls	r6, r2, #31
 8003508:	d527      	bpl.n	800355a <__sflush_r+0xb2>
 800350a:	2200      	movs	r2, #0
 800350c:	6062      	str	r2, [r4, #4]
 800350e:	04d9      	lsls	r1, r3, #19
 8003510:	6922      	ldr	r2, [r4, #16]
 8003512:	6022      	str	r2, [r4, #0]
 8003514:	d504      	bpl.n	8003520 <__sflush_r+0x78>
 8003516:	1c42      	adds	r2, r0, #1
 8003518:	d101      	bne.n	800351e <__sflush_r+0x76>
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	b903      	cbnz	r3, 8003520 <__sflush_r+0x78>
 800351e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003522:	602f      	str	r7, [r5, #0]
 8003524:	b1b9      	cbz	r1, 8003556 <__sflush_r+0xae>
 8003526:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800352a:	4299      	cmp	r1, r3
 800352c:	d002      	beq.n	8003534 <__sflush_r+0x8c>
 800352e:	4628      	mov	r0, r5
 8003530:	f7ff fbf4 	bl	8002d1c <_free_r>
 8003534:	2300      	movs	r3, #0
 8003536:	6363      	str	r3, [r4, #52]	@ 0x34
 8003538:	e00d      	b.n	8003556 <__sflush_r+0xae>
 800353a:	2301      	movs	r3, #1
 800353c:	4628      	mov	r0, r5
 800353e:	47b0      	blx	r6
 8003540:	4602      	mov	r2, r0
 8003542:	1c50      	adds	r0, r2, #1
 8003544:	d1c9      	bne.n	80034da <__sflush_r+0x32>
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0c6      	beq.n	80034da <__sflush_r+0x32>
 800354c:	2b1d      	cmp	r3, #29
 800354e:	d001      	beq.n	8003554 <__sflush_r+0xac>
 8003550:	2b16      	cmp	r3, #22
 8003552:	d11e      	bne.n	8003592 <__sflush_r+0xea>
 8003554:	602f      	str	r7, [r5, #0]
 8003556:	2000      	movs	r0, #0
 8003558:	e022      	b.n	80035a0 <__sflush_r+0xf8>
 800355a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800355e:	b21b      	sxth	r3, r3
 8003560:	e01b      	b.n	800359a <__sflush_r+0xf2>
 8003562:	690f      	ldr	r7, [r1, #16]
 8003564:	2f00      	cmp	r7, #0
 8003566:	d0f6      	beq.n	8003556 <__sflush_r+0xae>
 8003568:	0793      	lsls	r3, r2, #30
 800356a:	680e      	ldr	r6, [r1, #0]
 800356c:	bf08      	it	eq
 800356e:	694b      	ldreq	r3, [r1, #20]
 8003570:	600f      	str	r7, [r1, #0]
 8003572:	bf18      	it	ne
 8003574:	2300      	movne	r3, #0
 8003576:	eba6 0807 	sub.w	r8, r6, r7
 800357a:	608b      	str	r3, [r1, #8]
 800357c:	f1b8 0f00 	cmp.w	r8, #0
 8003580:	dde9      	ble.n	8003556 <__sflush_r+0xae>
 8003582:	6a21      	ldr	r1, [r4, #32]
 8003584:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003586:	4643      	mov	r3, r8
 8003588:	463a      	mov	r2, r7
 800358a:	4628      	mov	r0, r5
 800358c:	47b0      	blx	r6
 800358e:	2800      	cmp	r0, #0
 8003590:	dc08      	bgt.n	80035a4 <__sflush_r+0xfc>
 8003592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800359a:	81a3      	strh	r3, [r4, #12]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a4:	4407      	add	r7, r0
 80035a6:	eba8 0800 	sub.w	r8, r8, r0
 80035aa:	e7e7      	b.n	800357c <__sflush_r+0xd4>
 80035ac:	20400001 	.word	0x20400001

080035b0 <_fflush_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	690b      	ldr	r3, [r1, #16]
 80035b4:	4605      	mov	r5, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	b913      	cbnz	r3, 80035c0 <_fflush_r+0x10>
 80035ba:	2500      	movs	r5, #0
 80035bc:	4628      	mov	r0, r5
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	b118      	cbz	r0, 80035ca <_fflush_r+0x1a>
 80035c2:	6a03      	ldr	r3, [r0, #32]
 80035c4:	b90b      	cbnz	r3, 80035ca <_fflush_r+0x1a>
 80035c6:	f7ff f9af 	bl	8002928 <__sinit>
 80035ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f3      	beq.n	80035ba <_fflush_r+0xa>
 80035d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035d4:	07d0      	lsls	r0, r2, #31
 80035d6:	d404      	bmi.n	80035e2 <_fflush_r+0x32>
 80035d8:	0599      	lsls	r1, r3, #22
 80035da:	d402      	bmi.n	80035e2 <_fflush_r+0x32>
 80035dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035de:	f7ff fb9a 	bl	8002d16 <__retarget_lock_acquire_recursive>
 80035e2:	4628      	mov	r0, r5
 80035e4:	4621      	mov	r1, r4
 80035e6:	f7ff ff5f 	bl	80034a8 <__sflush_r>
 80035ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035ec:	07da      	lsls	r2, r3, #31
 80035ee:	4605      	mov	r5, r0
 80035f0:	d4e4      	bmi.n	80035bc <_fflush_r+0xc>
 80035f2:	89a3      	ldrh	r3, [r4, #12]
 80035f4:	059b      	lsls	r3, r3, #22
 80035f6:	d4e1      	bmi.n	80035bc <_fflush_r+0xc>
 80035f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035fa:	f7ff fb8d 	bl	8002d18 <__retarget_lock_release_recursive>
 80035fe:	e7dd      	b.n	80035bc <_fflush_r+0xc>

08003600 <__swhatbuf_r>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	460c      	mov	r4, r1
 8003604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003608:	2900      	cmp	r1, #0
 800360a:	b096      	sub	sp, #88	@ 0x58
 800360c:	4615      	mov	r5, r2
 800360e:	461e      	mov	r6, r3
 8003610:	da0d      	bge.n	800362e <__swhatbuf_r+0x2e>
 8003612:	89a3      	ldrh	r3, [r4, #12]
 8003614:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	bf14      	ite	ne
 800361e:	2340      	movne	r3, #64	@ 0x40
 8003620:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003624:	2000      	movs	r0, #0
 8003626:	6031      	str	r1, [r6, #0]
 8003628:	602b      	str	r3, [r5, #0]
 800362a:	b016      	add	sp, #88	@ 0x58
 800362c:	bd70      	pop	{r4, r5, r6, pc}
 800362e:	466a      	mov	r2, sp
 8003630:	f000 f848 	bl	80036c4 <_fstat_r>
 8003634:	2800      	cmp	r0, #0
 8003636:	dbec      	blt.n	8003612 <__swhatbuf_r+0x12>
 8003638:	9901      	ldr	r1, [sp, #4]
 800363a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800363e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003642:	4259      	negs	r1, r3
 8003644:	4159      	adcs	r1, r3
 8003646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800364a:	e7eb      	b.n	8003624 <__swhatbuf_r+0x24>

0800364c <__smakebuf_r>:
 800364c:	898b      	ldrh	r3, [r1, #12]
 800364e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003650:	079d      	lsls	r5, r3, #30
 8003652:	4606      	mov	r6, r0
 8003654:	460c      	mov	r4, r1
 8003656:	d507      	bpl.n	8003668 <__smakebuf_r+0x1c>
 8003658:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	6123      	str	r3, [r4, #16]
 8003660:	2301      	movs	r3, #1
 8003662:	6163      	str	r3, [r4, #20]
 8003664:	b003      	add	sp, #12
 8003666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003668:	ab01      	add	r3, sp, #4
 800366a:	466a      	mov	r2, sp
 800366c:	f7ff ffc8 	bl	8003600 <__swhatbuf_r>
 8003670:	9f00      	ldr	r7, [sp, #0]
 8003672:	4605      	mov	r5, r0
 8003674:	4639      	mov	r1, r7
 8003676:	4630      	mov	r0, r6
 8003678:	f7ff fbbc 	bl	8002df4 <_malloc_r>
 800367c:	b948      	cbnz	r0, 8003692 <__smakebuf_r+0x46>
 800367e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003682:	059a      	lsls	r2, r3, #22
 8003684:	d4ee      	bmi.n	8003664 <__smakebuf_r+0x18>
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	81a3      	strh	r3, [r4, #12]
 8003690:	e7e2      	b.n	8003658 <__smakebuf_r+0xc>
 8003692:	89a3      	ldrh	r3, [r4, #12]
 8003694:	6020      	str	r0, [r4, #0]
 8003696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	9b01      	ldr	r3, [sp, #4]
 800369e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80036a2:	b15b      	cbz	r3, 80036bc <__smakebuf_r+0x70>
 80036a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036a8:	4630      	mov	r0, r6
 80036aa:	f000 f81d 	bl	80036e8 <_isatty_r>
 80036ae:	b128      	cbz	r0, 80036bc <__smakebuf_r+0x70>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	81a3      	strh	r3, [r4, #12]
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	431d      	orrs	r5, r3
 80036c0:	81a5      	strh	r5, [r4, #12]
 80036c2:	e7cf      	b.n	8003664 <__smakebuf_r+0x18>

080036c4 <_fstat_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4d07      	ldr	r5, [pc, #28]	@ (80036e4 <_fstat_r+0x20>)
 80036c8:	2300      	movs	r3, #0
 80036ca:	4604      	mov	r4, r0
 80036cc:	4608      	mov	r0, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	f7fd fa40 	bl	8000b56 <_fstat>
 80036d6:	1c43      	adds	r3, r0, #1
 80036d8:	d102      	bne.n	80036e0 <_fstat_r+0x1c>
 80036da:	682b      	ldr	r3, [r5, #0]
 80036dc:	b103      	cbz	r3, 80036e0 <_fstat_r+0x1c>
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	bd38      	pop	{r3, r4, r5, pc}
 80036e2:	bf00      	nop
 80036e4:	200001f0 	.word	0x200001f0

080036e8 <_isatty_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4d06      	ldr	r5, [pc, #24]	@ (8003704 <_isatty_r+0x1c>)
 80036ec:	2300      	movs	r3, #0
 80036ee:	4604      	mov	r4, r0
 80036f0:	4608      	mov	r0, r1
 80036f2:	602b      	str	r3, [r5, #0]
 80036f4:	f7fd fa3f 	bl	8000b76 <_isatty>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d102      	bne.n	8003702 <_isatty_r+0x1a>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	b103      	cbz	r3, 8003702 <_isatty_r+0x1a>
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	bd38      	pop	{r3, r4, r5, pc}
 8003704:	200001f0 	.word	0x200001f0

08003708 <_sbrk_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4d06      	ldr	r5, [pc, #24]	@ (8003724 <_sbrk_r+0x1c>)
 800370c:	2300      	movs	r3, #0
 800370e:	4604      	mov	r4, r0
 8003710:	4608      	mov	r0, r1
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	f7fd fa48 	bl	8000ba8 <_sbrk>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d102      	bne.n	8003722 <_sbrk_r+0x1a>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b103      	cbz	r3, 8003722 <_sbrk_r+0x1a>
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	200001f0 	.word	0x200001f0

08003728 <_init>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	bf00      	nop
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr

08003734 <_fini>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr
